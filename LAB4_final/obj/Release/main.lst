                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Sun Apr 16 23:39:31 2017
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _isr_zero
                             13 	.globl _timer0_zero
                             14 	.globl _main
                             15 	.globl _TF1
                             16 	.globl _TR1
                             17 	.globl _TF0
                             18 	.globl _TR0
                             19 	.globl _IE1
                             20 	.globl _IT1
                             21 	.globl _IE0
                             22 	.globl _IT0
                             23 	.globl _SM0
                             24 	.globl _SM1
                             25 	.globl _SM2
                             26 	.globl _REN
                             27 	.globl _TB8
                             28 	.globl _RB8
                             29 	.globl _TI
                             30 	.globl _RI
                             31 	.globl _CY
                             32 	.globl _AC
                             33 	.globl _F0
                             34 	.globl _RS1
                             35 	.globl _RS0
                             36 	.globl _OV
                             37 	.globl _F1
                             38 	.globl _P
                             39 	.globl _RD
                             40 	.globl _WR
                             41 	.globl _T1
                             42 	.globl _T0
                             43 	.globl _INT1
                             44 	.globl _INT0
                             45 	.globl _TXD0
                             46 	.globl _TXD
                             47 	.globl _RXD0
                             48 	.globl _RXD
                             49 	.globl _P3_7
                             50 	.globl _P3_6
                             51 	.globl _P3_5
                             52 	.globl _P3_4
                             53 	.globl _P3_3
                             54 	.globl _P3_2
                             55 	.globl _P3_1
                             56 	.globl _P3_0
                             57 	.globl _P2_7
                             58 	.globl _P2_6
                             59 	.globl _P2_5
                             60 	.globl _P2_4
                             61 	.globl _P2_3
                             62 	.globl _P2_2
                             63 	.globl _P2_1
                             64 	.globl _P2_0
                             65 	.globl _P1_7
                             66 	.globl _P1_6
                             67 	.globl _P1_5
                             68 	.globl _P1_4
                             69 	.globl _P1_3
                             70 	.globl _P1_2
                             71 	.globl _P1_1
                             72 	.globl _P1_0
                             73 	.globl _P0_7
                             74 	.globl _P0_6
                             75 	.globl _P0_5
                             76 	.globl _P0_4
                             77 	.globl _P0_3
                             78 	.globl _P0_2
                             79 	.globl _P0_1
                             80 	.globl _P0_0
                             81 	.globl _PS
                             82 	.globl _PT1
                             83 	.globl _PX1
                             84 	.globl _PT0
                             85 	.globl _PX0
                             86 	.globl _EA
                             87 	.globl _ES
                             88 	.globl _ET1
                             89 	.globl _EX1
                             90 	.globl _ET0
                             91 	.globl _EX0
                             92 	.globl _BREG_F7
                             93 	.globl _BREG_F6
                             94 	.globl _BREG_F5
                             95 	.globl _BREG_F4
                             96 	.globl _BREG_F3
                             97 	.globl _BREG_F2
                             98 	.globl _BREG_F1
                             99 	.globl _BREG_F0
                            100 	.globl _P5_7
                            101 	.globl _P5_6
                            102 	.globl _P5_5
                            103 	.globl _P5_4
                            104 	.globl _P5_3
                            105 	.globl _P5_2
                            106 	.globl _P5_1
                            107 	.globl _P5_0
                            108 	.globl _P4_7
                            109 	.globl _P4_6
                            110 	.globl _P4_5
                            111 	.globl _P4_4
                            112 	.globl _P4_3
                            113 	.globl _P4_2
                            114 	.globl _P4_1
                            115 	.globl _P4_0
                            116 	.globl _PX0L
                            117 	.globl _PT0L
                            118 	.globl _PX1L
                            119 	.globl _PT1L
                            120 	.globl _PLS
                            121 	.globl _PT2L
                            122 	.globl _PPCL
                            123 	.globl _EC
                            124 	.globl _CCF0
                            125 	.globl _CCF1
                            126 	.globl _CCF2
                            127 	.globl _CCF3
                            128 	.globl _CCF4
                            129 	.globl _CR
                            130 	.globl _CF
                            131 	.globl _TF2
                            132 	.globl _EXF2
                            133 	.globl _RCLK
                            134 	.globl _TCLK
                            135 	.globl _EXEN2
                            136 	.globl _TR2
                            137 	.globl _C_T2
                            138 	.globl _CP_RL2
                            139 	.globl _T2CON_7
                            140 	.globl _T2CON_6
                            141 	.globl _T2CON_5
                            142 	.globl _T2CON_4
                            143 	.globl _T2CON_3
                            144 	.globl _T2CON_2
                            145 	.globl _T2CON_1
                            146 	.globl _T2CON_0
                            147 	.globl _PT2
                            148 	.globl _ET2
                            149 	.globl _TMOD
                            150 	.globl _TL1
                            151 	.globl _TL0
                            152 	.globl _TH1
                            153 	.globl _TH0
                            154 	.globl _TCON
                            155 	.globl _SP
                            156 	.globl _SCON
                            157 	.globl _SBUF0
                            158 	.globl _SBUF
                            159 	.globl _PSW
                            160 	.globl _PCON
                            161 	.globl _P3
                            162 	.globl _P2
                            163 	.globl _P1
                            164 	.globl _P0
                            165 	.globl _IP
                            166 	.globl _IE
                            167 	.globl _DP0L
                            168 	.globl _DPL
                            169 	.globl _DP0H
                            170 	.globl _DPH
                            171 	.globl _B
                            172 	.globl _ACC
                            173 	.globl _EECON
                            174 	.globl _KBF
                            175 	.globl _KBE
                            176 	.globl _KBLS
                            177 	.globl _BRL
                            178 	.globl _BDRCON
                            179 	.globl _T2MOD
                            180 	.globl _SPDAT
                            181 	.globl _SPSTA
                            182 	.globl _SPCON
                            183 	.globl _SADEN
                            184 	.globl _SADDR
                            185 	.globl _WDTPRG
                            186 	.globl _WDTRST
                            187 	.globl _P5
                            188 	.globl _P4
                            189 	.globl _IPH1
                            190 	.globl _IPL1
                            191 	.globl _IPH0
                            192 	.globl _IPL0
                            193 	.globl _IEN1
                            194 	.globl _IEN0
                            195 	.globl _CMOD
                            196 	.globl _CL
                            197 	.globl _CH
                            198 	.globl _CCON
                            199 	.globl _CCAPM4
                            200 	.globl _CCAPM3
                            201 	.globl _CCAPM2
                            202 	.globl _CCAPM1
                            203 	.globl _CCAPM0
                            204 	.globl _CCAP4L
                            205 	.globl _CCAP3L
                            206 	.globl _CCAP2L
                            207 	.globl _CCAP1L
                            208 	.globl _CCAP0L
                            209 	.globl _CCAP4H
                            210 	.globl _CCAP3H
                            211 	.globl _CCAP2H
                            212 	.globl _CCAP1H
                            213 	.globl _CCAP0H
                            214 	.globl _CKCKON1
                            215 	.globl _CKCKON0
                            216 	.globl _CKRL
                            217 	.globl _AUXR1
                            218 	.globl _AUXR
                            219 	.globl _TH2
                            220 	.globl _TL2
                            221 	.globl _RCAP2H
                            222 	.globl _RCAP2L
                            223 	.globl _T2CON
                            224 	.globl _lcd_address
                            225 	.globl _TIMER_CLOCK
                            226 	.globl _end_address
                            227 	.globl _count_value
                            228 	.globl _IOE_pins
                            229 	.globl _print_flag
                            230 	.globl _rx_array
                            231 ;--------------------------------------------------------
                            232 ; special function registers
                            233 ;--------------------------------------------------------
                            234 	.area RSEG    (DATA)
                    00C8    235 _T2CON	=	0x00c8
                    00CA    236 _RCAP2L	=	0x00ca
                    00CB    237 _RCAP2H	=	0x00cb
                    00CC    238 _TL2	=	0x00cc
                    00CD    239 _TH2	=	0x00cd
                    008E    240 _AUXR	=	0x008e
                    00A2    241 _AUXR1	=	0x00a2
                    0097    242 _CKRL	=	0x0097
                    008F    243 _CKCKON0	=	0x008f
                    008F    244 _CKCKON1	=	0x008f
                    00FA    245 _CCAP0H	=	0x00fa
                    00FB    246 _CCAP1H	=	0x00fb
                    00FC    247 _CCAP2H	=	0x00fc
                    00FD    248 _CCAP3H	=	0x00fd
                    00FE    249 _CCAP4H	=	0x00fe
                    00EA    250 _CCAP0L	=	0x00ea
                    00EB    251 _CCAP1L	=	0x00eb
                    00EC    252 _CCAP2L	=	0x00ec
                    00ED    253 _CCAP3L	=	0x00ed
                    00EE    254 _CCAP4L	=	0x00ee
                    00DA    255 _CCAPM0	=	0x00da
                    00DB    256 _CCAPM1	=	0x00db
                    00DC    257 _CCAPM2	=	0x00dc
                    00DD    258 _CCAPM3	=	0x00dd
                    00DE    259 _CCAPM4	=	0x00de
                    00D8    260 _CCON	=	0x00d8
                    00F9    261 _CH	=	0x00f9
                    00E9    262 _CL	=	0x00e9
                    00D9    263 _CMOD	=	0x00d9
                    00A8    264 _IEN0	=	0x00a8
                    00B1    265 _IEN1	=	0x00b1
                    00B8    266 _IPL0	=	0x00b8
                    00B7    267 _IPH0	=	0x00b7
                    00B2    268 _IPL1	=	0x00b2
                    00B3    269 _IPH1	=	0x00b3
                    00C0    270 _P4	=	0x00c0
                    00D8    271 _P5	=	0x00d8
                    00A6    272 _WDTRST	=	0x00a6
                    00A7    273 _WDTPRG	=	0x00a7
                    00A9    274 _SADDR	=	0x00a9
                    00B9    275 _SADEN	=	0x00b9
                    00C3    276 _SPCON	=	0x00c3
                    00C4    277 _SPSTA	=	0x00c4
                    00C5    278 _SPDAT	=	0x00c5
                    00C9    279 _T2MOD	=	0x00c9
                    009B    280 _BDRCON	=	0x009b
                    009A    281 _BRL	=	0x009a
                    009C    282 _KBLS	=	0x009c
                    009D    283 _KBE	=	0x009d
                    009E    284 _KBF	=	0x009e
                    00D2    285 _EECON	=	0x00d2
                    00E0    286 _ACC	=	0x00e0
                    00F0    287 _B	=	0x00f0
                    0083    288 _DPH	=	0x0083
                    0083    289 _DP0H	=	0x0083
                    0082    290 _DPL	=	0x0082
                    0082    291 _DP0L	=	0x0082
                    00A8    292 _IE	=	0x00a8
                    00B8    293 _IP	=	0x00b8
                    0080    294 _P0	=	0x0080
                    0090    295 _P1	=	0x0090
                    00A0    296 _P2	=	0x00a0
                    00B0    297 _P3	=	0x00b0
                    0087    298 _PCON	=	0x0087
                    00D0    299 _PSW	=	0x00d0
                    0099    300 _SBUF	=	0x0099
                    0099    301 _SBUF0	=	0x0099
                    0098    302 _SCON	=	0x0098
                    0081    303 _SP	=	0x0081
                    0088    304 _TCON	=	0x0088
                    008C    305 _TH0	=	0x008c
                    008D    306 _TH1	=	0x008d
                    008A    307 _TL0	=	0x008a
                    008B    308 _TL1	=	0x008b
                    0089    309 _TMOD	=	0x0089
                            310 ;--------------------------------------------------------
                            311 ; special function bits
                            312 ;--------------------------------------------------------
                            313 	.area RSEG    (DATA)
                    00AD    314 _ET2	=	0x00ad
                    00BD    315 _PT2	=	0x00bd
                    00C8    316 _T2CON_0	=	0x00c8
                    00C9    317 _T2CON_1	=	0x00c9
                    00CA    318 _T2CON_2	=	0x00ca
                    00CB    319 _T2CON_3	=	0x00cb
                    00CC    320 _T2CON_4	=	0x00cc
                    00CD    321 _T2CON_5	=	0x00cd
                    00CE    322 _T2CON_6	=	0x00ce
                    00CF    323 _T2CON_7	=	0x00cf
                    00C8    324 _CP_RL2	=	0x00c8
                    00C9    325 _C_T2	=	0x00c9
                    00CA    326 _TR2	=	0x00ca
                    00CB    327 _EXEN2	=	0x00cb
                    00CC    328 _TCLK	=	0x00cc
                    00CD    329 _RCLK	=	0x00cd
                    00CE    330 _EXF2	=	0x00ce
                    00CF    331 _TF2	=	0x00cf
                    00DF    332 _CF	=	0x00df
                    00DE    333 _CR	=	0x00de
                    00DC    334 _CCF4	=	0x00dc
                    00DB    335 _CCF3	=	0x00db
                    00DA    336 _CCF2	=	0x00da
                    00D9    337 _CCF1	=	0x00d9
                    00D8    338 _CCF0	=	0x00d8
                    00AE    339 _EC	=	0x00ae
                    00BE    340 _PPCL	=	0x00be
                    00BD    341 _PT2L	=	0x00bd
                    00BC    342 _PLS	=	0x00bc
                    00BB    343 _PT1L	=	0x00bb
                    00BA    344 _PX1L	=	0x00ba
                    00B9    345 _PT0L	=	0x00b9
                    00B8    346 _PX0L	=	0x00b8
                    00C0    347 _P4_0	=	0x00c0
                    00C1    348 _P4_1	=	0x00c1
                    00C2    349 _P4_2	=	0x00c2
                    00C3    350 _P4_3	=	0x00c3
                    00C4    351 _P4_4	=	0x00c4
                    00C5    352 _P4_5	=	0x00c5
                    00C6    353 _P4_6	=	0x00c6
                    00C7    354 _P4_7	=	0x00c7
                    00D8    355 _P5_0	=	0x00d8
                    00D9    356 _P5_1	=	0x00d9
                    00DA    357 _P5_2	=	0x00da
                    00DB    358 _P5_3	=	0x00db
                    00DC    359 _P5_4	=	0x00dc
                    00DD    360 _P5_5	=	0x00dd
                    00DE    361 _P5_6	=	0x00de
                    00DF    362 _P5_7	=	0x00df
                    00F0    363 _BREG_F0	=	0x00f0
                    00F1    364 _BREG_F1	=	0x00f1
                    00F2    365 _BREG_F2	=	0x00f2
                    00F3    366 _BREG_F3	=	0x00f3
                    00F4    367 _BREG_F4	=	0x00f4
                    00F5    368 _BREG_F5	=	0x00f5
                    00F6    369 _BREG_F6	=	0x00f6
                    00F7    370 _BREG_F7	=	0x00f7
                    00A8    371 _EX0	=	0x00a8
                    00A9    372 _ET0	=	0x00a9
                    00AA    373 _EX1	=	0x00aa
                    00AB    374 _ET1	=	0x00ab
                    00AC    375 _ES	=	0x00ac
                    00AF    376 _EA	=	0x00af
                    00B8    377 _PX0	=	0x00b8
                    00B9    378 _PT0	=	0x00b9
                    00BA    379 _PX1	=	0x00ba
                    00BB    380 _PT1	=	0x00bb
                    00BC    381 _PS	=	0x00bc
                    0080    382 _P0_0	=	0x0080
                    0081    383 _P0_1	=	0x0081
                    0082    384 _P0_2	=	0x0082
                    0083    385 _P0_3	=	0x0083
                    0084    386 _P0_4	=	0x0084
                    0085    387 _P0_5	=	0x0085
                    0086    388 _P0_6	=	0x0086
                    0087    389 _P0_7	=	0x0087
                    0090    390 _P1_0	=	0x0090
                    0091    391 _P1_1	=	0x0091
                    0092    392 _P1_2	=	0x0092
                    0093    393 _P1_3	=	0x0093
                    0094    394 _P1_4	=	0x0094
                    0095    395 _P1_5	=	0x0095
                    0096    396 _P1_6	=	0x0096
                    0097    397 _P1_7	=	0x0097
                    00A0    398 _P2_0	=	0x00a0
                    00A1    399 _P2_1	=	0x00a1
                    00A2    400 _P2_2	=	0x00a2
                    00A3    401 _P2_3	=	0x00a3
                    00A4    402 _P2_4	=	0x00a4
                    00A5    403 _P2_5	=	0x00a5
                    00A6    404 _P2_6	=	0x00a6
                    00A7    405 _P2_7	=	0x00a7
                    00B0    406 _P3_0	=	0x00b0
                    00B1    407 _P3_1	=	0x00b1
                    00B2    408 _P3_2	=	0x00b2
                    00B3    409 _P3_3	=	0x00b3
                    00B4    410 _P3_4	=	0x00b4
                    00B5    411 _P3_5	=	0x00b5
                    00B6    412 _P3_6	=	0x00b6
                    00B7    413 _P3_7	=	0x00b7
                    00B0    414 _RXD	=	0x00b0
                    00B0    415 _RXD0	=	0x00b0
                    00B1    416 _TXD	=	0x00b1
                    00B1    417 _TXD0	=	0x00b1
                    00B2    418 _INT0	=	0x00b2
                    00B3    419 _INT1	=	0x00b3
                    00B4    420 _T0	=	0x00b4
                    00B5    421 _T1	=	0x00b5
                    00B6    422 _WR	=	0x00b6
                    00B7    423 _RD	=	0x00b7
                    00D0    424 _P	=	0x00d0
                    00D1    425 _F1	=	0x00d1
                    00D2    426 _OV	=	0x00d2
                    00D3    427 _RS0	=	0x00d3
                    00D4    428 _RS1	=	0x00d4
                    00D5    429 _F0	=	0x00d5
                    00D6    430 _AC	=	0x00d6
                    00D7    431 _CY	=	0x00d7
                    0098    432 _RI	=	0x0098
                    0099    433 _TI	=	0x0099
                    009A    434 _RB8	=	0x009a
                    009B    435 _TB8	=	0x009b
                    009C    436 _REN	=	0x009c
                    009D    437 _SM2	=	0x009d
                    009E    438 _SM1	=	0x009e
                    009F    439 _SM0	=	0x009f
                    0088    440 _IT0	=	0x0088
                    0089    441 _IE0	=	0x0089
                    008A    442 _IT1	=	0x008a
                    008B    443 _IE1	=	0x008b
                    008C    444 _TR0	=	0x008c
                    008D    445 _TF0	=	0x008d
                    008E    446 _TR1	=	0x008e
                    008F    447 _TF1	=	0x008f
                            448 ;--------------------------------------------------------
                            449 ; overlayable register banks
                            450 ;--------------------------------------------------------
                            451 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     452 	.ds 8
                            453 ;--------------------------------------------------------
                            454 ; internal ram data
                            455 ;--------------------------------------------------------
                            456 	.area DSEG    (DATA)
                            457 ;--------------------------------------------------------
                            458 ; overlayable items in internal ram 
                            459 ;--------------------------------------------------------
                            460 	.area OSEG    (OVR,DATA)
                            461 ;--------------------------------------------------------
                            462 ; Stack segment in internal ram 
                            463 ;--------------------------------------------------------
                            464 	.area	SSEG	(DATA)
   0000                     465 __start__stack:
   0000                     466 	.ds	1
                            467 
                            468 ;--------------------------------------------------------
                            469 ; indirectly addressable internal ram data
                            470 ;--------------------------------------------------------
                            471 	.area ISEG    (DATA)
                            472 ;--------------------------------------------------------
                            473 ; bit data
                            474 ;--------------------------------------------------------
                            475 	.area BSEG    (BIT)
                            476 ;--------------------------------------------------------
                            477 ; paged external ram data
                            478 ;--------------------------------------------------------
                            479 	.area PSEG    (PAG,XDATA)
                            480 ;--------------------------------------------------------
                            481 ; external ram data
                            482 ;--------------------------------------------------------
                            483 	.area XSEG    (XDATA)
   0000                     484 _rx_array::
   0000                     485 	.ds 100
   0064                     486 _print_flag::
   0064                     487 	.ds 1
   0065                     488 _IOE_pins::
   0065                     489 	.ds 16
   0075                     490 _main_mystr3_1_1:
   0075                     491 	.ds 64
   00B5                     492 _main_x_co_1_1:
   00B5                     493 	.ds 1
   00B6                     494 _main_y_co_1_1:
   00B6                     495 	.ds 1
   00B7                     496 _main_invalid_bit_1_1:
   00B7                     497 	.ds 1
                            498 ;--------------------------------------------------------
                            499 ; external initialized ram data
                            500 ;--------------------------------------------------------
                            501 	.area XISEG   (XDATA)
   0000                     502 _count_value::
   0000                     503 	.ds 1
   0001                     504 _end_address::
   0001                     505 	.ds 2
   0003                     506 _TIMER_CLOCK::
   0003                     507 	.ds 1
   0004                     508 _lcd_address::
   0004                     509 	.ds 1
                            510 	.area HOME    (CODE)
                            511 	.area GSINIT0 (CODE)
                            512 	.area GSINIT1 (CODE)
                            513 	.area GSINIT2 (CODE)
                            514 	.area GSINIT3 (CODE)
                            515 	.area GSINIT4 (CODE)
                            516 	.area GSINIT5 (CODE)
                            517 	.area GSINIT  (CODE)
                            518 	.area GSFINAL (CODE)
                            519 	.area CSEG    (CODE)
                            520 ;--------------------------------------------------------
                            521 ; interrupt vector 
                            522 ;--------------------------------------------------------
                            523 	.area HOME    (CODE)
   0000                     524 __interrupt_vect:
   0000 02s00r00            525 	ljmp	__sdcc_gsinit_startup
   0003 02s06r40            526 	ljmp	_isr_zero
   0006                     527 	.ds	5
   000B 02s05rEA            528 	ljmp	_timer0_zero
                            529 ;--------------------------------------------------------
                            530 ; global & static initialisations
                            531 ;--------------------------------------------------------
                            532 	.area HOME    (CODE)
                            533 	.area GSINIT  (CODE)
                            534 	.area GSFINAL (CODE)
                            535 	.area GSINIT  (CODE)
                            536 	.globl __sdcc_gsinit_startup
                            537 	.globl __sdcc_program_startup
                            538 	.globl __start__stack
                            539 	.globl __mcs51_genXINIT
                            540 	.globl __mcs51_genXRAMCLEAR
                            541 	.globl __mcs51_genRAMCLEAR
                            542 	.area GSFINAL (CODE)
   0000 02s00r00            543 	ljmp	__sdcc_program_startup
                            544 ;--------------------------------------------------------
                            545 ; Home
                            546 ;--------------------------------------------------------
                            547 	.area HOME    (CODE)
                            548 	.area CSEG    (CODE)
   0000                     549 __sdcc_program_startup:
   0000 12s00r05            550 	lcall	_main
                            551 ;	return from main will lock up
   0003 80 FE               552 	sjmp .
                            553 ;--------------------------------------------------------
                            554 ; code
                            555 ;--------------------------------------------------------
                            556 	.area CSEG    (CODE)
                            557 ;------------------------------------------------------------
                            558 ;Allocation info for local variables in function 'main'
                            559 ;------------------------------------------------------------
                            560 ;user_address              Allocated with name '_main_user_address_1_1'
                            561 ;user_data                 Allocated with name '_main_user_data_1_1'
                            562 ;user_addr                 Allocated with name '_main_user_addr_1_1'
                            563 ;user_d                    Allocated with name '_main_user_d_1_1'
                            564 ;EEPROM_read_data          Allocated with name '_main_EEPROM_read_data_1_1'
                            565 ;temp                      Allocated with name '_main_temp_1_1'
                            566 ;mystr3                    Allocated with name '_main_mystr3_1_1'
                            567 ;mystring                  Allocated with name '_main_mystring_1_1'
                            568 ;x_co                      Allocated with name '_main_x_co_1_1'
                            569 ;y_co                      Allocated with name '_main_y_co_1_1'
                            570 ;invalid_bit               Allocated with name '_main_invalid_bit_1_1'
                            571 ;i                         Allocated with name '_main_i_1_1'
                            572 ;------------------------------------------------------------
                            573 ;	main.c:41: void main(){
                            574 ;	-----------------------------------------
                            575 ;	 function main
                            576 ;	-----------------------------------------
   0005                     577 _main:
                    0002    578 	ar2 = 0x02
                    0003    579 	ar3 = 0x03
                    0004    580 	ar4 = 0x04
                    0005    581 	ar5 = 0x05
                    0006    582 	ar6 = 0x06
                    0007    583 	ar7 = 0x07
                    0000    584 	ar0 = 0x00
                    0001    585 	ar1 = 0x01
                            586 ;	main.c:46: unsigned char mystr3[]= "HELLO ESD_LAB4 BY DHARMIK THAKKAR REQUIRED ELEMENTS I2C AND LCD";
                            587 ;	genPointerSet
                            588 ;     genFarPointerSet
   0005 90s00r75            589 	mov	dptr,#_main_mystr3_1_1
   0008 74 48               590 	mov	a,#0x48
   000A F0                  591 	movx	@dptr,a
                            592 ;	genPointerSet
                            593 ;     genFarPointerSet
   000B 90s00r76            594 	mov	dptr,#(_main_mystr3_1_1 + 0x0001)
   000E 74 45               595 	mov	a,#0x45
   0010 F0                  596 	movx	@dptr,a
                            597 ;	genPointerSet
                            598 ;     genFarPointerSet
   0011 90s00r77            599 	mov	dptr,#(_main_mystr3_1_1 + 0x0002)
   0014 74 4C               600 	mov	a,#0x4C
   0016 F0                  601 	movx	@dptr,a
                            602 ;	genPointerSet
                            603 ;     genFarPointerSet
   0017 90s00r78            604 	mov	dptr,#(_main_mystr3_1_1 + 0x0003)
   001A 74 4C               605 	mov	a,#0x4C
   001C F0                  606 	movx	@dptr,a
                            607 ;	genPointerSet
                            608 ;     genFarPointerSet
   001D 90s00r79            609 	mov	dptr,#(_main_mystr3_1_1 + 0x0004)
   0020 74 4F               610 	mov	a,#0x4F
   0022 F0                  611 	movx	@dptr,a
                            612 ;	genPointerSet
                            613 ;     genFarPointerSet
   0023 90s00r7A            614 	mov	dptr,#(_main_mystr3_1_1 + 0x0005)
   0026 74 20               615 	mov	a,#0x20
   0028 F0                  616 	movx	@dptr,a
                            617 ;	genPointerSet
                            618 ;     genFarPointerSet
   0029 90s00r7B            619 	mov	dptr,#(_main_mystr3_1_1 + 0x0006)
   002C 74 45               620 	mov	a,#0x45
   002E F0                  621 	movx	@dptr,a
                            622 ;	genPointerSet
                            623 ;     genFarPointerSet
   002F 90s00r7C            624 	mov	dptr,#(_main_mystr3_1_1 + 0x0007)
   0032 74 53               625 	mov	a,#0x53
   0034 F0                  626 	movx	@dptr,a
                            627 ;	genPointerSet
                            628 ;     genFarPointerSet
   0035 90s00r7D            629 	mov	dptr,#(_main_mystr3_1_1 + 0x0008)
   0038 74 44               630 	mov	a,#0x44
   003A F0                  631 	movx	@dptr,a
                            632 ;	genPointerSet
                            633 ;     genFarPointerSet
   003B 90s00r7E            634 	mov	dptr,#(_main_mystr3_1_1 + 0x0009)
   003E 74 5F               635 	mov	a,#0x5F
   0040 F0                  636 	movx	@dptr,a
                            637 ;	genPointerSet
                            638 ;     genFarPointerSet
   0041 90s00r7F            639 	mov	dptr,#(_main_mystr3_1_1 + 0x000a)
   0044 74 4C               640 	mov	a,#0x4C
   0046 F0                  641 	movx	@dptr,a
                            642 ;	genPointerSet
                            643 ;     genFarPointerSet
   0047 90s00r80            644 	mov	dptr,#(_main_mystr3_1_1 + 0x000b)
   004A 74 41               645 	mov	a,#0x41
   004C F0                  646 	movx	@dptr,a
                            647 ;	genPointerSet
                            648 ;     genFarPointerSet
   004D 90s00r81            649 	mov	dptr,#(_main_mystr3_1_1 + 0x000c)
   0050 74 42               650 	mov	a,#0x42
   0052 F0                  651 	movx	@dptr,a
                            652 ;	genPointerSet
                            653 ;     genFarPointerSet
   0053 90s00r82            654 	mov	dptr,#(_main_mystr3_1_1 + 0x000d)
   0056 74 34               655 	mov	a,#0x34
   0058 F0                  656 	movx	@dptr,a
                            657 ;	genPointerSet
                            658 ;     genFarPointerSet
   0059 90s00r83            659 	mov	dptr,#(_main_mystr3_1_1 + 0x000e)
   005C 74 20               660 	mov	a,#0x20
   005E F0                  661 	movx	@dptr,a
                            662 ;	genPointerSet
                            663 ;     genFarPointerSet
   005F 90s00r84            664 	mov	dptr,#(_main_mystr3_1_1 + 0x000f)
   0062 74 42               665 	mov	a,#0x42
   0064 F0                  666 	movx	@dptr,a
                            667 ;	genPointerSet
                            668 ;     genFarPointerSet
   0065 90s00r85            669 	mov	dptr,#(_main_mystr3_1_1 + 0x0010)
   0068 74 59               670 	mov	a,#0x59
   006A F0                  671 	movx	@dptr,a
                            672 ;	genPointerSet
                            673 ;     genFarPointerSet
   006B 90s00r86            674 	mov	dptr,#(_main_mystr3_1_1 + 0x0011)
   006E 74 20               675 	mov	a,#0x20
   0070 F0                  676 	movx	@dptr,a
                            677 ;	genPointerSet
                            678 ;     genFarPointerSet
   0071 90s00r87            679 	mov	dptr,#(_main_mystr3_1_1 + 0x0012)
   0074 74 44               680 	mov	a,#0x44
   0076 F0                  681 	movx	@dptr,a
                            682 ;	genPointerSet
                            683 ;     genFarPointerSet
   0077 90s00r88            684 	mov	dptr,#(_main_mystr3_1_1 + 0x0013)
   007A 74 48               685 	mov	a,#0x48
   007C F0                  686 	movx	@dptr,a
                            687 ;	genPointerSet
                            688 ;     genFarPointerSet
   007D 90s00r89            689 	mov	dptr,#(_main_mystr3_1_1 + 0x0014)
   0080 74 41               690 	mov	a,#0x41
   0082 F0                  691 	movx	@dptr,a
                            692 ;	genPointerSet
                            693 ;     genFarPointerSet
   0083 90s00r8A            694 	mov	dptr,#(_main_mystr3_1_1 + 0x0015)
   0086 74 52               695 	mov	a,#0x52
   0088 F0                  696 	movx	@dptr,a
                            697 ;	genPointerSet
                            698 ;     genFarPointerSet
   0089 90s00r8B            699 	mov	dptr,#(_main_mystr3_1_1 + 0x0016)
   008C 74 4D               700 	mov	a,#0x4D
   008E F0                  701 	movx	@dptr,a
                            702 ;	genPointerSet
                            703 ;     genFarPointerSet
   008F 90s00r8C            704 	mov	dptr,#(_main_mystr3_1_1 + 0x0017)
   0092 74 49               705 	mov	a,#0x49
   0094 F0                  706 	movx	@dptr,a
                            707 ;	genPointerSet
                            708 ;     genFarPointerSet
   0095 90s00r8D            709 	mov	dptr,#(_main_mystr3_1_1 + 0x0018)
   0098 74 4B               710 	mov	a,#0x4B
   009A F0                  711 	movx	@dptr,a
                            712 ;	genPointerSet
                            713 ;     genFarPointerSet
   009B 90s00r8E            714 	mov	dptr,#(_main_mystr3_1_1 + 0x0019)
   009E 74 20               715 	mov	a,#0x20
   00A0 F0                  716 	movx	@dptr,a
                            717 ;	genPointerSet
                            718 ;     genFarPointerSet
   00A1 90s00r8F            719 	mov	dptr,#(_main_mystr3_1_1 + 0x001a)
   00A4 74 54               720 	mov	a,#0x54
   00A6 F0                  721 	movx	@dptr,a
                            722 ;	genPointerSet
                            723 ;     genFarPointerSet
   00A7 90s00r90            724 	mov	dptr,#(_main_mystr3_1_1 + 0x001b)
   00AA 74 48               725 	mov	a,#0x48
   00AC F0                  726 	movx	@dptr,a
                            727 ;	genPointerSet
                            728 ;     genFarPointerSet
   00AD 90s00r91            729 	mov	dptr,#(_main_mystr3_1_1 + 0x001c)
   00B0 74 41               730 	mov	a,#0x41
   00B2 F0                  731 	movx	@dptr,a
                            732 ;	genPointerSet
                            733 ;     genFarPointerSet
   00B3 90s00r92            734 	mov	dptr,#(_main_mystr3_1_1 + 0x001d)
   00B6 74 4B               735 	mov	a,#0x4B
   00B8 F0                  736 	movx	@dptr,a
                            737 ;	genPointerSet
                            738 ;     genFarPointerSet
   00B9 90s00r93            739 	mov	dptr,#(_main_mystr3_1_1 + 0x001e)
   00BC 74 4B               740 	mov	a,#0x4B
   00BE F0                  741 	movx	@dptr,a
                            742 ;	genPointerSet
                            743 ;     genFarPointerSet
   00BF 90s00r94            744 	mov	dptr,#(_main_mystr3_1_1 + 0x001f)
   00C2 74 41               745 	mov	a,#0x41
   00C4 F0                  746 	movx	@dptr,a
                            747 ;	genPointerSet
                            748 ;     genFarPointerSet
   00C5 90s00r95            749 	mov	dptr,#(_main_mystr3_1_1 + 0x0020)
   00C8 74 52               750 	mov	a,#0x52
   00CA F0                  751 	movx	@dptr,a
                            752 ;	genPointerSet
                            753 ;     genFarPointerSet
   00CB 90s00r96            754 	mov	dptr,#(_main_mystr3_1_1 + 0x0021)
   00CE 74 20               755 	mov	a,#0x20
   00D0 F0                  756 	movx	@dptr,a
                            757 ;	genPointerSet
                            758 ;     genFarPointerSet
   00D1 90s00r97            759 	mov	dptr,#(_main_mystr3_1_1 + 0x0022)
   00D4 74 52               760 	mov	a,#0x52
   00D6 F0                  761 	movx	@dptr,a
                            762 ;	genPointerSet
                            763 ;     genFarPointerSet
   00D7 90s00r98            764 	mov	dptr,#(_main_mystr3_1_1 + 0x0023)
   00DA 74 45               765 	mov	a,#0x45
   00DC F0                  766 	movx	@dptr,a
                            767 ;	genPointerSet
                            768 ;     genFarPointerSet
   00DD 90s00r99            769 	mov	dptr,#(_main_mystr3_1_1 + 0x0024)
   00E0 74 51               770 	mov	a,#0x51
   00E2 F0                  771 	movx	@dptr,a
                            772 ;	genPointerSet
                            773 ;     genFarPointerSet
   00E3 90s00r9A            774 	mov	dptr,#(_main_mystr3_1_1 + 0x0025)
   00E6 74 55               775 	mov	a,#0x55
   00E8 F0                  776 	movx	@dptr,a
                            777 ;	genPointerSet
                            778 ;     genFarPointerSet
   00E9 90s00r9B            779 	mov	dptr,#(_main_mystr3_1_1 + 0x0026)
   00EC 74 49               780 	mov	a,#0x49
   00EE F0                  781 	movx	@dptr,a
                            782 ;	genPointerSet
                            783 ;     genFarPointerSet
   00EF 90s00r9C            784 	mov	dptr,#(_main_mystr3_1_1 + 0x0027)
   00F2 74 52               785 	mov	a,#0x52
   00F4 F0                  786 	movx	@dptr,a
                            787 ;	genPointerSet
                            788 ;     genFarPointerSet
   00F5 90s00r9D            789 	mov	dptr,#(_main_mystr3_1_1 + 0x0028)
   00F8 74 45               790 	mov	a,#0x45
   00FA F0                  791 	movx	@dptr,a
                            792 ;	genPointerSet
                            793 ;     genFarPointerSet
   00FB 90s00r9E            794 	mov	dptr,#(_main_mystr3_1_1 + 0x0029)
   00FE 74 44               795 	mov	a,#0x44
   0100 F0                  796 	movx	@dptr,a
                            797 ;	genPointerSet
                            798 ;     genFarPointerSet
   0101 90s00r9F            799 	mov	dptr,#(_main_mystr3_1_1 + 0x002a)
   0104 74 20               800 	mov	a,#0x20
   0106 F0                  801 	movx	@dptr,a
                            802 ;	genPointerSet
                            803 ;     genFarPointerSet
   0107 90s00rA0            804 	mov	dptr,#(_main_mystr3_1_1 + 0x002b)
   010A 74 45               805 	mov	a,#0x45
   010C F0                  806 	movx	@dptr,a
                            807 ;	genPointerSet
                            808 ;     genFarPointerSet
   010D 90s00rA1            809 	mov	dptr,#(_main_mystr3_1_1 + 0x002c)
   0110 74 4C               810 	mov	a,#0x4C
   0112 F0                  811 	movx	@dptr,a
                            812 ;	genPointerSet
                            813 ;     genFarPointerSet
   0113 90s00rA2            814 	mov	dptr,#(_main_mystr3_1_1 + 0x002d)
   0116 74 45               815 	mov	a,#0x45
   0118 F0                  816 	movx	@dptr,a
                            817 ;	genPointerSet
                            818 ;     genFarPointerSet
   0119 90s00rA3            819 	mov	dptr,#(_main_mystr3_1_1 + 0x002e)
   011C 74 4D               820 	mov	a,#0x4D
   011E F0                  821 	movx	@dptr,a
                            822 ;	genPointerSet
                            823 ;     genFarPointerSet
   011F 90s00rA4            824 	mov	dptr,#(_main_mystr3_1_1 + 0x002f)
   0122 74 45               825 	mov	a,#0x45
   0124 F0                  826 	movx	@dptr,a
                            827 ;	genPointerSet
                            828 ;     genFarPointerSet
   0125 90s00rA5            829 	mov	dptr,#(_main_mystr3_1_1 + 0x0030)
   0128 74 4E               830 	mov	a,#0x4E
   012A F0                  831 	movx	@dptr,a
                            832 ;	genPointerSet
                            833 ;     genFarPointerSet
   012B 90s00rA6            834 	mov	dptr,#(_main_mystr3_1_1 + 0x0031)
   012E 74 54               835 	mov	a,#0x54
   0130 F0                  836 	movx	@dptr,a
                            837 ;	genPointerSet
                            838 ;     genFarPointerSet
   0131 90s00rA7            839 	mov	dptr,#(_main_mystr3_1_1 + 0x0032)
   0134 74 53               840 	mov	a,#0x53
   0136 F0                  841 	movx	@dptr,a
                            842 ;	genPointerSet
                            843 ;     genFarPointerSet
   0137 90s00rA8            844 	mov	dptr,#(_main_mystr3_1_1 + 0x0033)
   013A 74 20               845 	mov	a,#0x20
   013C F0                  846 	movx	@dptr,a
                            847 ;	genPointerSet
                            848 ;     genFarPointerSet
   013D 90s00rA9            849 	mov	dptr,#(_main_mystr3_1_1 + 0x0034)
   0140 74 49               850 	mov	a,#0x49
   0142 F0                  851 	movx	@dptr,a
                            852 ;	genPointerSet
                            853 ;     genFarPointerSet
   0143 90s00rAA            854 	mov	dptr,#(_main_mystr3_1_1 + 0x0035)
   0146 74 32               855 	mov	a,#0x32
   0148 F0                  856 	movx	@dptr,a
                            857 ;	genPointerSet
                            858 ;     genFarPointerSet
   0149 90s00rAB            859 	mov	dptr,#(_main_mystr3_1_1 + 0x0036)
   014C 74 43               860 	mov	a,#0x43
   014E F0                  861 	movx	@dptr,a
                            862 ;	genPointerSet
                            863 ;     genFarPointerSet
   014F 90s00rAC            864 	mov	dptr,#(_main_mystr3_1_1 + 0x0037)
   0152 74 20               865 	mov	a,#0x20
   0154 F0                  866 	movx	@dptr,a
                            867 ;	genPointerSet
                            868 ;     genFarPointerSet
   0155 90s00rAD            869 	mov	dptr,#(_main_mystr3_1_1 + 0x0038)
   0158 74 41               870 	mov	a,#0x41
   015A F0                  871 	movx	@dptr,a
                            872 ;	genPointerSet
                            873 ;     genFarPointerSet
   015B 90s00rAE            874 	mov	dptr,#(_main_mystr3_1_1 + 0x0039)
   015E 74 4E               875 	mov	a,#0x4E
   0160 F0                  876 	movx	@dptr,a
                            877 ;	genPointerSet
                            878 ;     genFarPointerSet
   0161 90s00rAF            879 	mov	dptr,#(_main_mystr3_1_1 + 0x003a)
   0164 74 44               880 	mov	a,#0x44
   0166 F0                  881 	movx	@dptr,a
                            882 ;	genPointerSet
                            883 ;     genFarPointerSet
   0167 90s00rB0            884 	mov	dptr,#(_main_mystr3_1_1 + 0x003b)
   016A 74 20               885 	mov	a,#0x20
   016C F0                  886 	movx	@dptr,a
                            887 ;	genPointerSet
                            888 ;     genFarPointerSet
   016D 90s00rB1            889 	mov	dptr,#(_main_mystr3_1_1 + 0x003c)
   0170 74 4C               890 	mov	a,#0x4C
   0172 F0                  891 	movx	@dptr,a
                            892 ;	genPointerSet
                            893 ;     genFarPointerSet
   0173 90s00rB2            894 	mov	dptr,#(_main_mystr3_1_1 + 0x003d)
   0176 74 43               895 	mov	a,#0x43
   0178 F0                  896 	movx	@dptr,a
                            897 ;	genPointerSet
                            898 ;     genFarPointerSet
   0179 90s00rB3            899 	mov	dptr,#(_main_mystr3_1_1 + 0x003e)
   017C 74 44               900 	mov	a,#0x44
   017E F0                  901 	movx	@dptr,a
                            902 ;	genPointerSet
                            903 ;     genFarPointerSet
   017F 90s00rB4            904 	mov	dptr,#(_main_mystr3_1_1 + 0x003f)
                            905 ;	Peephole 181	changed mov to clr
                            906 ;	main.c:48: unsigned char x_co=0;
                            907 ;	genAssign
                            908 ;	Peephole 181	changed mov to clr
                            909 ;	Peephole 219.a	removed redundant clear
                            910 ;	main.c:49: unsigned char y_co=0;
                            911 ;	genAssign
                            912 ;	Peephole 181	changed mov to clr
                            913 ;	main.c:50: unsigned char invalid_bit = 0;
                            914 ;	genAssign
                            915 ;	Peephole 181	changed mov to clr
                            916 ;	Peephole 219.a	removed redundant clear
   0182 E4                  917 	clr	a
   0183 F0                  918 	movx	@dptr,a
   0184 90s00rB5            919 	mov	dptr,#_main_x_co_1_1
   0187 F0                  920 	movx	@dptr,a
   0188 90s00rB6            921 	mov	dptr,#_main_y_co_1_1
                            922 ;	Peephole 219.b	removed redundant clear
   018B F0                  923 	movx	@dptr,a
   018C 90s00rB7            924 	mov	dptr,#_main_invalid_bit_1_1
   018F F0                  925 	movx	@dptr,a
                            926 ;	main.c:52: lcd_address = 0x80;
                            927 ;	genAssign
   0190 90s00r04            928 	mov	dptr,#_lcd_address
   0193 74 80               929 	mov	a,#0x80
   0195 F0                  930 	movx	@dptr,a
                            931 ;	main.c:53: IOE_pins.P0_DIR=Input;
                            932 ;	genPointerSet
                            933 ;     genFarPointerSet
   0196 90s00r65            934 	mov	dptr,#_IOE_pins
   0199 74 01               935 	mov	a,#0x01
   019B F0                  936 	movx	@dptr,a
                            937 ;	main.c:54: IOE_pins.P0_STATE=High;
                            938 ;	genPointerSet
                            939 ;     genFarPointerSet
   019C 90s00r6D            940 	mov	dptr,#(_IOE_pins + 0x0008)
   019F 74 01               941 	mov	a,#0x01
   01A1 F0                  942 	movx	@dptr,a
                            943 ;	main.c:55: IOE_pins.P1_DIR=Output;
                            944 ;	genPointerSet
                            945 ;     genFarPointerSet
   01A2 90s00r66            946 	mov	dptr,#(_IOE_pins + 0x0001)
                            947 ;	Peephole 181	changed mov to clr
                            948 ;	main.c:56: IOE_pins.P1_STATE=Low;
                            949 ;	genPointerSet
                            950 ;     genFarPointerSet
                            951 ;	Peephole 181	changed mov to clr
                            952 ;	Peephole 219.a	removed redundant clear
                            953 ;	main.c:57: IOE_pins.P2_DIR=Output;
                            954 ;	genPointerSet
                            955 ;     genFarPointerSet
                            956 ;	Peephole 181	changed mov to clr
                            957 ;	main.c:58: IOE_pins.P2_STATE=Low;
                            958 ;	genPointerSet
                            959 ;     genFarPointerSet
                            960 ;	Peephole 181	changed mov to clr
                            961 ;	Peephole 219.a	removed redundant clear
   01A5 E4                  962 	clr	a
   01A6 F0                  963 	movx	@dptr,a
   01A7 90s00r6E            964 	mov	dptr,#(_IOE_pins + 0x0009)
   01AA F0                  965 	movx	@dptr,a
   01AB 90s00r67            966 	mov	dptr,#(_IOE_pins + 0x0002)
                            967 ;	Peephole 219.b	removed redundant clear
   01AE F0                  968 	movx	@dptr,a
   01AF 90s00r6F            969 	mov	dptr,#(_IOE_pins + 0x000a)
   01B2 F0                  970 	movx	@dptr,a
                            971 ;	main.c:59: IOE_pins.P3_DIR=Output;
                            972 ;	genPointerSet
                            973 ;     genFarPointerSet
   01B3 90s00r68            974 	mov	dptr,#(_IOE_pins + 0x0003)
                            975 ;	Peephole 181	changed mov to clr
                            976 ;	main.c:60: IOE_pins.P3_STATE=Low;
                            977 ;	genPointerSet
                            978 ;     genFarPointerSet
                            979 ;	Peephole 181	changed mov to clr
                            980 ;	Peephole 219.a	removed redundant clear
                            981 ;	main.c:61: IOE_pins.P4_DIR=Output;
                            982 ;	genPointerSet
                            983 ;     genFarPointerSet
                            984 ;	Peephole 181	changed mov to clr
                            985 ;	main.c:62: IOE_pins.P4_STATE=Low;
                            986 ;	genPointerSet
                            987 ;     genFarPointerSet
                            988 ;	Peephole 181	changed mov to clr
                            989 ;	Peephole 219.a	removed redundant clear
   01B6 E4                  990 	clr	a
   01B7 F0                  991 	movx	@dptr,a
   01B8 90s00r70            992 	mov	dptr,#(_IOE_pins + 0x000b)
   01BB F0                  993 	movx	@dptr,a
   01BC 90s00r69            994 	mov	dptr,#(_IOE_pins + 0x0004)
                            995 ;	Peephole 219.b	removed redundant clear
   01BF F0                  996 	movx	@dptr,a
   01C0 90s00r71            997 	mov	dptr,#(_IOE_pins + 0x000c)
   01C3 F0                  998 	movx	@dptr,a
                            999 ;	main.c:63: IOE_pins.P5_DIR=Output;
                           1000 ;	genPointerSet
                           1001 ;     genFarPointerSet
   01C4 90s00r6A           1002 	mov	dptr,#(_IOE_pins + 0x0005)
                           1003 ;	Peephole 181	changed mov to clr
                           1004 ;	main.c:64: IOE_pins.P5_STATE=Low;
                           1005 ;	genPointerSet
                           1006 ;     genFarPointerSet
                           1007 ;	Peephole 181	changed mov to clr
                           1008 ;	Peephole 219.a	removed redundant clear
                           1009 ;	main.c:65: IOE_pins.P6_DIR=Output;
                           1010 ;	genPointerSet
                           1011 ;     genFarPointerSet
                           1012 ;	Peephole 181	changed mov to clr
                           1013 ;	main.c:66: IOE_pins.P6_STATE=Low;
                           1014 ;	genPointerSet
                           1015 ;     genFarPointerSet
                           1016 ;	Peephole 181	changed mov to clr
                           1017 ;	Peephole 219.a	removed redundant clear
   01C7 E4                 1018 	clr	a
   01C8 F0                 1019 	movx	@dptr,a
   01C9 90s00r72           1020 	mov	dptr,#(_IOE_pins + 0x000d)
   01CC F0                 1021 	movx	@dptr,a
   01CD 90s00r6B           1022 	mov	dptr,#(_IOE_pins + 0x0006)
                           1023 ;	Peephole 219.b	removed redundant clear
   01D0 F0                 1024 	movx	@dptr,a
   01D1 90s00r73           1025 	mov	dptr,#(_IOE_pins + 0x000e)
   01D4 F0                 1026 	movx	@dptr,a
                           1027 ;	main.c:67: IOE_pins.P7_DIR=Output;
                           1028 ;	genPointerSet
                           1029 ;     genFarPointerSet
   01D5 90s00r6C           1030 	mov	dptr,#(_IOE_pins + 0x0007)
                           1031 ;	Peephole 181	changed mov to clr
                           1032 ;	main.c:68: IOE_pins.P7_STATE=Low;
                           1033 ;	genPointerSet
                           1034 ;     genFarPointerSet
                           1035 ;	Peephole 181	changed mov to clr
                           1036 ;	Peephole 219.a	removed redundant clear
                           1037 ;	main.c:69: count_value = 0;
                           1038 ;	genAssign
                           1039 ;	Peephole 181	changed mov to clr
   01D8 E4                 1040 	clr	a
   01D9 F0                 1041 	movx	@dptr,a
   01DA 90s00r74           1042 	mov	dptr,#(_IOE_pins + 0x000f)
   01DD F0                 1043 	movx	@dptr,a
   01DE 90s00r00           1044 	mov	dptr,#_count_value
                           1045 ;	Peephole 219.b	removed redundant clear
   01E1 F0                 1046 	movx	@dptr,a
                           1047 ;	main.c:72: TMOD |= 0x20;    //Timer 1 in mode 2
                           1048 ;	genOr
   01E2 43 89 20           1049 	orl	_TMOD,#0x20
                           1050 ;	main.c:73: TH1 = -3;       //Baud rate = 9600
                           1051 ;	genAssign
   01E5 75 8D FD           1052 	mov	_TH1,#0xFD
                           1053 ;	main.c:74: SCON = 0x50;
                           1054 ;	genAssign
   01E8 75 98 50           1055 	mov	_SCON,#0x50
                           1056 ;	main.c:75: TI=1;
                           1057 ;	genAssign
   01EB D2 99              1058 	setb	_TI
                           1059 ;	main.c:76: TR1 = 1;
                           1060 ;	genAssign
   01ED D2 8E              1061 	setb	_TR1
                           1062 ;	main.c:77: printf_tiny("\n\rStart\n\r");
                           1063 ;	genIpush
   01EF 74r00              1064 	mov	a,#__str_1
   01F1 C0 E0              1065 	push	acc
   01F3 74s00              1066 	mov	a,#(__str_1 >> 8)
   01F5 C0 E0              1067 	push	acc
                           1068 ;	genCall
   01F7 12s00r00           1069 	lcall	_printf_tiny
   01FA 15 81              1070 	dec	sp
   01FC 15 81              1071 	dec	sp
                           1072 ;	main.c:78: lcdinit();
                           1073 ;	genCall
   01FE 12s00r00           1074 	lcall	_lcdinit
                           1075 ;	main.c:79: lcdgotoxy(0, 0);
                           1076 ;	genAssign
   0201 90s00r00           1077 	mov	dptr,#_lcdgotoxy_PARM_2
                           1078 ;	Peephole 181	changed mov to clr
   0204 E4                 1079 	clr	a
   0205 F0                 1080 	movx	@dptr,a
                           1081 ;	genCall
   0206 75 82 00           1082 	mov	dpl,#0x00
   0209 12s00r00           1083 	lcall	_lcdgotoxy
                           1084 ;	main.c:80: print_flag = 0x01;
                           1085 ;	genAssign
   020C 90s00r64           1086 	mov	dptr,#_print_flag
   020F 74 01              1087 	mov	a,#0x01
   0211 F0                 1088 	movx	@dptr,a
                           1089 ;	main.c:96: timer0_init();
                           1090 ;	genCall
   0212 12s00r00           1091 	lcall	_timer0_init
                           1092 ;	main.c:98: I2C_init();
                           1093 ;	genCall
   0215 12s00r00           1094 	lcall	_I2C_init
                           1095 ;	main.c:99: if(TIMER_CLOCK){
                           1096 ;	genAssign
   0218 90s00r03           1097 	mov	dptr,#_TIMER_CLOCK
   021B E0                 1098 	movx	a,@dptr
                           1099 ;	genIfx
   021C FA                 1100 	mov	r2,a
                           1101 ;	Peephole 105	removed redundant mov
                           1102 ;	genIfxJump
                           1103 ;	Peephole 108.c	removed ljmp by inverse jump logic
   021D 60 0B              1104 	jz	00102$
                           1105 ;	Peephole 300	removed redundant label 00212$
                           1106 ;	main.c:100: end_address = 0xD8;
                           1107 ;	genAssign
   021F 90s00r01           1108 	mov	dptr,#_end_address
   0222 74 D8              1109 	mov	a,#0xD8
   0224 F0                 1110 	movx	@dptr,a
   0225 E4                 1111 	clr	a
   0226 A3                 1112 	inc	dptr
   0227 F0                 1113 	movx	@dptr,a
                           1114 ;	Peephole 112.b	changed ljmp to sjmp
   0228 80 09              1115 	sjmp	00103$
   022A                    1116 00102$:
                           1117 ;	main.c:103: end_address = 0xDF;
                           1118 ;	genAssign
   022A 90s00r01           1119 	mov	dptr,#_end_address
   022D 74 DF              1120 	mov	a,#0xDF
   022F F0                 1121 	movx	@dptr,a
   0230 E4                 1122 	clr	a
   0231 A3                 1123 	inc	dptr
   0232 F0                 1124 	movx	@dptr,a
   0233                    1125 00103$:
                           1126 ;	main.c:105: IOE_pin_set(0,1);
                           1127 ;	genAssign
   0233 90s00r00           1128 	mov	dptr,#_IOE_pin_set_PARM_2
   0236 74 01              1129 	mov	a,#0x01
   0238 F0                 1130 	movx	@dptr,a
                           1131 ;	genCall
   0239 75 82 00           1132 	mov	dpl,#0x00
   023C 12s00r00           1133 	lcall	_IOE_pin_set
                           1134 ;	main.c:106: while(1){
   023F                    1135 00180$:
                           1136 ;	main.c:107: print_menu();
                           1137 ;	genCall
   023F 12s00r00           1138 	lcall	_print_menu
                           1139 ;	main.c:108: temp = rx_data_char();
                           1140 ;	genCall
   0242 12s00r00           1141 	lcall	_rx_data_char
   0245 AA 82              1142 	mov	r2,dpl
                           1143 ;	main.c:109: switch(temp){
                           1144 ;	genAssign
   0247 8A 03              1145 	mov	ar3,r2
                           1146 ;	genCmpLt
                           1147 ;	genCmp
   0249 BB 30 00           1148 	cjne	r3,#0x30,00213$
   024C                    1149 00213$:
                           1150 ;	genIfxJump
   024C 50 03              1151 	jnc	00214$
   024E 02s05rD8           1152 	ljmp	00177$
   0251                    1153 00214$:
                           1154 ;	genCmpGt
                           1155 ;	genCmp
                           1156 ;	genIfxJump
                           1157 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0251 EB                 1158 	mov	a,r3
   0252 24 A8              1159 	add	a,#0xff - 0x57
   0254 50 03              1160 	jnc	00215$
   0256 02s05rD8           1161 	ljmp	00177$
   0259                    1162 00215$:
                           1163 ;	genMinus
   0259 EA                 1164 	mov	a,r2
   025A 24 D0              1165 	add	a,#0xd0
                           1166 ;	genJumpTab
   025C FA                 1167 	mov	r2,a
                           1168 ;	Peephole 105	removed redundant mov
   025D 24 09              1169 	add	a,#(00216$-3-.)
   025F 83                 1170 	movc	a,@a+pc
   0260 C0 E0              1171 	push	acc
   0262 EA                 1172 	mov	a,r2
   0263 24 2B              1173 	add	a,#(00217$-3-.)
   0265 83                 1174 	movc	a,@a+pc
   0266 C0 E0              1175 	push	acc
   0268 22                 1176 	ret
   0269                    1177 00216$:
   0269rB9                 1178 	.db	00104$
   026ArBF                 1179 	.db	00105$
   026BrC5                 1180 	.db	00106$
   026CrCB                 1181 	.db	00107$
   026DrD1                 1182 	.db	00108$
   026ErD7                 1183 	.db	00109$
   026FrDD                 1184 	.db	00110$
   0270rE3                 1185 	.db	00111$
   0271r0C                 1186 	.db	00114$
   0272rA1                 1187 	.db	00151$
   0273rD8                 1188 	.db	00177$
   0274rD8                 1189 	.db	00177$
   0275rD8                 1190 	.db	00177$
   0276rD8                 1191 	.db	00177$
   0277rD8                 1192 	.db	00177$
   0278rD8                 1193 	.db	00177$
   0279rD8                 1194 	.db	00177$
   027ArD8                 1195 	.db	00177$
   027BrD8                 1196 	.db	00177$
   027Cr91                 1197 	.db	00170$
   027DrC6                 1198 	.db	00174$
   027ErD8                 1199 	.db	00177$
   027FrD8                 1200 	.db	00177$
   0280rD8                 1201 	.db	00177$
   0281rD8                 1202 	.db	00177$
   0282rD8                 1203 	.db	00177$
   0283rD8                 1204 	.db	00177$
   0284rD8                 1205 	.db	00177$
   0285rD8                 1206 	.db	00177$
   0286r97                 1207 	.db	00171$
   0287rD8                 1208 	.db	00177$
   0288rD8                 1209 	.db	00177$
   0289r7F                 1210 	.db	00167$
   028ArCC                 1211 	.db	00175$
   028Br85                 1212 	.db	00168$
   028Cr8B                 1213 	.db	00169$
   028DrD8                 1214 	.db	00177$
   028ErD8                 1215 	.db	00177$
   028FrD8                 1216 	.db	00177$
   0290rD2                 1217 	.db	00176$
   0291                    1218 00217$:
   0291s02                 1219 	.db	00104$>>8
   0292s02                 1220 	.db	00105$>>8
   0293s02                 1221 	.db	00106$>>8
   0294s02                 1222 	.db	00107$>>8
   0295s02                 1223 	.db	00108$>>8
   0296s02                 1224 	.db	00109$>>8
   0297s02                 1225 	.db	00110$>>8
   0298s02                 1226 	.db	00111$>>8
   0299s03                 1227 	.db	00114$>>8
   029As04                 1228 	.db	00151$>>8
   029Bs05                 1229 	.db	00177$>>8
   029Cs05                 1230 	.db	00177$>>8
   029Ds05                 1231 	.db	00177$>>8
   029Es05                 1232 	.db	00177$>>8
   029Fs05                 1233 	.db	00177$>>8
   02A0s05                 1234 	.db	00177$>>8
   02A1s05                 1235 	.db	00177$>>8
   02A2s05                 1236 	.db	00177$>>8
   02A3s05                 1237 	.db	00177$>>8
   02A4s05                 1238 	.db	00170$>>8
   02A5s05                 1239 	.db	00174$>>8
   02A6s05                 1240 	.db	00177$>>8
   02A7s05                 1241 	.db	00177$>>8
   02A8s05                 1242 	.db	00177$>>8
   02A9s05                 1243 	.db	00177$>>8
   02AAs05                 1244 	.db	00177$>>8
   02ABs05                 1245 	.db	00177$>>8
   02ACs05                 1246 	.db	00177$>>8
   02ADs05                 1247 	.db	00177$>>8
   02AEs05                 1248 	.db	00171$>>8
   02AFs05                 1249 	.db	00177$>>8
   02B0s05                 1250 	.db	00177$>>8
   02B1s05                 1251 	.db	00167$>>8
   02B2s05                 1252 	.db	00175$>>8
   02B3s05                 1253 	.db	00168$>>8
   02B4s05                 1254 	.db	00169$>>8
   02B5s05                 1255 	.db	00177$>>8
   02B6s05                 1256 	.db	00177$>>8
   02B7s05                 1257 	.db	00177$>>8
   02B8s05                 1258 	.db	00176$>>8
                           1259 ;	main.c:110: case '0':
   02B9                    1260 00104$:
                           1261 ;	main.c:111: eereset();
                           1262 ;	genCall
   02B9 12s00r00           1263 	lcall	_eereset
                           1264 ;	main.c:112: break;
   02BC 02s02r3F           1265 	ljmp	00180$
                           1266 ;	main.c:113: case '1':
   02BF                    1267 00105$:
                           1268 ;	main.c:114: write_menu();
                           1269 ;	genCall
   02BF 12s00r00           1270 	lcall	_write_menu
                           1271 ;	main.c:115: break;
   02C2 02s02r3F           1272 	ljmp	00180$
                           1273 ;	main.c:116: case '2':
   02C5                    1274 00106$:
                           1275 ;	main.c:117: read_menu();
                           1276 ;	genCall
   02C5 12s00r00           1277 	lcall	_read_menu
                           1278 ;	main.c:118: break;
   02C8 02s02r3F           1279 	ljmp	00180$
                           1280 ;	main.c:119: case '3':
   02CB                    1281 00107$:
                           1282 ;	main.c:120: hex_dump();
                           1283 ;	genCall
   02CB 12s00r00           1284 	lcall	_hex_dump
                           1285 ;	main.c:121: break;
   02CE 02s02r3F           1286 	ljmp	00180$
                           1287 ;	main.c:122: case '4':
   02D1                    1288 00108$:
                           1289 ;	main.c:123: lcdclear();
                           1290 ;	genCall
   02D1 12s00r00           1291 	lcall	_lcdclear
                           1292 ;	main.c:124: break;
   02D4 02s02r3F           1293 	ljmp	00180$
                           1294 ;	main.c:125: case '5':
   02D7                    1295 00109$:
                           1296 ;	main.c:126: lcd_ddram_hexdump();
                           1297 ;	genCall
   02D7 12s00r00           1298 	lcall	_lcd_ddram_hexdump
                           1299 ;	main.c:127: break;
   02DA 02s02r3F           1300 	ljmp	00180$
                           1301 ;	main.c:128: case '6':
   02DD                    1302 00110$:
                           1303 ;	main.c:129: lcd_cgram_hexdump();
                           1304 ;	genCall
   02DD 12s00r00           1305 	lcall	_lcd_cgram_hexdump
                           1306 ;	main.c:130: break;
   02E0 02s02r3F           1307 	ljmp	00180$
                           1308 ;	main.c:131: case '7':
   02E3                    1309 00111$:
                           1310 ;	main.c:132: printf_tiny("\rEnter the string. Press backspace (followed by enter) to exit to main menu\n");
                           1311 ;	genIpush
   02E3 74r0A              1312 	mov	a,#__str_2
   02E5 C0 E0              1313 	push	acc
   02E7 74s00              1314 	mov	a,#(__str_2 >> 8)
   02E9 C0 E0              1315 	push	acc
                           1316 ;	genCall
   02EB 12s00r00           1317 	lcall	_printf_tiny
   02EE 15 81              1318 	dec	sp
   02F0 15 81              1319 	dec	sp
                           1320 ;	main.c:133: mystring = rx_get_string();
                           1321 ;	genCall
   02F2 12s00r00           1322 	lcall	_rx_get_string
                           1323 ;	main.c:134: if(rx_array[0] == 0x08){
                           1324 ;	genPointerGet
                           1325 ;	genFarPointerGet
   02F5 90s00r00           1326 	mov	dptr,#_rx_array
   02F8 E0                 1327 	movx	a,@dptr
   02F9 FA                 1328 	mov	r2,a
                           1329 ;	genCmpEq
                           1330 ;	gencjneshort
   02FA BA 08 03           1331 	cjne	r2,#0x08,00218$
   02FD 02s02r3F           1332 	ljmp	00180$
   0300                    1333 00218$:
                           1334 ;	main.c:137: lcdputstr(rx_array);
                           1335 ;	genCall
                           1336 ;	Peephole 182.a	used 16 bit load of DPTR
   0300 90s00r00           1337 	mov	dptr,#_rx_array
   0303 75 F0 00           1338 	mov	b,#0x00
   0306 12s00r00           1339 	lcall	_lcdputstr
                           1340 ;	main.c:138: break;
   0309 02s02r3F           1341 	ljmp	00180$
                           1342 ;	main.c:139: case '8':
   030C                    1343 00114$:
                           1344 ;	main.c:141: do{
   030C                    1345 00124$:
                           1346 ;	main.c:142: if(invalid_bit == 2){
                           1347 ;	genAssign
   030C 90s00rB7           1348 	mov	dptr,#_main_invalid_bit_1_1
   030F E0                 1349 	movx	a,@dptr
   0310 FA                 1350 	mov	r2,a
                           1351 ;	genCmpEq
                           1352 ;	gencjneshort
   0311 BA 02 02           1353 	cjne	r2,#0x02,00219$
                           1354 ;	Peephole 112.b	changed ljmp to sjmp
   0314 80 5A              1355 	sjmp	00201$
   0316                    1356 00219$:
                           1357 ;	main.c:145: invalid_bit = 0;
                           1358 ;	genAssign
   0316 90s00rB7           1359 	mov	dptr,#_main_invalid_bit_1_1
                           1360 ;	Peephole 181	changed mov to clr
   0319 E4                 1361 	clr	a
   031A F0                 1362 	movx	@dptr,a
                           1363 ;	main.c:146: printf_tiny("\rEnter the X-coordinate (between 0 and 3)\n\rPress backspace to exit to main menu\n\r");
                           1364 ;	genIpush
   031B 74r57              1365 	mov	a,#__str_3
   031D C0 E0              1366 	push	acc
   031F 74s00              1367 	mov	a,#(__str_3 >> 8)
   0321 C0 E0              1368 	push	acc
                           1369 ;	genCall
   0323 12s00r00           1370 	lcall	_printf_tiny
   0326 15 81              1371 	dec	sp
   0328 15 81              1372 	dec	sp
                           1373 ;	main.c:147: x_co = rx_data_char();
                           1374 ;	genCall
   032A 12s00r00           1375 	lcall	_rx_data_char
   032D AA 82              1376 	mov	r2,dpl
                           1377 ;	genAssign
   032F 90s00rB5           1378 	mov	dptr,#_main_x_co_1_1
   0332 EA                 1379 	mov	a,r2
   0333 F0                 1380 	movx	@dptr,a
                           1381 ;	main.c:148: if(x_co == 0x08){
                           1382 ;	genCmpEq
                           1383 ;	gencjneshort
                           1384 ;	Peephole 112.b	changed ljmp to sjmp
                           1385 ;	Peephole 198.b	optimized misc jump sequence
   0334 BA 08 08           1386 	cjne	r2,#0x08,00121$
                           1387 ;	Peephole 200.b	removed redundant sjmp
                           1388 ;	Peephole 300	removed redundant label 00220$
                           1389 ;	Peephole 300	removed redundant label 00221$
                           1390 ;	main.c:149: invalid_bit = 0x08;
                           1391 ;	genAssign
   0337 90s00rB7           1392 	mov	dptr,#_main_invalid_bit_1_1
   033A 74 08              1393 	mov	a,#0x08
   033C F0                 1394 	movx	@dptr,a
                           1395 ;	main.c:150: break;
                           1396 ;	Peephole 112.b	changed ljmp to sjmp
   033D 80 31              1397 	sjmp	00201$
   033F                    1398 00121$:
                           1399 ;	main.c:152: else if(x_co < 0x30 || x_co > 0x33){
                           1400 ;	genAssign
   033F 8A 03              1401 	mov	ar3,r2
                           1402 ;	genCmpLt
                           1403 ;	genCmp
   0341 BB 30 00           1404 	cjne	r3,#0x30,00222$
   0344                    1405 00222$:
                           1406 ;	genIfxJump
                           1407 ;	Peephole 112.b	changed ljmp to sjmp
                           1408 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0344 40 07              1409 	jc	00117$
                           1410 ;	Peephole 300	removed redundant label 00223$
                           1411 ;	genAssign
   0346 8A 03              1412 	mov	ar3,r2
                           1413 ;	genCmpGt
                           1414 ;	genCmp
                           1415 ;	genIfxJump
                           1416 ;	Peephole 108.a	removed ljmp by inverse jump logic
                           1417 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0348 EB                 1418 	mov	a,r3
   0349 24 CC              1419 	add	a,#0xff - 0x33
   034B 50 17              1420 	jnc	00125$
                           1421 ;	Peephole 300	removed redundant label 00224$
   034D                    1422 00117$:
                           1423 ;	main.c:153: printf_tiny("\rInvalid data\n");
                           1424 ;	genIpush
   034D 74rA9              1425 	mov	a,#__str_4
   034F C0 E0              1426 	push	acc
   0351 74s00              1427 	mov	a,#(__str_4 >> 8)
   0353 C0 E0              1428 	push	acc
                           1429 ;	genCall
   0355 12s00r00           1430 	lcall	_printf_tiny
   0358 15 81              1431 	dec	sp
   035A 15 81              1432 	dec	sp
                           1433 ;	main.c:154: invalid_bit =1;
                           1434 ;	genAssign
   035C 90s00rB7           1435 	mov	dptr,#_main_invalid_bit_1_1
   035F 74 01              1436 	mov	a,#0x01
   0361 F0                 1437 	movx	@dptr,a
                           1438 ;	main.c:155: break;
                           1439 ;	Peephole 112.b	changed ljmp to sjmp
   0362 80 0C              1440 	sjmp	00201$
   0364                    1441 00125$:
                           1442 ;	main.c:157: }while(x_co < 0x30 || x_co > 0x33);
                           1443 ;	genAssign
   0364 8A 03              1444 	mov	ar3,r2
                           1445 ;	genCmpLt
                           1446 ;	genCmp
   0366 BB 30 00           1447 	cjne	r3,#0x30,00225$
   0369                    1448 00225$:
                           1449 ;	genIfxJump
                           1450 ;	Peephole 112.b	changed ljmp to sjmp
                           1451 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0369 40 A1              1452 	jc	00124$
                           1453 ;	Peephole 300	removed redundant label 00226$
                           1454 ;	genAssign
                           1455 ;	genCmpGt
                           1456 ;	genCmp
                           1457 ;	genIfxJump
                           1458 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   036B EA                 1459 	mov	a,r2
   036C 24 CC              1460 	add	a,#0xff - 0x33
                           1461 ;	Peephole 112.b	changed ljmp to sjmp
                           1462 ;	Peephole 160.a	removed sjmp by inverse jump logic
   036E 40 9C              1463 	jc	00124$
                           1464 ;	Peephole 300	removed redundant label 00227$
                           1465 ;	main.c:158: do{
   0370                    1466 00201$:
                           1467 ;	genAssign
   0370 90s00rB5           1468 	mov	dptr,#_main_x_co_1_1
   0373 E0                 1469 	movx	a,@dptr
   0374 FA                 1470 	mov	r2,a
   0375                    1471 00143$:
                           1472 ;	main.c:159: if(invalid_bit == 1 || invalid_bit == 0x08){
                           1473 ;	genAssign
   0375 90s00rB7           1474 	mov	dptr,#_main_invalid_bit_1_1
   0378 E0                 1475 	movx	a,@dptr
   0379 FB                 1476 	mov	r3,a
                           1477 ;	genCmpEq
                           1478 ;	gencjneshort
   037A BB 01 03           1479 	cjne	r3,#0x01,00228$
   037D 02s04r79           1480 	ljmp	00145$
   0380                    1481 00228$:
                           1482 ;	genCmpEq
                           1483 ;	gencjneshort
   0380 BB 08 03           1484 	cjne	r3,#0x08,00229$
   0383 02s04r79           1485 	ljmp	00145$
   0386                    1486 00229$:
                           1487 ;	main.c:163: x_co = x_co - 0x30;
                           1488 ;	genMinus
   0386 EA                 1489 	mov	a,r2
   0387 24 D0              1490 	add	a,#0xd0
                           1491 ;	genAssign
   0389 FA                 1492 	mov	r2,a
   038A 90s00rB5           1493 	mov	dptr,#_main_x_co_1_1
                           1494 ;	Peephole 100	removed redundant mov
   038D F0                 1495 	movx	@dptr,a
                           1496 ;	main.c:164: printf_tiny("\rEnter the Y-coordinate (between 00 and 15 ( enter in 2 digits))\n\rPress backspace to exit to main menu\n\r");
                           1497 ;	genIpush
   038E C0 02              1498 	push	ar2
   0390 74rB8              1499 	mov	a,#__str_5
   0392 C0 E0              1500 	push	acc
   0394 74s00              1501 	mov	a,#(__str_5 >> 8)
   0396 C0 E0              1502 	push	acc
                           1503 ;	genCall
   0398 12s00r00           1504 	lcall	_printf_tiny
   039B 15 81              1505 	dec	sp
   039D 15 81              1506 	dec	sp
   039F D0 02              1507 	pop	ar2
                           1508 ;	main.c:165: y_co = rx_data_char();
                           1509 ;	genCall
   03A1 C0 02              1510 	push	ar2
   03A3 12s00r00           1511 	lcall	_rx_data_char
   03A6 AB 82              1512 	mov	r3,dpl
   03A8 D0 02              1513 	pop	ar2
                           1514 ;	genAssign
   03AA 90s00rB6           1515 	mov	dptr,#_main_y_co_1_1
   03AD EB                 1516 	mov	a,r3
   03AE F0                 1517 	movx	@dptr,a
                           1518 ;	main.c:166: if(y_co == 0x08){
                           1519 ;	genCmpEq
                           1520 ;	gencjneshort
                           1521 ;	Peephole 112.b	changed ljmp to sjmp
                           1522 ;	Peephole 198.b	optimized misc jump sequence
   03AF BB 08 09           1523 	cjne	r3,#0x08,00134$
                           1524 ;	Peephole 200.b	removed redundant sjmp
                           1525 ;	Peephole 300	removed redundant label 00230$
                           1526 ;	Peephole 300	removed redundant label 00231$
                           1527 ;	main.c:167: invalid_bit = 0x08;
                           1528 ;	genAssign
   03B2 90s00rB7           1529 	mov	dptr,#_main_invalid_bit_1_1
   03B5 74 08              1530 	mov	a,#0x08
   03B7 F0                 1531 	movx	@dptr,a
                           1532 ;	main.c:168: break;
   03B8 02s04r79           1533 	ljmp	00145$
   03BB                    1534 00134$:
                           1535 ;	main.c:170: else if(y_co < 0x30 || y_co > 0x31){
                           1536 ;	genAssign
   03BB 8B 04              1537 	mov	ar4,r3
                           1538 ;	genCmpLt
                           1539 ;	genCmp
   03BD BC 30 00           1540 	cjne	r4,#0x30,00232$
   03C0                    1541 00232$:
                           1542 ;	genIfxJump
                           1543 ;	Peephole 112.b	changed ljmp to sjmp
                           1544 ;	Peephole 160.a	removed sjmp by inverse jump logic
   03C0 40 07              1545 	jc	00130$
                           1546 ;	Peephole 300	removed redundant label 00233$
                           1547 ;	genAssign
   03C2 8B 04              1548 	mov	ar4,r3
                           1549 ;	genCmpGt
                           1550 ;	genCmp
                           1551 ;	genIfxJump
                           1552 ;	Peephole 108.a	removed ljmp by inverse jump logic
                           1553 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   03C4 EC                 1554 	mov	a,r4
   03C5 24 CE              1555 	add	a,#0xff - 0x31
   03C7 50 18              1556 	jnc	00135$
                           1557 ;	Peephole 300	removed redundant label 00234$
   03C9                    1558 00130$:
                           1559 ;	main.c:171: printf_tiny("\rInvalid data\n");
                           1560 ;	genIpush
   03C9 74rA9              1561 	mov	a,#__str_4
   03CB C0 E0              1562 	push	acc
   03CD 74s00              1563 	mov	a,#(__str_4 >> 8)
   03CF C0 E0              1564 	push	acc
                           1565 ;	genCall
   03D1 12s00r00           1566 	lcall	_printf_tiny
   03D4 15 81              1567 	dec	sp
   03D6 15 81              1568 	dec	sp
                           1569 ;	main.c:172: invalid_bit = 2;
                           1570 ;	genAssign
   03D8 90s00rB7           1571 	mov	dptr,#_main_invalid_bit_1_1
   03DB 74 02              1572 	mov	a,#0x02
   03DD F0                 1573 	movx	@dptr,a
                           1574 ;	main.c:173: break;
   03DE 02s04r79           1575 	ljmp	00145$
   03E1                    1576 00135$:
                           1577 ;	main.c:175: y_co = y_co - 0x30;
                           1578 ;	genMinus
   03E1 EB                 1579 	mov	a,r3
   03E2 24 D0              1580 	add	a,#0xd0
                           1581 ;	genAssign
   03E4 FB                 1582 	mov	r3,a
   03E5 90s00rB6           1583 	mov	dptr,#_main_y_co_1_1
                           1584 ;	Peephole 100	removed redundant mov
   03E8 F0                 1585 	movx	@dptr,a
                           1586 ;	main.c:176: temp = rx_data_char();
                           1587 ;	genCall
   03E9 C0 02              1588 	push	ar2
   03EB C0 03              1589 	push	ar3
   03ED 12s00r00           1590 	lcall	_rx_data_char
   03F0 AC 82              1591 	mov	r4,dpl
   03F2 D0 03              1592 	pop	ar3
   03F4 D0 02              1593 	pop	ar2
                           1594 ;	main.c:177: if(temp == 0x08){
                           1595 ;	genCmpEq
                           1596 ;	gencjneshort
                           1597 ;	Peephole 112.b	changed ljmp to sjmp
                           1598 ;	Peephole 198.b	optimized misc jump sequence
   03F6 BC 08 09           1599 	cjne	r4,#0x08,00137$
                           1600 ;	Peephole 200.b	removed redundant sjmp
                           1601 ;	Peephole 300	removed redundant label 00235$
                           1602 ;	Peephole 300	removed redundant label 00236$
                           1603 ;	main.c:178: invalid_bit = 0x08;
                           1604 ;	genAssign
   03F9 90s00rB7           1605 	mov	dptr,#_main_invalid_bit_1_1
   03FC 74 08              1606 	mov	a,#0x08
   03FE F0                 1607 	movx	@dptr,a
                           1608 ;	main.c:179: break;
   03FF 02s04r79           1609 	ljmp	00145$
   0402                    1610 00137$:
                           1611 ;	main.c:181: temp = temp - 0x30;
                           1612 ;	genMinus
   0402 EC                 1613 	mov	a,r4
   0403 24 D0              1614 	add	a,#0xd0
   0405 FC                 1615 	mov	r4,a
                           1616 ;	main.c:182: if(y_co == 0 && temp > 9 || y_co == 1 && temp > 5){
                           1617 ;	genIfx
   0406 EB                 1618 	mov	a,r3
                           1619 ;	genIfxJump
                           1620 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0407 70 05              1621 	jnz	00142$
                           1622 ;	Peephole 300	removed redundant label 00237$
                           1623 ;	genCmpGt
                           1624 ;	genCmp
                           1625 ;	genIfxJump
                           1626 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0409 EC                 1627 	mov	a,r4
   040A 24 F6              1628 	add	a,#0xff - 0x09
                           1629 ;	Peephole 112.b	changed ljmp to sjmp
                           1630 ;	Peephole 160.a	removed sjmp by inverse jump logic
   040C 40 0D              1631 	jc	00138$
                           1632 ;	Peephole 300	removed redundant label 00238$
   040E                    1633 00142$:
                           1634 ;	genAssign
   040E 90s00rB6           1635 	mov	dptr,#_main_y_co_1_1
   0411 E0                 1636 	movx	a,@dptr
   0412 FB                 1637 	mov	r3,a
                           1638 ;	genCmpEq
                           1639 ;	gencjneshort
                           1640 ;	Peephole 112.b	changed ljmp to sjmp
                           1641 ;	Peephole 198.b	optimized misc jump sequence
   0413 BB 01 1C           1642 	cjne	r3,#0x01,00139$
                           1643 ;	Peephole 200.b	removed redundant sjmp
                           1644 ;	Peephole 300	removed redundant label 00239$
                           1645 ;	Peephole 300	removed redundant label 00240$
                           1646 ;	genCmpGt
                           1647 ;	genCmp
                           1648 ;	genIfxJump
                           1649 ;	Peephole 108.a	removed ljmp by inverse jump logic
                           1650 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0416 EC                 1651 	mov	a,r4
   0417 24 FA              1652 	add	a,#0xff - 0x05
   0419 50 17              1653 	jnc	00139$
                           1654 ;	Peephole 300	removed redundant label 00241$
   041B                    1655 00138$:
                           1656 ;	main.c:183: printf_tiny("\rInvalid data\n");
                           1657 ;	genIpush
   041B 74rA9              1658 	mov	a,#__str_4
   041D C0 E0              1659 	push	acc
   041F 74s00              1660 	mov	a,#(__str_4 >> 8)
   0421 C0 E0              1661 	push	acc
                           1662 ;	genCall
   0423 12s00r00           1663 	lcall	_printf_tiny
   0426 15 81              1664 	dec	sp
   0428 15 81              1665 	dec	sp
                           1666 ;	main.c:184: invalid_bit = 2;
                           1667 ;	genAssign
   042A 90s00rB7           1668 	mov	dptr,#_main_invalid_bit_1_1
   042D 74 02              1669 	mov	a,#0x02
   042F F0                 1670 	movx	@dptr,a
                           1671 ;	main.c:185: break;
                           1672 ;	Peephole 112.b	changed ljmp to sjmp
   0430 80 47              1673 	sjmp	00145$
   0432                    1674 00139$:
                           1675 ;	main.c:187: y_co = (y_co*10) + temp;
                           1676 ;	genAssign
   0432 90s00rB6           1677 	mov	dptr,#_main_y_co_1_1
   0435 E0                 1678 	movx	a,@dptr
                           1679 ;	genMult
                           1680 ;	genMultOneByte
   0436 FB                 1681 	mov	r3,a
                           1682 ;	Peephole 105	removed redundant mov
   0437 75 F0 0A           1683 	mov	b,#0x0A
   043A A4                 1684 	mul	ab
                           1685 ;	genPlus
   043B 90s00rB6           1686 	mov	dptr,#_main_y_co_1_1
                           1687 ;	Peephole 236.a	used r4 instead of ar4
   043E 2C                 1688 	add	a,r4
   043F F0                 1689 	movx	@dptr,a
                           1690 ;	main.c:188: printf_tiny("\ry_co=%d, temp=%d\n", y_co, temp);
                           1691 ;	genCast
   0440 7B 00              1692 	mov	r3,#0x00
                           1693 ;	genAssign
   0442 90s00rB6           1694 	mov	dptr,#_main_y_co_1_1
   0445 E0                 1695 	movx	a,@dptr
   0446 FD                 1696 	mov	r5,a
                           1697 ;	genCast
   0447 8D 06              1698 	mov	ar6,r5
   0449 7F 00              1699 	mov	r7,#0x00
                           1700 ;	genIpush
   044B C0 02              1701 	push	ar2
   044D C0 05              1702 	push	ar5
   044F C0 04              1703 	push	ar4
   0451 C0 03              1704 	push	ar3
                           1705 ;	genIpush
   0453 C0 06              1706 	push	ar6
   0455 C0 07              1707 	push	ar7
                           1708 ;	genIpush
   0457 74r21              1709 	mov	a,#__str_6
   0459 C0 E0              1710 	push	acc
   045B 74s01              1711 	mov	a,#(__str_6 >> 8)
   045D C0 E0              1712 	push	acc
                           1713 ;	genCall
   045F 12s00r00           1714 	lcall	_printf_tiny
   0462 E5 81              1715 	mov	a,sp
   0464 24 FA              1716 	add	a,#0xfa
   0466 F5 81              1717 	mov	sp,a
   0468 D0 05              1718 	pop	ar5
   046A D0 02              1719 	pop	ar2
                           1720 ;	main.c:189: invalid_bit = 0;
                           1721 ;	genAssign
   046C 90s00rB7           1722 	mov	dptr,#_main_invalid_bit_1_1
                           1723 ;	Peephole 181	changed mov to clr
   046F E4                 1724 	clr	a
   0470 F0                 1725 	movx	@dptr,a
                           1726 ;	main.c:190: }while(y_co > 15);
                           1727 ;	genCmpGt
                           1728 ;	genCmp
                           1729 ;	genIfxJump
                           1730 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0471 ED                 1731 	mov	a,r5
   0472 24 F0              1732 	add	a,#0xff - 0x0F
   0474 50 03              1733 	jnc	00242$
   0476 02s03r75           1734 	ljmp	00143$
   0479                    1735 00242$:
   0479                    1736 00145$:
                           1737 ;	main.c:191: if(invalid_bit == 0){
                           1738 ;	genAssign
   0479 90s00rB7           1739 	mov	dptr,#_main_invalid_bit_1_1
   047C E0                 1740 	movx	a,@dptr
                           1741 ;	genIfx
   047D FA                 1742 	mov	r2,a
                           1743 ;	Peephole 105	removed redundant mov
                           1744 ;	genIfxJump
                           1745 ;	Peephole 108.b	removed ljmp by inverse jump logic
   047E 70 16              1746 	jnz	00149$
                           1747 ;	Peephole 300	removed redundant label 00243$
                           1748 ;	main.c:192: lcdgotoxy(x_co, y_co);
                           1749 ;	genAssign
   0480 90s00rB5           1750 	mov	dptr,#_main_x_co_1_1
   0483 E0                 1751 	movx	a,@dptr
   0484 FB                 1752 	mov	r3,a
                           1753 ;	genAssign
   0485 90s00rB6           1754 	mov	dptr,#_main_y_co_1_1
   0488 E0                 1755 	movx	a,@dptr
                           1756 ;	genAssign
   0489 FC                 1757 	mov	r4,a
   048A 90s00r00           1758 	mov	dptr,#_lcdgotoxy_PARM_2
                           1759 ;	Peephole 100	removed redundant mov
   048D F0                 1760 	movx	@dptr,a
                           1761 ;	genCall
   048E 8B 82              1762 	mov	dpl,r3
   0490 12s00r00           1763 	lcall	_lcdgotoxy
                           1764 ;	main.c:193: break;
   0493 02s02r3F           1765 	ljmp	00180$
   0496                    1766 00149$:
                           1767 ;	main.c:195: }while(invalid_bit != 0x08);
                           1768 ;	genCmpEq
                           1769 ;	gencjneshort
   0496 BA 08 02           1770 	cjne	r2,#0x08,00244$
   0499 80 03              1771 	sjmp	00245$
   049B                    1772 00244$:
   049B 02s03r0C           1773 	ljmp	00124$
   049E                    1774 00245$:
                           1775 ;	main.c:196: break;
   049E 02s02r3F           1776 	ljmp	00180$
                           1777 ;	main.c:197: case '9':
   04A1                    1778 00151$:
                           1779 ;	main.c:198: do{
   04A1                    1780 00164$:
                           1781 ;	main.c:199: invalid_bit = 0;
                           1782 ;	genAssign
   04A1 90s00rB7           1783 	mov	dptr,#_main_invalid_bit_1_1
                           1784 ;	Peephole 181	changed mov to clr
   04A4 E4                 1785 	clr	a
   04A5 F0                 1786 	movx	@dptr,a
                           1787 ;	main.c:200: printf_tiny("\rEnter the address.\n\rBetween:i. 00 and 0F\n\rii. 40 and 4F\n\riii. 10 and 1F\n\riv 50 and 5F\n\r(all values in HEX FORMAT)\n\r");
                           1788 ;	genIpush
   04A6 74r34              1789 	mov	a,#__str_7
   04A8 C0 E0              1790 	push	acc
   04AA 74s01              1791 	mov	a,#(__str_7 >> 8)
   04AC C0 E0              1792 	push	acc
                           1793 ;	genCall
   04AE 12s00r00           1794 	lcall	_printf_tiny
   04B1 15 81              1795 	dec	sp
   04B3 15 81              1796 	dec	sp
                           1797 ;	main.c:201: user_data = rx_get_string();
                           1798 ;	genCall
   04B5 12s00r00           1799 	lcall	_rx_get_string
   04B8 AA 82              1800 	mov	r2,dpl
   04BA AB 83              1801 	mov	r3,dph
   04BC AC F0              1802 	mov	r4,b
                           1803 ;	main.c:202: if(rx_array[0] == 0x08){
                           1804 ;	genPointerGet
                           1805 ;	genFarPointerGet
   04BE 90s00r00           1806 	mov	dptr,#_rx_array
   04C1 E0                 1807 	movx	a,@dptr
   04C2 FD                 1808 	mov	r5,a
                           1809 ;	genCmpEq
                           1810 ;	gencjneshort
   04C3 BD 08 03           1811 	cjne	r5,#0x08,00246$
   04C6 02s02r3F           1812 	ljmp	00180$
   04C9                    1813 00246$:
                           1814 ;	main.c:205: printf_tiny("\rAddress received = 0x%s\n", rx_array);
                           1815 ;	genIpush
   04C9 C0 02              1816 	push	ar2
   04CB C0 03              1817 	push	ar3
   04CD C0 04              1818 	push	ar4
   04CF 74r00              1819 	mov	a,#_rx_array
   04D1 C0 E0              1820 	push	acc
   04D3 74s00              1821 	mov	a,#(_rx_array >> 8)
   04D5 C0 E0              1822 	push	acc
                           1823 ;	Peephole 181	changed mov to clr
   04D7 E4                 1824 	clr	a
   04D8 C0 E0              1825 	push	acc
                           1826 ;	genIpush
   04DA 74rA9              1827 	mov	a,#__str_8
   04DC C0 E0              1828 	push	acc
   04DE 74s01              1829 	mov	a,#(__str_8 >> 8)
   04E0 C0 E0              1830 	push	acc
                           1831 ;	genCall
   04E2 12s00r00           1832 	lcall	_printf_tiny
   04E5 E5 81              1833 	mov	a,sp
   04E7 24 FB              1834 	add	a,#0xfb
   04E9 F5 81              1835 	mov	sp,a
   04EB D0 04              1836 	pop	ar4
   04ED D0 03              1837 	pop	ar3
   04EF D0 02              1838 	pop	ar2
                           1839 ;	main.c:206: user_d = stoh(user_data);
                           1840 ;	genCall
   04F1 8A 82              1841 	mov	dpl,r2
   04F3 8B 83              1842 	mov	dph,r3
   04F5 8C F0              1843 	mov	b,r4
   04F7 12s00r00           1844 	lcall	_stoh
   04FA AA 82              1845 	mov	r2,dpl
   04FC AB 83              1846 	mov	r3,dph
                           1847 ;	main.c:207: if((user_d >=0x00 && user_d <=0x0F) || (user_d >=0x4F && user_d <=0x4F) || (user_d >=0x10 && user_d <=0x1F) || (user_d >=0x50 && user_d <=0x5F)){
                           1848 ;	genAssign
   04FE 8A 04              1849 	mov	ar4,r2
   0500 8B 05              1850 	mov	ar5,r3
                           1851 ;	genCmpGt
                           1852 ;	genCmp
   0502 C3                 1853 	clr	c
   0503 74 0F              1854 	mov	a,#0x0F
   0505 9C                 1855 	subb	a,r4
                           1856 ;	Peephole 181	changed mov to clr
   0506 E4                 1857 	clr	a
   0507 9D                 1858 	subb	a,r5
                           1859 ;	genIfxJump
                           1860 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0508 50 4B              1861 	jnc	00154$
                           1862 ;	Peephole 300	removed redundant label 00247$
                           1863 ;	genAssign
   050A 8A 04              1864 	mov	ar4,r2
   050C 8B 05              1865 	mov	ar5,r3
                           1866 ;	genCmpLt
                           1867 ;	genCmp
   050E C3                 1868 	clr	c
   050F EC                 1869 	mov	a,r4
   0510 94 4F              1870 	subb	a,#0x4F
   0512 ED                 1871 	mov	a,r5
   0513 94 00              1872 	subb	a,#0x00
                           1873 ;	genIfxJump
                           1874 ;	Peephole 112.b	changed ljmp to sjmp
                           1875 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0515 40 0C              1876 	jc	00161$
                           1877 ;	Peephole 300	removed redundant label 00248$
                           1878 ;	genAssign
   0517 8A 04              1879 	mov	ar4,r2
   0519 8B 05              1880 	mov	ar5,r3
                           1881 ;	genCmpGt
                           1882 ;	genCmp
   051B C3                 1883 	clr	c
   051C 74 4F              1884 	mov	a,#0x4F
   051E 9C                 1885 	subb	a,r4
                           1886 ;	Peephole 181	changed mov to clr
   051F E4                 1887 	clr	a
   0520 9D                 1888 	subb	a,r5
                           1889 ;	genIfxJump
                           1890 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0521 50 32              1891 	jnc	00154$
                           1892 ;	Peephole 300	removed redundant label 00249$
   0523                    1893 00161$:
                           1894 ;	genAssign
   0523 8A 04              1895 	mov	ar4,r2
   0525 8B 05              1896 	mov	ar5,r3
                           1897 ;	genCmpLt
                           1898 ;	genCmp
   0527 C3                 1899 	clr	c
   0528 EC                 1900 	mov	a,r4
   0529 94 10              1901 	subb	a,#0x10
   052B ED                 1902 	mov	a,r5
   052C 94 00              1903 	subb	a,#0x00
                           1904 ;	genIfxJump
                           1905 ;	Peephole 112.b	changed ljmp to sjmp
                           1906 ;	Peephole 160.a	removed sjmp by inverse jump logic
   052E 40 0C              1907 	jc	00163$
                           1908 ;	Peephole 300	removed redundant label 00250$
                           1909 ;	genAssign
   0530 8A 04              1910 	mov	ar4,r2
   0532 8B 05              1911 	mov	ar5,r3
                           1912 ;	genCmpGt
                           1913 ;	genCmp
   0534 C3                 1914 	clr	c
   0535 74 1F              1915 	mov	a,#0x1F
   0537 9C                 1916 	subb	a,r4
                           1917 ;	Peephole 181	changed mov to clr
   0538 E4                 1918 	clr	a
   0539 9D                 1919 	subb	a,r5
                           1920 ;	genIfxJump
                           1921 ;	Peephole 108.a	removed ljmp by inverse jump logic
   053A 50 19              1922 	jnc	00154$
                           1923 ;	Peephole 300	removed redundant label 00251$
   053C                    1924 00163$:
                           1925 ;	genAssign
   053C 8A 04              1926 	mov	ar4,r2
   053E 8B 05              1927 	mov	ar5,r3
                           1928 ;	genCmpLt
                           1929 ;	genCmp
   0540 C3                 1930 	clr	c
   0541 EC                 1931 	mov	a,r4
   0542 94 50              1932 	subb	a,#0x50
   0544 ED                 1933 	mov	a,r5
   0545 94 00              1934 	subb	a,#0x00
                           1935 ;	genIfxJump
                           1936 ;	Peephole 112.b	changed ljmp to sjmp
                           1937 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0547 40 13              1938 	jc	00155$
                           1939 ;	Peephole 300	removed redundant label 00252$
                           1940 ;	genAssign
   0549 8A 04              1941 	mov	ar4,r2
   054B 8B 05              1942 	mov	ar5,r3
                           1943 ;	genCmpGt
                           1944 ;	genCmp
   054D C3                 1945 	clr	c
   054E 74 5F              1946 	mov	a,#0x5F
   0550 9C                 1947 	subb	a,r4
                           1948 ;	Peephole 181	changed mov to clr
   0551 E4                 1949 	clr	a
   0552 9D                 1950 	subb	a,r5
                           1951 ;	genIfxJump
                           1952 ;	Peephole 112.b	changed ljmp to sjmp
                           1953 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0553 40 07              1954 	jc	00155$
                           1955 ;	Peephole 300	removed redundant label 00253$
   0555                    1956 00154$:
                           1957 ;	main.c:208: lcdgotoaddr(user_d);
                           1958 ;	genAssign
                           1959 ;	genCast
                           1960 ;	genCall
   0555 8A 82              1961 	mov	dpl,r2
   0557 12s00r00           1962 	lcall	_lcdgotoaddr
                           1963 ;	Peephole 112.b	changed ljmp to sjmp
   055A 80 15              1964 	sjmp	00165$
   055C                    1965 00155$:
                           1966 ;	main.c:211: printf_tiny("\rInvalid input. Enter a valid input\n\r");
                           1967 ;	genIpush
   055C 74rC3              1968 	mov	a,#__str_9
   055E C0 E0              1969 	push	acc
   0560 74s01              1970 	mov	a,#(__str_9 >> 8)
   0562 C0 E0              1971 	push	acc
                           1972 ;	genCall
   0564 12s00r00           1973 	lcall	_printf_tiny
   0567 15 81              1974 	dec	sp
   0569 15 81              1975 	dec	sp
                           1976 ;	main.c:212: invalid_bit = 1;
                           1977 ;	genAssign
   056B 90s00rB7           1978 	mov	dptr,#_main_invalid_bit_1_1
   056E 74 01              1979 	mov	a,#0x01
   0570 F0                 1980 	movx	@dptr,a
   0571                    1981 00165$:
                           1982 ;	main.c:214: }while(invalid_bit == 1);
                           1983 ;	genAssign
   0571 90s00rB7           1984 	mov	dptr,#_main_invalid_bit_1_1
   0574 E0                 1985 	movx	a,@dptr
   0575 FA                 1986 	mov	r2,a
                           1987 ;	genCmpEq
                           1988 ;	gencjneshort
   0576 BA 01 03           1989 	cjne	r2,#0x01,00254$
   0579 02s04rA1           1990 	ljmp	00164$
   057C                    1991 00254$:
                           1992 ;	main.c:216: break;
   057C 02s02r3F           1993 	ljmp	00180$
                           1994 ;	main.c:217: case 'P':
   057F                    1995 00167$:
                           1996 ;	main.c:218: stop_timeclock();
                           1997 ;	genCall
   057F 12s00r00           1998 	lcall	_stop_timeclock
                           1999 ;	main.c:219: break;
   0582 02s02r3F           2000 	ljmp	00180$
                           2001 ;	main.c:220: case 'R':
   0585                    2002 00168$:
                           2003 ;	main.c:221: reset_timeclock();
                           2004 ;	genCall
   0585 12s00r00           2005 	lcall	_reset_timeclock
                           2006 ;	main.c:222: break;
   0588 02s02r3F           2007 	ljmp	00180$
                           2008 ;	main.c:223: case 'S':
   058B                    2009 00169$:
                           2010 ;	main.c:224: restart_timeclock();
                           2011 ;	genCall
   058B 12s00r00           2012 	lcall	_restart_timeclock
                           2013 ;	main.c:225: break;
   058E 02s02r3F           2014 	ljmp	00180$
                           2015 ;	main.c:226: case 'C':
   0591                    2016 00170$:
                           2017 ;	main.c:227: custom_char();
                           2018 ;	genCall
   0591 12s00r00           2019 	lcall	_custom_char
                           2020 ;	main.c:228: break;
   0594 02s02r3F           2021 	ljmp	00180$
                           2022 ;	main.c:229: case 'M':
   0597                    2023 00171$:
                           2024 ;	main.c:230: printf_tiny("\rEnter the string. Press backspace (followed by enter) to exit to main menu\n");
                           2025 ;	genIpush
   0597 74r0A              2026 	mov	a,#__str_2
   0599 C0 E0              2027 	push	acc
   059B 74s00              2028 	mov	a,#(__str_2 >> 8)
   059D C0 E0              2029 	push	acc
                           2030 ;	genCall
   059F 12s00r00           2031 	lcall	_printf_tiny
   05A2 15 81              2032 	dec	sp
   05A4 15 81              2033 	dec	sp
                           2034 ;	main.c:231: mystring = rx_get_string();
                           2035 ;	genCall
   05A6 12s00r00           2036 	lcall	_rx_get_string
   05A9 AA 82              2037 	mov	r2,dpl
   05AB AB 83              2038 	mov	r3,dph
   05AD AC F0              2039 	mov	r4,b
                           2040 ;	main.c:232: if(rx_array[0] == 0x08){
                           2041 ;	genPointerGet
                           2042 ;	genFarPointerGet
   05AF 90s00r00           2043 	mov	dptr,#_rx_array
   05B2 E0                 2044 	movx	a,@dptr
   05B3 FD                 2045 	mov	r5,a
                           2046 ;	genCmpEq
                           2047 ;	gencjneshort
   05B4 BD 08 03           2048 	cjne	r5,#0x08,00255$
   05B7 02s02r3F           2049 	ljmp	00180$
   05BA                    2050 00255$:
                           2051 ;	main.c:235: search_string(mystring);
                           2052 ;	genCall
   05BA 8A 82              2053 	mov	dpl,r2
   05BC 8B 83              2054 	mov	dph,r3
   05BE 8C F0              2055 	mov	b,r4
   05C0 12s00r00           2056 	lcall	_search_string
                           2057 ;	main.c:236: break;
   05C3 02s02r3F           2058 	ljmp	00180$
                           2059 ;	main.c:237: case 'D':
   05C6                    2060 00174$:
                           2061 ;	main.c:238: configure_IOE();
                           2062 ;	genCall
   05C6 12s00r00           2063 	lcall	_configure_IOE
                           2064 ;	main.c:239: break;
   05C9 02s02r3F           2065 	ljmp	00180$
                           2066 ;	main.c:240: case 'Q':
   05CC                    2067 00175$:
                           2068 ;	main.c:241: status_IOE();
                           2069 ;	genCall
   05CC 12s00r00           2070 	lcall	_status_IOE
                           2071 ;	main.c:242: break;
   05CF 02s02r3F           2072 	ljmp	00180$
                           2073 ;	main.c:243: case 'W':
   05D2                    2074 00176$:
                           2075 ;	main.c:244: write_to_IOE();
                           2076 ;	genCall
   05D2 12s00r00           2077 	lcall	_write_to_IOE
                           2078 ;	main.c:245: break;
   05D5 02s02r3F           2079 	ljmp	00180$
                           2080 ;	main.c:246: default:
   05D8                    2081 00177$:
                           2082 ;	main.c:247: printf_tiny("\rInvalid input. Enter a valid input\n\r");
                           2083 ;	genIpush
   05D8 74rC3              2084 	mov	a,#__str_9
   05DA C0 E0              2085 	push	acc
   05DC 74s01              2086 	mov	a,#(__str_9 >> 8)
   05DE C0 E0              2087 	push	acc
                           2088 ;	genCall
   05E0 12s00r00           2089 	lcall	_printf_tiny
   05E3 15 81              2090 	dec	sp
   05E5 15 81              2091 	dec	sp
                           2092 ;	main.c:249: }
   05E7 02s02r3F           2093 	ljmp	00180$
                           2094 ;	Peephole 259.b	removed redundant label 00182$ and ret
                           2095 ;
                           2096 ;------------------------------------------------------------
                           2097 ;Allocation info for local variables in function 'timer0_zero'
                           2098 ;------------------------------------------------------------
                           2099 ;temp                      Allocated with name '_timer0_zero_temp_1_1'
                           2100 ;------------------------------------------------------------
                           2101 ;	main.c:256: void timer0_zero(void) __interrupt (1)
                           2102 ;	-----------------------------------------
                           2103 ;	 function timer0_zero
                           2104 ;	-----------------------------------------
   05EA                    2105 _timer0_zero:
   05EA C0 E0              2106 	push	acc
   05EC C0 F0              2107 	push	b
   05EE C0 82              2108 	push	dpl
   05F0 C0 83              2109 	push	dph
   05F2 C0 02              2110 	push	(0+2)
   05F4 C0 03              2111 	push	(0+3)
   05F6 C0 04              2112 	push	(0+4)
   05F8 C0 05              2113 	push	(0+5)
   05FA C0 06              2114 	push	(0+6)
   05FC C0 07              2115 	push	(0+7)
   05FE C0 00              2116 	push	(0+0)
   0600 C0 01              2117 	push	(0+1)
   0602 C0 D0              2118 	push	psw
   0604 75 D0 00           2119 	mov	psw,#0x00
                           2120 ;	main.c:259: TH0 = 0xDC;
                           2121 ;	genAssign
   0607 75 8C DC           2122 	mov	_TH0,#0xDC
                           2123 ;	main.c:260: TL0 = 0x20;
                           2124 ;	genAssign
   060A 75 8A 20           2125 	mov	_TL0,#0x20
                           2126 ;	genIfx
                           2127 ;	genIfxJump
                           2128 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           2129 ;	main.c:262: Test_pin =0;
                           2130 ;	genAssign
                           2131 ;	Peephole 250.a	using atomic test and clear
   060D 10 91 02           2132 	jbc	_P1_1,00107$
   0610 80 02              2133 	sjmp	00102$
   0612                    2134 00107$:
                           2135 ;	Peephole 112.b	changed ljmp to sjmp
   0612 80 02              2136 	sjmp	00103$
   0614                    2137 00102$:
                           2138 ;	main.c:265: Test_pin = 1;
                           2139 ;	genAssign
   0614 D2 91              2140 	setb	_P1_1
   0616                    2141 00103$:
                           2142 ;	main.c:268: print_time_lcd(0, print_flag);
                           2143 ;	genAssign
   0616 90s00r64           2144 	mov	dptr,#_print_flag
   0619 E0                 2145 	movx	a,@dptr
                           2146 ;	genAssign
   061A FA                 2147 	mov	r2,a
   061B 90s00r00           2148 	mov	dptr,#_print_time_lcd_PARM_2
                           2149 ;	Peephole 100	removed redundant mov
   061E F0                 2150 	movx	@dptr,a
                           2151 ;	genCall
   061F 75 82 00           2152 	mov	dpl,#0x00
   0622 12s00r00           2153 	lcall	_print_time_lcd
                           2154 ;	Peephole 300	removed redundant label 00104$
   0625 D0 D0              2155 	pop	psw
   0627 D0 01              2156 	pop	(0+1)
   0629 D0 00              2157 	pop	(0+0)
   062B D0 07              2158 	pop	(0+7)
   062D D0 06              2159 	pop	(0+6)
   062F D0 05              2160 	pop	(0+5)
   0631 D0 04              2161 	pop	(0+4)
   0633 D0 03              2162 	pop	(0+3)
   0635 D0 02              2163 	pop	(0+2)
   0637 D0 83              2164 	pop	dph
   0639 D0 82              2165 	pop	dpl
   063B D0 F0              2166 	pop	b
   063D D0 E0              2167 	pop	acc
   063F 32                 2168 	reti
                           2169 ;------------------------------------------------------------
                           2170 ;Allocation info for local variables in function 'isr_zero'
                           2171 ;------------------------------------------------------------
                           2172 ;temp                      Allocated with name '_isr_zero_temp_1_1'
                           2173 ;------------------------------------------------------------
                           2174 ;	main.c:276: void isr_zero(void) __interrupt (0)
                           2175 ;	-----------------------------------------
                           2176 ;	 function isr_zero
                           2177 ;	-----------------------------------------
   0640                    2178 _isr_zero:
   0640 C0 E0              2179 	push	acc
   0642 C0 F0              2180 	push	b
   0644 C0 82              2181 	push	dpl
   0646 C0 83              2182 	push	dph
   0648 C0 02              2183 	push	(0+2)
   064A C0 03              2184 	push	(0+3)
   064C C0 04              2185 	push	(0+4)
   064E C0 05              2186 	push	(0+5)
   0650 C0 06              2187 	push	(0+6)
   0652 C0 07              2188 	push	(0+7)
   0654 C0 00              2189 	push	(0+0)
   0656 C0 01              2190 	push	(0+1)
   0658 C0 D0              2191 	push	psw
   065A 75 D0 00           2192 	mov	psw,#0x00
                           2193 ;	main.c:279: printf_tiny("\rCount value=%x\n", count_value & 0x0F);
                           2194 ;	genAssign
   065D 90s00r00           2195 	mov	dptr,#_count_value
   0660 E0                 2196 	movx	a,@dptr
   0661 FA                 2197 	mov	r2,a
                           2198 ;	genAnd
   0662 53 02 0F           2199 	anl	ar2,#0x0F
                           2200 ;	genCast
   0665 7B 00              2201 	mov	r3,#0x00
                           2202 ;	genIpush
   0667 C0 02              2203 	push	ar2
   0669 C0 03              2204 	push	ar3
                           2205 ;	genIpush
   066B 74rE9              2206 	mov	a,#__str_10
   066D C0 E0              2207 	push	acc
   066F 74s01              2208 	mov	a,#(__str_10 >> 8)
   0671 C0 E0              2209 	push	acc
                           2210 ;	genCall
   0673 12s00r00           2211 	lcall	_printf_tiny
   0676 E5 81              2212 	mov	a,sp
   0678 24 FC              2213 	add	a,#0xfc
   067A F5 81              2214 	mov	sp,a
                           2215 ;	main.c:280: IOE_pins.P4_STATE = count_value & 0x01;
                           2216 ;	genAssign
   067C 90s00r00           2217 	mov	dptr,#_count_value
   067F E0                 2218 	movx	a,@dptr
   0680 FA                 2219 	mov	r2,a
                           2220 ;	genAnd
   0681 53 02 01           2221 	anl	ar2,#0x01
                           2222 ;	genPointerSet
                           2223 ;     genFarPointerSet
   0684 90s00r71           2224 	mov	dptr,#(_IOE_pins + 0x000c)
   0687 EA                 2225 	mov	a,r2
   0688 F0                 2226 	movx	@dptr,a
                           2227 ;	main.c:281: IOE_pins.P5_STATE = (count_value & 0x02)>>1;
                           2228 ;	genAssign
   0689 90s00r00           2229 	mov	dptr,#_count_value
   068C E0                 2230 	movx	a,@dptr
                           2231 ;	genAnd
                           2232 ;	genRightShift
                           2233 ;	genRightShiftLiteral
                           2234 ;	genrshOne
                           2235 ;	Peephole 139.a	removed redundant mov
   068D 54 02              2236 	anl	a,#0x02
   068F FA                 2237 	mov	r2,a
   0690 C3                 2238 	clr	c
   0691 13                 2239 	rrc	a
                           2240 ;	genPointerSet
                           2241 ;     genFarPointerSet
   0692 FA                 2242 	mov	r2,a
   0693 90s00r72           2243 	mov	dptr,#(_IOE_pins + 0x000d)
                           2244 ;	Peephole 100	removed redundant mov
   0696 F0                 2245 	movx	@dptr,a
                           2246 ;	main.c:282: IOE_pins.P6_STATE = (count_value & 0x04)>>2;
                           2247 ;	genAssign
   0697 90s00r00           2248 	mov	dptr,#_count_value
   069A E0                 2249 	movx	a,@dptr
                           2250 ;	genAnd
                           2251 ;	genRightShift
                           2252 ;	genRightShiftLiteral
                           2253 ;	genrshOne
                           2254 ;	Peephole 139.a	removed redundant mov
   069B 54 04              2255 	anl	a,#0x04
   069D FA                 2256 	mov	r2,a
   069E 03                 2257 	rr	a
   069F 03                 2258 	rr	a
   06A0 54 3F              2259 	anl	a,#0x3f
                           2260 ;	genPointerSet
                           2261 ;     genFarPointerSet
   06A2 FA                 2262 	mov	r2,a
   06A3 90s00r73           2263 	mov	dptr,#(_IOE_pins + 0x000e)
                           2264 ;	Peephole 100	removed redundant mov
   06A6 F0                 2265 	movx	@dptr,a
                           2266 ;	main.c:283: IOE_pins.P7_STATE = (count_value & 0x08)>>3;
                           2267 ;	genAssign
   06A7 90s00r00           2268 	mov	dptr,#_count_value
   06AA E0                 2269 	movx	a,@dptr
                           2270 ;	genAnd
                           2271 ;	genRightShift
                           2272 ;	genRightShiftLiteral
                           2273 ;	genrshOne
                           2274 ;	Peephole 139.a	removed redundant mov
   06AB 54 08              2275 	anl	a,#0x08
   06AD FA                 2276 	mov	r2,a
   06AE C4                 2277 	swap	a
   06AF 23                 2278 	rl	a
   06B0 54 1F              2279 	anl	a,#0x1f
                           2280 ;	genPointerSet
                           2281 ;     genFarPointerSet
   06B2 FA                 2282 	mov	r2,a
   06B3 90s00r74           2283 	mov	dptr,#(_IOE_pins + 0x000f)
                           2284 ;	Peephole 100	removed redundant mov
   06B6 F0                 2285 	movx	@dptr,a
                           2286 ;	main.c:284: temp = (IOE_pins.P0_STATE & P0_MASK) | ((IOE_pins.P1_STATE<<1) & P1_MASK) | ((IOE_pins.P2_STATE<<2) & P2_MASK) | ((IOE_pins.P3_STATE<<3) & P3_MASK) | ((IOE_pins.P4_STATE<<4) & P4_MASK) | ((IOE_pins.P5_STATE<<5) & P5_MASK) | ((IOE_pins.P6_STATE<<6) & P6_MASK) | ((IOE_pins.P7_STATE<<7) & P7_MASK);
                           2287 ;	genPointerGet
                           2288 ;	genFarPointerGet
   06B7 90s00r6D           2289 	mov	dptr,#(_IOE_pins + 0x0008)
   06BA E0                 2290 	movx	a,@dptr
   06BB FA                 2291 	mov	r2,a
                           2292 ;	genCast
   06BC 7B 00              2293 	mov	r3,#0x00
                           2294 ;	genAnd
   06BE 53 02 01           2295 	anl	ar2,#0x01
   06C1 7B 00              2296 	mov	r3,#0x00
                           2297 ;	genPointerGet
                           2298 ;	genFarPointerGet
   06C3 90s00r6E           2299 	mov	dptr,#(_IOE_pins + 0x0009)
   06C6 E0                 2300 	movx	a,@dptr
                           2301 ;	genLeftShift
                           2302 ;	genLeftShiftLiteral
                           2303 ;	genlshOne
                           2304 ;	Peephole 105	removed redundant mov
                           2305 ;	Peephole 204	removed redundant mov
   06C7 25 E0              2306 	add	a,acc
   06C9 FC                 2307 	mov	r4,a
                           2308 ;	genCast
   06CA 7D 00              2309 	mov	r5,#0x00
                           2310 ;	genAnd
   06CC 53 04 02           2311 	anl	ar4,#0x02
   06CF 7D 00              2312 	mov	r5,#0x00
                           2313 ;	genOr
   06D1 EC                 2314 	mov	a,r4
   06D2 42 02              2315 	orl	ar2,a
   06D4 ED                 2316 	mov	a,r5
   06D5 42 03              2317 	orl	ar3,a
                           2318 ;	genPointerGet
                           2319 ;	genFarPointerGet
   06D7 90s00r6F           2320 	mov	dptr,#(_IOE_pins + 0x000a)
   06DA E0                 2321 	movx	a,@dptr
                           2322 ;	genLeftShift
                           2323 ;	genLeftShiftLiteral
                           2324 ;	genlshOne
   06DB FC                 2325 	mov	r4,a
                           2326 ;	Peephole 105	removed redundant mov
   06DC 25 E0              2327 	add	a,acc
   06DE 25 E0              2328 	add	a,acc
   06E0 FC                 2329 	mov	r4,a
                           2330 ;	genCast
   06E1 7D 00              2331 	mov	r5,#0x00
                           2332 ;	genAnd
   06E3 53 04 04           2333 	anl	ar4,#0x04
   06E6 7D 00              2334 	mov	r5,#0x00
                           2335 ;	genOr
   06E8 EC                 2336 	mov	a,r4
   06E9 42 02              2337 	orl	ar2,a
   06EB ED                 2338 	mov	a,r5
   06EC 42 03              2339 	orl	ar3,a
                           2340 ;	genPointerGet
                           2341 ;	genFarPointerGet
   06EE 90s00r70           2342 	mov	dptr,#(_IOE_pins + 0x000b)
   06F1 E0                 2343 	movx	a,@dptr
                           2344 ;	genLeftShift
                           2345 ;	genLeftShiftLiteral
                           2346 ;	genlshOne
   06F2 FC                 2347 	mov	r4,a
                           2348 ;	Peephole 105	removed redundant mov
   06F3 C4                 2349 	swap	a
   06F4 03                 2350 	rr	a
   06F5 54 F8              2351 	anl	a,#0xf8
   06F7 FC                 2352 	mov	r4,a
                           2353 ;	genCast
   06F8 7D 00              2354 	mov	r5,#0x00
                           2355 ;	genAnd
   06FA 53 04 08           2356 	anl	ar4,#0x08
   06FD 7D 00              2357 	mov	r5,#0x00
                           2358 ;	genOr
   06FF EC                 2359 	mov	a,r4
   0700 42 02              2360 	orl	ar2,a
   0702 ED                 2361 	mov	a,r5
   0703 42 03              2362 	orl	ar3,a
                           2363 ;	genPointerGet
                           2364 ;	genFarPointerGet
   0705 90s00r71           2365 	mov	dptr,#(_IOE_pins + 0x000c)
   0708 E0                 2366 	movx	a,@dptr
                           2367 ;	genLeftShift
                           2368 ;	genLeftShiftLiteral
                           2369 ;	genlshOne
   0709 FC                 2370 	mov	r4,a
                           2371 ;	Peephole 105	removed redundant mov
   070A C4                 2372 	swap	a
   070B 54 F0              2373 	anl	a,#0xf0
   070D FC                 2374 	mov	r4,a
                           2375 ;	genCast
   070E 7D 00              2376 	mov	r5,#0x00
                           2377 ;	genAnd
   0710 53 04 10           2378 	anl	ar4,#0x10
   0713 7D 00              2379 	mov	r5,#0x00
                           2380 ;	genOr
   0715 EC                 2381 	mov	a,r4
   0716 42 02              2382 	orl	ar2,a
   0718 ED                 2383 	mov	a,r5
   0719 42 03              2384 	orl	ar3,a
                           2385 ;	genPointerGet
                           2386 ;	genFarPointerGet
   071B 90s00r72           2387 	mov	dptr,#(_IOE_pins + 0x000d)
   071E E0                 2388 	movx	a,@dptr
                           2389 ;	genLeftShift
                           2390 ;	genLeftShiftLiteral
                           2391 ;	genlshOne
   071F FC                 2392 	mov	r4,a
                           2393 ;	Peephole 105	removed redundant mov
   0720 C4                 2394 	swap	a
   0721 23                 2395 	rl	a
   0722 54 E0              2396 	anl	a,#0xe0
   0724 FC                 2397 	mov	r4,a
                           2398 ;	genCast
   0725 7D 00              2399 	mov	r5,#0x00
                           2400 ;	genAnd
   0727 53 04 20           2401 	anl	ar4,#0x20
   072A 7D 00              2402 	mov	r5,#0x00
                           2403 ;	genOr
   072C EC                 2404 	mov	a,r4
   072D 42 02              2405 	orl	ar2,a
   072F ED                 2406 	mov	a,r5
   0730 42 03              2407 	orl	ar3,a
                           2408 ;	genPointerGet
                           2409 ;	genFarPointerGet
   0732 90s00r73           2410 	mov	dptr,#(_IOE_pins + 0x000e)
   0735 E0                 2411 	movx	a,@dptr
                           2412 ;	genLeftShift
                           2413 ;	genLeftShiftLiteral
                           2414 ;	genlshOne
   0736 FC                 2415 	mov	r4,a
                           2416 ;	Peephole 105	removed redundant mov
   0737 03                 2417 	rr	a
   0738 03                 2418 	rr	a
   0739 54 C0              2419 	anl	a,#0xc0
   073B FC                 2420 	mov	r4,a
                           2421 ;	genCast
   073C 7D 00              2422 	mov	r5,#0x00
                           2423 ;	genAnd
   073E 53 04 40           2424 	anl	ar4,#0x40
   0741 7D 00              2425 	mov	r5,#0x00
                           2426 ;	genOr
   0743 EC                 2427 	mov	a,r4
   0744 42 02              2428 	orl	ar2,a
   0746 ED                 2429 	mov	a,r5
   0747 42 03              2430 	orl	ar3,a
                           2431 ;	genPointerGet
                           2432 ;	genFarPointerGet
   0749 90s00r74           2433 	mov	dptr,#(_IOE_pins + 0x000f)
   074C E0                 2434 	movx	a,@dptr
                           2435 ;	genLeftShift
                           2436 ;	genLeftShiftLiteral
                           2437 ;	genlshOne
   074D FC                 2438 	mov	r4,a
                           2439 ;	Peephole 105	removed redundant mov
   074E 03                 2440 	rr	a
   074F 54 80              2441 	anl	a,#0x80
   0751 FC                 2442 	mov	r4,a
                           2443 ;	genCast
   0752 7D 00              2444 	mov	r5,#0x00
                           2445 ;	genAnd
   0754 53 04 80           2446 	anl	ar4,#0x80
   0757 7D 00              2447 	mov	r5,#0x00
                           2448 ;	genOr
   0759 EC                 2449 	mov	a,r4
   075A 42 02              2450 	orl	ar2,a
   075C ED                 2451 	mov	a,r5
   075D 42 03              2452 	orl	ar3,a
                           2453 ;	genCast
                           2454 ;	main.c:285: I2C_Write_IOE(temp);
                           2455 ;	genCall
   075F 8A 82              2456 	mov	dpl,r2
   0761 12s00r00           2457 	lcall	_I2C_Write_IOE
                           2458 ;	main.c:286: count_value++;
                           2459 ;	genPlus
   0764 90s00r00           2460 	mov	dptr,#_count_value
   0767 E0                 2461 	movx	a,@dptr
   0768 24 01              2462 	add	a,#0x01
   076A F0                 2463 	movx	@dptr,a
                           2464 ;	Peephole 300	removed redundant label 00101$
   076B D0 D0              2465 	pop	psw
   076D D0 01              2466 	pop	(0+1)
   076F D0 00              2467 	pop	(0+0)
   0771 D0 07              2468 	pop	(0+7)
   0773 D0 06              2469 	pop	(0+6)
   0775 D0 05              2470 	pop	(0+5)
   0777 D0 04              2471 	pop	(0+4)
   0779 D0 03              2472 	pop	(0+3)
   077B D0 02              2473 	pop	(0+2)
   077D D0 83              2474 	pop	dph
   077F D0 82              2475 	pop	dpl
   0781 D0 F0              2476 	pop	b
   0783 D0 E0              2477 	pop	acc
   0785 32                 2478 	reti
                           2479 	.area CSEG    (CODE)
                           2480 	.area CONST   (CODE)
   0000                    2481 __str_1:
   0000 0A                 2482 	.db 0x0A
   0001 0D                 2483 	.db 0x0D
   0002 53 74 61 72 74     2484 	.ascii "Start"
   0007 0A                 2485 	.db 0x0A
   0008 0D                 2486 	.db 0x0D
   0009 00                 2487 	.db 0x00
   000A                    2488 __str_2:
   000A 0D                 2489 	.db 0x0D
   000B 45 6E 74 65 72 20  2490 	.ascii "Enter the string. Press backspace (followed by enter) to ex"
        74 68 65 20 73 74
        72 69 6E 67 2E 20
        50 72 65 73 73 20
        62 61 63 6B 73 70
        61 63 65 20 28 66
        6F 6C 6C 6F 77 65
        64 20 62 79 20 65
        6E 74 65 72 29 20
        74 6F 20 65 78
   0046 69 74 20 74 6F 20  2491 	.ascii "it to main menu"
        6D 61 69 6E 20 6D
        65 6E 75
   0055 0A                 2492 	.db 0x0A
   0056 00                 2493 	.db 0x00
   0057                    2494 __str_3:
   0057 0D                 2495 	.db 0x0D
   0058 45 6E 74 65 72 20  2496 	.ascii "Enter the X-coordinate (between 0 and 3)"
        74 68 65 20 58 2D
        63 6F 6F 72 64 69
        6E 61 74 65 20 28
        62 65 74 77 65 65
        6E 20 30 20 61 6E
        64 20 33 29
   0080 0A                 2497 	.db 0x0A
   0081 0D                 2498 	.db 0x0D
   0082 50 72 65 73 73 20  2499 	.ascii "Press backspace t"
        62 61 63 6B 73 70
        61 63 65 20 74
   0093 6F 20 65 78 69 74  2500 	.ascii "o exit to main menu"
        20 74 6F 20 6D 61
        69 6E 20 6D 65 6E
        75
   00A6 0A                 2501 	.db 0x0A
   00A7 0D                 2502 	.db 0x0D
   00A8 00                 2503 	.db 0x00
   00A9                    2504 __str_4:
   00A9 0D                 2505 	.db 0x0D
   00AA 49 6E 76 61 6C 69  2506 	.ascii "Invalid data"
        64 20 64 61 74 61
   00B6 0A                 2507 	.db 0x0A
   00B7 00                 2508 	.db 0x00
   00B8                    2509 __str_5:
   00B8 0D                 2510 	.db 0x0D
   00B9 45 6E 74 65 72 20  2511 	.ascii "Enter the Y-coordinate (between 00 and 15 ( enter in 2 digi"
        74 68 65 20 59 2D
        63 6F 6F 72 64 69
        6E 61 74 65 20 28
        62 65 74 77 65 65
        6E 20 30 30 20 61
        6E 64 20 31 35 20
        28 20 65 6E 74 65
        72 20 69 6E 20 32
        20 64 69 67 69
   00F4 74 73 29 29        2512 	.ascii "ts))"
   00F8 0A                 2513 	.db 0x0A
   00F9 0D                 2514 	.db 0x0D
   00FA 50 72 65 73 73 20  2515 	.ascii "Press backspace to exit to main menu"
        62 61 63 6B 73 70
        61 63 65 20 74 6F
        20 65 78 69 74 20
        74 6F 20 6D 61 69
        6E 20 6D 65 6E 75
   011E 0A                 2516 	.db 0x0A
   011F 0D                 2517 	.db 0x0D
   0120 00                 2518 	.db 0x00
   0121                    2519 __str_6:
   0121 0D                 2520 	.db 0x0D
   0122 79 5F 63 6F 3D 25  2521 	.ascii "y_co=%d, temp=%d"
        64 2C 20 74 65 6D
        70 3D 25 64
   0132 0A                 2522 	.db 0x0A
   0133 00                 2523 	.db 0x00
   0134                    2524 __str_7:
   0134 0D                 2525 	.db 0x0D
   0135 45 6E 74 65 72 20  2526 	.ascii "Enter the address."
        74 68 65 20 61 64
        64 72 65 73 73 2E
   0147 0A                 2527 	.db 0x0A
   0148 0D                 2528 	.db 0x0D
   0149 42 65 74 77 65 65  2529 	.ascii "Between:i. 00 and 0F"
        6E 3A 69 2E 20 30
        30 20 61 6E 64 20
        30 46
   015D 0A                 2530 	.db 0x0A
   015E 0D                 2531 	.db 0x0D
   015F 69 69 2E 20 34 30  2532 	.ascii "ii. 40 and 4F"
        20 61 6E 64 20 34
        46
   016C 0A                 2533 	.db 0x0A
   016D 0D                 2534 	.db 0x0D
   016E 69 69              2535 	.ascii "ii"
   0170 69 2E 20 31 30 20  2536 	.ascii "i. 10 and 1F"
        61 6E 64 20 31 46
   017C 0A                 2537 	.db 0x0A
   017D 0D                 2538 	.db 0x0D
   017E 69 76 20 35 30 20  2539 	.ascii "iv 50 and 5F"
        61 6E 64 20 35 46
   018A 0A                 2540 	.db 0x0A
   018B 0D                 2541 	.db 0x0D
   018C 28 61 6C 6C 20 76  2542 	.ascii "(all values in HEX FORMAT)"
        61 6C 75 65 73 20
        69 6E 20 48 45 58
        20 46 4F 52 4D 41
        54 29
   01A6 0A                 2543 	.db 0x0A
   01A7 0D                 2544 	.db 0x0D
   01A8 00                 2545 	.db 0x00
   01A9                    2546 __str_8:
   01A9 0D                 2547 	.db 0x0D
   01AA 41 64 64 72 65 73  2548 	.ascii "Address received = 0x%s"
        73 20 72 65 63 65
        69 76 65 64 20 3D
        20 30 78 25 73
   01C1 0A                 2549 	.db 0x0A
   01C2 00                 2550 	.db 0x00
   01C3                    2551 __str_9:
   01C3 0D                 2552 	.db 0x0D
   01C4 49 6E 76 61 6C 69  2553 	.ascii "Invalid input. Enter a valid input"
        64 20 69 6E 70 75
        74 2E 20 45 6E 74
        65 72 20 61 20 76
        61 6C 69 64 20 69
        6E 70 75 74
   01E6 0A                 2554 	.db 0x0A
   01E7 0D                 2555 	.db 0x0D
   01E8 00                 2556 	.db 0x00
   01E9                    2557 __str_10:
   01E9 0D                 2558 	.db 0x0D
   01EA 43 6F 75 6E 74 20  2559 	.ascii "Count value=%x"
        76 61 6C 75 65 3D
        25 78
   01F8 0A                 2560 	.db 0x0A
   01F9 00                 2561 	.db 0x00
                           2562 	.area XINIT   (CODE)
   0000                    2563 __xinit__count_value:
   0000 00                 2564 	.db #0x00
   0001                    2565 __xinit__end_address:
   0001 00 00              2566 	.byte #0x00,#0x00
   0003                    2567 __xinit__TIMER_CLOCK:
   0003 00                 2568 	.db #0x00
   0004                    2569 __xinit__lcd_address:
   0004 00                 2570 	.db #0x00
