                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Mon Apr 17 01:12:01 2017
                              5 ;--------------------------------------------------------
                              6 	.module LCD
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _TF1
                             13 	.globl _TR1
                             14 	.globl _TF0
                             15 	.globl _TR0
                             16 	.globl _IE1
                             17 	.globl _IT1
                             18 	.globl _IE0
                             19 	.globl _IT0
                             20 	.globl _SM0
                             21 	.globl _SM1
                             22 	.globl _SM2
                             23 	.globl _REN
                             24 	.globl _TB8
                             25 	.globl _RB8
                             26 	.globl _TI
                             27 	.globl _RI
                             28 	.globl _CY
                             29 	.globl _AC
                             30 	.globl _F0
                             31 	.globl _RS1
                             32 	.globl _RS0
                             33 	.globl _OV
                             34 	.globl _F1
                             35 	.globl _P
                             36 	.globl _RD
                             37 	.globl _WR
                             38 	.globl _T1
                             39 	.globl _T0
                             40 	.globl _INT1
                             41 	.globl _INT0
                             42 	.globl _TXD0
                             43 	.globl _TXD
                             44 	.globl _RXD0
                             45 	.globl _RXD
                             46 	.globl _P3_7
                             47 	.globl _P3_6
                             48 	.globl _P3_5
                             49 	.globl _P3_4
                             50 	.globl _P3_3
                             51 	.globl _P3_2
                             52 	.globl _P3_1
                             53 	.globl _P3_0
                             54 	.globl _P2_7
                             55 	.globl _P2_6
                             56 	.globl _P2_5
                             57 	.globl _P2_4
                             58 	.globl _P2_3
                             59 	.globl _P2_2
                             60 	.globl _P2_1
                             61 	.globl _P2_0
                             62 	.globl _P1_7
                             63 	.globl _P1_6
                             64 	.globl _P1_5
                             65 	.globl _P1_4
                             66 	.globl _P1_3
                             67 	.globl _P1_2
                             68 	.globl _P1_1
                             69 	.globl _P1_0
                             70 	.globl _P0_7
                             71 	.globl _P0_6
                             72 	.globl _P0_5
                             73 	.globl _P0_4
                             74 	.globl _P0_3
                             75 	.globl _P0_2
                             76 	.globl _P0_1
                             77 	.globl _P0_0
                             78 	.globl _PS
                             79 	.globl _PT1
                             80 	.globl _PX1
                             81 	.globl _PT0
                             82 	.globl _PX0
                             83 	.globl _EA
                             84 	.globl _ES
                             85 	.globl _ET1
                             86 	.globl _EX1
                             87 	.globl _ET0
                             88 	.globl _EX0
                             89 	.globl _BREG_F7
                             90 	.globl _BREG_F6
                             91 	.globl _BREG_F5
                             92 	.globl _BREG_F4
                             93 	.globl _BREG_F3
                             94 	.globl _BREG_F2
                             95 	.globl _BREG_F1
                             96 	.globl _BREG_F0
                             97 	.globl _P5_7
                             98 	.globl _P5_6
                             99 	.globl _P5_5
                            100 	.globl _P5_4
                            101 	.globl _P5_3
                            102 	.globl _P5_2
                            103 	.globl _P5_1
                            104 	.globl _P5_0
                            105 	.globl _P4_7
                            106 	.globl _P4_6
                            107 	.globl _P4_5
                            108 	.globl _P4_4
                            109 	.globl _P4_3
                            110 	.globl _P4_2
                            111 	.globl _P4_1
                            112 	.globl _P4_0
                            113 	.globl _PX0L
                            114 	.globl _PT0L
                            115 	.globl _PX1L
                            116 	.globl _PT1L
                            117 	.globl _PLS
                            118 	.globl _PT2L
                            119 	.globl _PPCL
                            120 	.globl _EC
                            121 	.globl _CCF0
                            122 	.globl _CCF1
                            123 	.globl _CCF2
                            124 	.globl _CCF3
                            125 	.globl _CCF4
                            126 	.globl _CR
                            127 	.globl _CF
                            128 	.globl _TF2
                            129 	.globl _EXF2
                            130 	.globl _RCLK
                            131 	.globl _TCLK
                            132 	.globl _EXEN2
                            133 	.globl _TR2
                            134 	.globl _C_T2
                            135 	.globl _CP_RL2
                            136 	.globl _T2CON_7
                            137 	.globl _T2CON_6
                            138 	.globl _T2CON_5
                            139 	.globl _T2CON_4
                            140 	.globl _T2CON_3
                            141 	.globl _T2CON_2
                            142 	.globl _T2CON_1
                            143 	.globl _T2CON_0
                            144 	.globl _PT2
                            145 	.globl _ET2
                            146 	.globl _TMOD
                            147 	.globl _TL1
                            148 	.globl _TL0
                            149 	.globl _TH1
                            150 	.globl _TH0
                            151 	.globl _TCON
                            152 	.globl _SP
                            153 	.globl _SCON
                            154 	.globl _SBUF0
                            155 	.globl _SBUF
                            156 	.globl _PSW
                            157 	.globl _PCON
                            158 	.globl _P3
                            159 	.globl _P2
                            160 	.globl _P1
                            161 	.globl _P0
                            162 	.globl _IP
                            163 	.globl _IE
                            164 	.globl _DP0L
                            165 	.globl _DPL
                            166 	.globl _DP0H
                            167 	.globl _DPH
                            168 	.globl _B
                            169 	.globl _ACC
                            170 	.globl _EECON
                            171 	.globl _KBF
                            172 	.globl _KBE
                            173 	.globl _KBLS
                            174 	.globl _BRL
                            175 	.globl _BDRCON
                            176 	.globl _T2MOD
                            177 	.globl _SPDAT
                            178 	.globl _SPSTA
                            179 	.globl _SPCON
                            180 	.globl _SADEN
                            181 	.globl _SADDR
                            182 	.globl _WDTPRG
                            183 	.globl _WDTRST
                            184 	.globl _P5
                            185 	.globl _P4
                            186 	.globl _IPH1
                            187 	.globl _IPL1
                            188 	.globl _IPH0
                            189 	.globl _IPL0
                            190 	.globl _IEN1
                            191 	.globl _IEN0
                            192 	.globl _CMOD
                            193 	.globl _CL
                            194 	.globl _CH
                            195 	.globl _CCON
                            196 	.globl _CCAPM4
                            197 	.globl _CCAPM3
                            198 	.globl _CCAPM2
                            199 	.globl _CCAPM1
                            200 	.globl _CCAPM0
                            201 	.globl _CCAP4L
                            202 	.globl _CCAP3L
                            203 	.globl _CCAP2L
                            204 	.globl _CCAP1L
                            205 	.globl _CCAP0L
                            206 	.globl _CCAP4H
                            207 	.globl _CCAP3H
                            208 	.globl _CCAP2H
                            209 	.globl _CCAP1H
                            210 	.globl _CCAP0H
                            211 	.globl _CKCKON1
                            212 	.globl _CKCKON0
                            213 	.globl _CKRL
                            214 	.globl _AUXR1
                            215 	.globl _AUXR
                            216 	.globl _TH2
                            217 	.globl _TL2
                            218 	.globl _RCAP2H
                            219 	.globl _RCAP2L
                            220 	.globl _T2CON
                            221 	.globl _count_value
                            222 	.globl _char_match_PARM_3
                            223 	.globl _char_match_PARM_2
                            224 	.globl _lcdcreatechar_PARM_2
                            225 	.globl _lcdgotoxy_PARM_2
                            226 	.globl _check_busy_flag
                            227 	.globl _CMD_Write
                            228 	.globl _lcdinit
                            229 	.globl _lcdgotoaddr
                            230 	.globl _lcdgotoaddrtimer
                            231 	.globl _lcdgotocgramaddr
                            232 	.globl _lcdgotoxy
                            233 	.globl _read_cursor_addr
                            234 	.globl _wrap_cursor
                            235 	.globl _lcdclear
                            236 	.globl _lcdputch
                            237 	.globl _lcdputchcustom
                            238 	.globl _lcdputchtimer
                            239 	.globl _lcdputstr
                            240 	.globl _lcd_cgram_hexdump
                            241 	.globl _lcd_ddram_hexdump
                            242 	.globl _lcdcreatechar
                            243 	.globl _custom_char
                            244 	.globl _char_match
                            245 	.globl _search_string
                            246 ;--------------------------------------------------------
                            247 ; special function registers
                            248 ;--------------------------------------------------------
                            249 	.area RSEG    (DATA)
                    00C8    250 _T2CON	=	0x00c8
                    00CA    251 _RCAP2L	=	0x00ca
                    00CB    252 _RCAP2H	=	0x00cb
                    00CC    253 _TL2	=	0x00cc
                    00CD    254 _TH2	=	0x00cd
                    008E    255 _AUXR	=	0x008e
                    00A2    256 _AUXR1	=	0x00a2
                    0097    257 _CKRL	=	0x0097
                    008F    258 _CKCKON0	=	0x008f
                    008F    259 _CKCKON1	=	0x008f
                    00FA    260 _CCAP0H	=	0x00fa
                    00FB    261 _CCAP1H	=	0x00fb
                    00FC    262 _CCAP2H	=	0x00fc
                    00FD    263 _CCAP3H	=	0x00fd
                    00FE    264 _CCAP4H	=	0x00fe
                    00EA    265 _CCAP0L	=	0x00ea
                    00EB    266 _CCAP1L	=	0x00eb
                    00EC    267 _CCAP2L	=	0x00ec
                    00ED    268 _CCAP3L	=	0x00ed
                    00EE    269 _CCAP4L	=	0x00ee
                    00DA    270 _CCAPM0	=	0x00da
                    00DB    271 _CCAPM1	=	0x00db
                    00DC    272 _CCAPM2	=	0x00dc
                    00DD    273 _CCAPM3	=	0x00dd
                    00DE    274 _CCAPM4	=	0x00de
                    00D8    275 _CCON	=	0x00d8
                    00F9    276 _CH	=	0x00f9
                    00E9    277 _CL	=	0x00e9
                    00D9    278 _CMOD	=	0x00d9
                    00A8    279 _IEN0	=	0x00a8
                    00B1    280 _IEN1	=	0x00b1
                    00B8    281 _IPL0	=	0x00b8
                    00B7    282 _IPH0	=	0x00b7
                    00B2    283 _IPL1	=	0x00b2
                    00B3    284 _IPH1	=	0x00b3
                    00C0    285 _P4	=	0x00c0
                    00D8    286 _P5	=	0x00d8
                    00A6    287 _WDTRST	=	0x00a6
                    00A7    288 _WDTPRG	=	0x00a7
                    00A9    289 _SADDR	=	0x00a9
                    00B9    290 _SADEN	=	0x00b9
                    00C3    291 _SPCON	=	0x00c3
                    00C4    292 _SPSTA	=	0x00c4
                    00C5    293 _SPDAT	=	0x00c5
                    00C9    294 _T2MOD	=	0x00c9
                    009B    295 _BDRCON	=	0x009b
                    009A    296 _BRL	=	0x009a
                    009C    297 _KBLS	=	0x009c
                    009D    298 _KBE	=	0x009d
                    009E    299 _KBF	=	0x009e
                    00D2    300 _EECON	=	0x00d2
                    00E0    301 _ACC	=	0x00e0
                    00F0    302 _B	=	0x00f0
                    0083    303 _DPH	=	0x0083
                    0083    304 _DP0H	=	0x0083
                    0082    305 _DPL	=	0x0082
                    0082    306 _DP0L	=	0x0082
                    00A8    307 _IE	=	0x00a8
                    00B8    308 _IP	=	0x00b8
                    0080    309 _P0	=	0x0080
                    0090    310 _P1	=	0x0090
                    00A0    311 _P2	=	0x00a0
                    00B0    312 _P3	=	0x00b0
                    0087    313 _PCON	=	0x0087
                    00D0    314 _PSW	=	0x00d0
                    0099    315 _SBUF	=	0x0099
                    0099    316 _SBUF0	=	0x0099
                    0098    317 _SCON	=	0x0098
                    0081    318 _SP	=	0x0081
                    0088    319 _TCON	=	0x0088
                    008C    320 _TH0	=	0x008c
                    008D    321 _TH1	=	0x008d
                    008A    322 _TL0	=	0x008a
                    008B    323 _TL1	=	0x008b
                    0089    324 _TMOD	=	0x0089
                            325 ;--------------------------------------------------------
                            326 ; special function bits
                            327 ;--------------------------------------------------------
                            328 	.area RSEG    (DATA)
                    00AD    329 _ET2	=	0x00ad
                    00BD    330 _PT2	=	0x00bd
                    00C8    331 _T2CON_0	=	0x00c8
                    00C9    332 _T2CON_1	=	0x00c9
                    00CA    333 _T2CON_2	=	0x00ca
                    00CB    334 _T2CON_3	=	0x00cb
                    00CC    335 _T2CON_4	=	0x00cc
                    00CD    336 _T2CON_5	=	0x00cd
                    00CE    337 _T2CON_6	=	0x00ce
                    00CF    338 _T2CON_7	=	0x00cf
                    00C8    339 _CP_RL2	=	0x00c8
                    00C9    340 _C_T2	=	0x00c9
                    00CA    341 _TR2	=	0x00ca
                    00CB    342 _EXEN2	=	0x00cb
                    00CC    343 _TCLK	=	0x00cc
                    00CD    344 _RCLK	=	0x00cd
                    00CE    345 _EXF2	=	0x00ce
                    00CF    346 _TF2	=	0x00cf
                    00DF    347 _CF	=	0x00df
                    00DE    348 _CR	=	0x00de
                    00DC    349 _CCF4	=	0x00dc
                    00DB    350 _CCF3	=	0x00db
                    00DA    351 _CCF2	=	0x00da
                    00D9    352 _CCF1	=	0x00d9
                    00D8    353 _CCF0	=	0x00d8
                    00AE    354 _EC	=	0x00ae
                    00BE    355 _PPCL	=	0x00be
                    00BD    356 _PT2L	=	0x00bd
                    00BC    357 _PLS	=	0x00bc
                    00BB    358 _PT1L	=	0x00bb
                    00BA    359 _PX1L	=	0x00ba
                    00B9    360 _PT0L	=	0x00b9
                    00B8    361 _PX0L	=	0x00b8
                    00C0    362 _P4_0	=	0x00c0
                    00C1    363 _P4_1	=	0x00c1
                    00C2    364 _P4_2	=	0x00c2
                    00C3    365 _P4_3	=	0x00c3
                    00C4    366 _P4_4	=	0x00c4
                    00C5    367 _P4_5	=	0x00c5
                    00C6    368 _P4_6	=	0x00c6
                    00C7    369 _P4_7	=	0x00c7
                    00D8    370 _P5_0	=	0x00d8
                    00D9    371 _P5_1	=	0x00d9
                    00DA    372 _P5_2	=	0x00da
                    00DB    373 _P5_3	=	0x00db
                    00DC    374 _P5_4	=	0x00dc
                    00DD    375 _P5_5	=	0x00dd
                    00DE    376 _P5_6	=	0x00de
                    00DF    377 _P5_7	=	0x00df
                    00F0    378 _BREG_F0	=	0x00f0
                    00F1    379 _BREG_F1	=	0x00f1
                    00F2    380 _BREG_F2	=	0x00f2
                    00F3    381 _BREG_F3	=	0x00f3
                    00F4    382 _BREG_F4	=	0x00f4
                    00F5    383 _BREG_F5	=	0x00f5
                    00F6    384 _BREG_F6	=	0x00f6
                    00F7    385 _BREG_F7	=	0x00f7
                    00A8    386 _EX0	=	0x00a8
                    00A9    387 _ET0	=	0x00a9
                    00AA    388 _EX1	=	0x00aa
                    00AB    389 _ET1	=	0x00ab
                    00AC    390 _ES	=	0x00ac
                    00AF    391 _EA	=	0x00af
                    00B8    392 _PX0	=	0x00b8
                    00B9    393 _PT0	=	0x00b9
                    00BA    394 _PX1	=	0x00ba
                    00BB    395 _PT1	=	0x00bb
                    00BC    396 _PS	=	0x00bc
                    0080    397 _P0_0	=	0x0080
                    0081    398 _P0_1	=	0x0081
                    0082    399 _P0_2	=	0x0082
                    0083    400 _P0_3	=	0x0083
                    0084    401 _P0_4	=	0x0084
                    0085    402 _P0_5	=	0x0085
                    0086    403 _P0_6	=	0x0086
                    0087    404 _P0_7	=	0x0087
                    0090    405 _P1_0	=	0x0090
                    0091    406 _P1_1	=	0x0091
                    0092    407 _P1_2	=	0x0092
                    0093    408 _P1_3	=	0x0093
                    0094    409 _P1_4	=	0x0094
                    0095    410 _P1_5	=	0x0095
                    0096    411 _P1_6	=	0x0096
                    0097    412 _P1_7	=	0x0097
                    00A0    413 _P2_0	=	0x00a0
                    00A1    414 _P2_1	=	0x00a1
                    00A2    415 _P2_2	=	0x00a2
                    00A3    416 _P2_3	=	0x00a3
                    00A4    417 _P2_4	=	0x00a4
                    00A5    418 _P2_5	=	0x00a5
                    00A6    419 _P2_6	=	0x00a6
                    00A7    420 _P2_7	=	0x00a7
                    00B0    421 _P3_0	=	0x00b0
                    00B1    422 _P3_1	=	0x00b1
                    00B2    423 _P3_2	=	0x00b2
                    00B3    424 _P3_3	=	0x00b3
                    00B4    425 _P3_4	=	0x00b4
                    00B5    426 _P3_5	=	0x00b5
                    00B6    427 _P3_6	=	0x00b6
                    00B7    428 _P3_7	=	0x00b7
                    00B0    429 _RXD	=	0x00b0
                    00B0    430 _RXD0	=	0x00b0
                    00B1    431 _TXD	=	0x00b1
                    00B1    432 _TXD0	=	0x00b1
                    00B2    433 _INT0	=	0x00b2
                    00B3    434 _INT1	=	0x00b3
                    00B4    435 _T0	=	0x00b4
                    00B5    436 _T1	=	0x00b5
                    00B6    437 _WR	=	0x00b6
                    00B7    438 _RD	=	0x00b7
                    00D0    439 _P	=	0x00d0
                    00D1    440 _F1	=	0x00d1
                    00D2    441 _OV	=	0x00d2
                    00D3    442 _RS0	=	0x00d3
                    00D4    443 _RS1	=	0x00d4
                    00D5    444 _F0	=	0x00d5
                    00D6    445 _AC	=	0x00d6
                    00D7    446 _CY	=	0x00d7
                    0098    447 _RI	=	0x0098
                    0099    448 _TI	=	0x0099
                    009A    449 _RB8	=	0x009a
                    009B    450 _TB8	=	0x009b
                    009C    451 _REN	=	0x009c
                    009D    452 _SM2	=	0x009d
                    009E    453 _SM1	=	0x009e
                    009F    454 _SM0	=	0x009f
                    0088    455 _IT0	=	0x0088
                    0089    456 _IE0	=	0x0089
                    008A    457 _IT1	=	0x008a
                    008B    458 _IE1	=	0x008b
                    008C    459 _TR0	=	0x008c
                    008D    460 _TF0	=	0x008d
                    008E    461 _TR1	=	0x008e
                    008F    462 _TF1	=	0x008f
                            463 ;--------------------------------------------------------
                            464 ; overlayable register banks
                            465 ;--------------------------------------------------------
                            466 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     467 	.ds 8
                            468 ;--------------------------------------------------------
                            469 ; internal ram data
                            470 ;--------------------------------------------------------
                            471 	.area DSEG    (DATA)
   0000                     472 _custom_char_sloc0_1_0:
   0000                     473 	.ds 1
   0001                     474 _custom_char_sloc1_1_0:
   0001                     475 	.ds 1
   0002                     476 _search_string_sloc0_1_0:
   0002                     477 	.ds 1
   0003                     478 _search_string_sloc1_1_0:
   0003                     479 	.ds 1
   0004                     480 _search_string_sloc2_1_0:
   0004                     481 	.ds 1
   0005                     482 _search_string_sloc3_1_0:
   0005                     483 	.ds 2
   0007                     484 _search_string_sloc4_1_0:
   0007                     485 	.ds 1
                            486 ;--------------------------------------------------------
                            487 ; overlayable items in internal ram 
                            488 ;--------------------------------------------------------
                            489 	.area OSEG    (OVR,DATA)
                            490 ;--------------------------------------------------------
                            491 ; indirectly addressable internal ram data
                            492 ;--------------------------------------------------------
                            493 	.area ISEG    (DATA)
                            494 ;--------------------------------------------------------
                            495 ; bit data
                            496 ;--------------------------------------------------------
                            497 	.area BSEG    (BIT)
                            498 ;--------------------------------------------------------
                            499 ; paged external ram data
                            500 ;--------------------------------------------------------
                            501 	.area PSEG    (PAG,XDATA)
                            502 ;--------------------------------------------------------
                            503 ; external ram data
                            504 ;--------------------------------------------------------
                            505 	.area XSEG    (XDATA)
   0000                     506 _check_busy_flag_temp_1_1:
   0000                     507 	.ds 1
   0001                     508 _CMD_Write_cmd_data_1_1:
   0001                     509 	.ds 1
   0002                     510 _lcdgotoaddr_addr_1_1:
   0002                     511 	.ds 1
   0003                     512 _lcdgotoaddrtimer_addr_1_1:
   0003                     513 	.ds 1
   0004                     514 _lcdgotocgramaddr_addr_1_1:
   0004                     515 	.ds 1
   0005                     516 _lcdgotoxy_PARM_2:
   0005                     517 	.ds 1
   0006                     518 _lcdgotoxy_row_1_1:
   0006                     519 	.ds 1
   0007                     520 _lcdgotoxy_temp_address_1_1:
   0007                     521 	.ds 1
   0008                     522 _wrap_cursor_cursor_addr_1_1:
   0008                     523 	.ds 1
   0009                     524 _lcdputch_cc_1_1:
   0009                     525 	.ds 1
   000A                     526 _lcdputchcustom_cc_1_1:
   000A                     527 	.ds 1
   000B                     528 _lcdputchtimer_cc_1_1:
   000B                     529 	.ds 1
   000C                     530 _lcdputstr_ss_1_1:
   000C                     531 	.ds 3
   000F                     532 _lcdcreatechar_PARM_2:
   000F                     533 	.ds 3
   0012                     534 _lcdcreatechar_ccode_1_1:
   0012                     535 	.ds 1
   0013                     536 _custom_char_char_code_1_1:
   0013                     537 	.ds 1
   0014                     538 _custom_char_j_1_1:
   0014                     539 	.ds 1
   0015                     540 _custom_char_invalid_bit_1_1:
   0015                     541 	.ds 1
   0016                     542 _custom_char_cgram_data_1_1:
   0016                     543 	.ds 8
   001E                     544 _char_match_PARM_2:
   001E                     545 	.ds 1
   001F                     546 _char_match_PARM_3:
   001F                     547 	.ds 1
   0020                     548 _char_match_str_1_1:
   0020                     549 	.ds 3
   0023                     550 _search_string_find_str_1_1:
   0023                     551 	.ds 3
   0026                     552 _search_string_j_1_1:
   0026                     553 	.ds 1
   0027                     554 _search_string_temp_addr_1_1:
   0027                     555 	.ds 1
   0028                     556 _search_string_success_search_1_1:
   0028                     557 	.ds 1
                            558 ;--------------------------------------------------------
                            559 ; external initialized ram data
                            560 ;--------------------------------------------------------
                            561 	.area XISEG   (XDATA)
   0000                     562 _count_value::
   0000                     563 	.ds 1
                            564 	.area HOME    (CODE)
                            565 	.area GSINIT0 (CODE)
                            566 	.area GSINIT1 (CODE)
                            567 	.area GSINIT2 (CODE)
                            568 	.area GSINIT3 (CODE)
                            569 	.area GSINIT4 (CODE)
                            570 	.area GSINIT5 (CODE)
                            571 	.area GSINIT  (CODE)
                            572 	.area GSFINAL (CODE)
                            573 	.area CSEG    (CODE)
                            574 ;--------------------------------------------------------
                            575 ; global & static initialisations
                            576 ;--------------------------------------------------------
                            577 	.area HOME    (CODE)
                            578 	.area GSINIT  (CODE)
                            579 	.area GSFINAL (CODE)
                            580 	.area GSINIT  (CODE)
                            581 ;--------------------------------------------------------
                            582 ; Home
                            583 ;--------------------------------------------------------
                            584 	.area HOME    (CODE)
                            585 	.area CSEG    (CODE)
                            586 ;--------------------------------------------------------
                            587 ; code
                            588 ;--------------------------------------------------------
                            589 	.area CSEG    (CODE)
                            590 ;------------------------------------------------------------
                            591 ;Allocation info for local variables in function 'check_busy_flag'
                            592 ;------------------------------------------------------------
                            593 ;temp                      Allocated with name '_check_busy_flag_temp_1_1'
                            594 ;------------------------------------------------------------
                            595 ;	LCD.c:17: void check_busy_flag(){
                            596 ;	-----------------------------------------
                            597 ;	 function check_busy_flag
                            598 ;	-----------------------------------------
   0000                     599 _check_busy_flag:
                    0002    600 	ar2 = 0x02
                    0003    601 	ar3 = 0x03
                    0004    602 	ar4 = 0x04
                    0005    603 	ar5 = 0x05
                    0006    604 	ar6 = 0x06
                    0007    605 	ar7 = 0x07
                    0000    606 	ar0 = 0x00
                    0001    607 	ar1 = 0x01
                            608 ;	LCD.c:19: LCD_RS = 0;
                            609 ;	genAssign
   0000 C2 93               610 	clr	_P1_3
                            611 ;	LCD.c:20: LCD_RW = 1;
                            612 ;	genAssign
   0002 D2 94               613 	setb	_P1_4
                            614 ;	LCD.c:23: do{
   0004                     615 00101$:
                            616 ;	LCD.c:24: temp = *RD_LCD_INSTR;
                            617 ;	genPointerGet
                            618 ;	genFarPointerGet
                            619 ;	Peephole 182.b	used 16 bit load of dptr
   0004 90 80 11            620 	mov	dptr,#0x8011
   0007 E0                  621 	movx	a,@dptr
                            622 ;	genAssign
   0008 FA                  623 	mov	r2,a
   0009 90s00r00            624 	mov	dptr,#_check_busy_flag_temp_1_1
                            625 ;	Peephole 100	removed redundant mov
   000C F0                  626 	movx	@dptr,a
                            627 ;	LCD.c:25: temp = temp & 0x80;
                            628 ;	genAssign
                            629 ;	genAnd
   000D 90s00r00            630 	mov	dptr,#_check_busy_flag_temp_1_1
   0010 E0                  631 	movx	a,@dptr
   0011 FA                  632 	mov	r2,a
                            633 ;	Peephole 248.b	optimized and to xdata
   0012 54 80               634 	anl	a,#0x80
   0014 F0                  635 	movx	@dptr,a
                            636 ;	LCD.c:26: }while(temp == 0x80);
                            637 ;	genAssign
   0015 90s00r00            638 	mov	dptr,#_check_busy_flag_temp_1_1
   0018 E0                  639 	movx	a,@dptr
   0019 FA                  640 	mov	r2,a
                            641 ;	genCmpEq
                            642 ;	gencjneshort
   001A BA 80 02            643 	cjne	r2,#0x80,00108$
                            644 ;	Peephole 112.b	changed ljmp to sjmp
   001D 80 E5               645 	sjmp	00101$
   001F                     646 00108$:
                            647 ;	LCD.c:27: LCD_RW = 0;
                            648 ;	genAssign
   001F C2 94               649 	clr	_P1_4
                            650 ;	Peephole 300	removed redundant label 00104$
   0021 22                  651 	ret
                            652 ;------------------------------------------------------------
                            653 ;Allocation info for local variables in function 'CMD_Write'
                            654 ;------------------------------------------------------------
                            655 ;cmd_data                  Allocated with name '_CMD_Write_cmd_data_1_1'
                            656 ;------------------------------------------------------------
                            657 ;	LCD.c:32: void CMD_Write(unsigned char cmd_data){
                            658 ;	-----------------------------------------
                            659 ;	 function CMD_Write
                            660 ;	-----------------------------------------
   0022                     661 _CMD_Write:
                            662 ;	genReceive
   0022 E5 82               663 	mov	a,dpl
   0024 90s00r01            664 	mov	dptr,#_CMD_Write_cmd_data_1_1
   0027 F0                  665 	movx	@dptr,a
                            666 ;	LCD.c:33: check_busy_flag();
                            667 ;	genCall
   0028 12s00r00            668 	lcall	_check_busy_flag
                            669 ;	LCD.c:34: LCD_RS=0;
                            670 ;	genAssign
   002B C2 93               671 	clr	_P1_3
                            672 ;	LCD.c:35: LCD_RW=0;
                            673 ;	genAssign
   002D C2 94               674 	clr	_P1_4
                            675 ;	LCD.c:36: *LCD_CMD = cmd_data;
                            676 ;	genAssign
   002F 7A 10               677 	mov	r2,#0x10
   0031 7B 80               678 	mov	r3,#0x80
                            679 ;	genAssign
   0033 90s00r01            680 	mov	dptr,#_CMD_Write_cmd_data_1_1
   0036 E0                  681 	movx	a,@dptr
                            682 ;	genPointerSet
                            683 ;     genFarPointerSet
   0037 FC                  684 	mov	r4,a
   0038 8A 82               685 	mov	dpl,r2
   003A 8B 83               686 	mov	dph,r3
                            687 ;	Peephole 136	removed redundant move
   003C F0                  688 	movx	@dptr,a
                            689 ;	Peephole 300	removed redundant label 00101$
   003D 22                  690 	ret
                            691 ;------------------------------------------------------------
                            692 ;Allocation info for local variables in function 'lcdinit'
                            693 ;------------------------------------------------------------
                            694 ;------------------------------------------------------------
                            695 ;	LCD.c:40: void lcdinit(){
                            696 ;	-----------------------------------------
                            697 ;	 function lcdinit
                            698 ;	-----------------------------------------
   003E                     699 _lcdinit:
                            700 ;	LCD.c:41: delay_ms(20);
                            701 ;	genCall
                            702 ;	Peephole 182.b	used 16 bit load of dptr
   003E 90 00 14            703 	mov	dptr,#0x0014
   0041 12s00r00            704 	lcall	_delay_ms
                            705 ;	LCD.c:43: CMD_Write(0x30);
                            706 ;	genCall
   0044 75 82 30            707 	mov	dpl,#0x30
   0047 12s00r22            708 	lcall	_CMD_Write
                            709 ;	LCD.c:44: delay_ms(6);
                            710 ;	genCall
                            711 ;	Peephole 182.b	used 16 bit load of dptr
   004A 90 00 06            712 	mov	dptr,#0x0006
   004D 12s00r00            713 	lcall	_delay_ms
                            714 ;	LCD.c:46: CMD_Write(0x30);
                            715 ;	genCall
   0050 75 82 30            716 	mov	dpl,#0x30
   0053 12s00r22            717 	lcall	_CMD_Write
                            718 ;	LCD.c:47: delay_ms(1);
                            719 ;	genCall
                            720 ;	Peephole 182.b	used 16 bit load of dptr
   0056 90 00 01            721 	mov	dptr,#0x0001
   0059 12s00r00            722 	lcall	_delay_ms
                            723 ;	LCD.c:49: CMD_Write(0x30);
                            724 ;	genCall
   005C 75 82 30            725 	mov	dpl,#0x30
   005F 12s00r22            726 	lcall	_CMD_Write
                            727 ;	LCD.c:51: check_busy_flag();
                            728 ;	genCall
   0062 12s00r00            729 	lcall	_check_busy_flag
                            730 ;	LCD.c:52: CMD_Write(0x38);
                            731 ;	genCall
   0065 75 82 38            732 	mov	dpl,#0x38
   0068 12s00r22            733 	lcall	_CMD_Write
                            734 ;	LCD.c:54: check_busy_flag();
                            735 ;	genCall
   006B 12s00r00            736 	lcall	_check_busy_flag
                            737 ;	LCD.c:55: CMD_Write(0x08);
                            738 ;	genCall
   006E 75 82 08            739 	mov	dpl,#0x08
   0071 12s00r22            740 	lcall	_CMD_Write
                            741 ;	LCD.c:57: check_busy_flag();
                            742 ;	genCall
   0074 12s00r00            743 	lcall	_check_busy_flag
                            744 ;	LCD.c:58: CMD_Write(0x0F);
                            745 ;	genCall
   0077 75 82 0F            746 	mov	dpl,#0x0F
   007A 12s00r22            747 	lcall	_CMD_Write
                            748 ;	LCD.c:60: check_busy_flag();
                            749 ;	genCall
   007D 12s00r00            750 	lcall	_check_busy_flag
                            751 ;	LCD.c:61: CMD_Write(0x06);
                            752 ;	genCall
   0080 75 82 06            753 	mov	dpl,#0x06
   0083 12s00r22            754 	lcall	_CMD_Write
                            755 ;	LCD.c:63: check_busy_flag();
                            756 ;	genCall
   0086 12s00r00            757 	lcall	_check_busy_flag
                            758 ;	LCD.c:64: CMD_Write(0x01);
                            759 ;	genCall
   0089 75 82 01            760 	mov	dpl,#0x01
                            761 ;	Peephole 253.b	replaced lcall/ret with ljmp
   008C 02s00r22            762 	ljmp	_CMD_Write
                            763 ;
                            764 ;------------------------------------------------------------
                            765 ;Allocation info for local variables in function 'lcdgotoaddr'
                            766 ;------------------------------------------------------------
                            767 ;addr                      Allocated with name '_lcdgotoaddr_addr_1_1'
                            768 ;------------------------------------------------------------
                            769 ;	LCD.c:68: void lcdgotoaddr(unsigned char addr){
                            770 ;	-----------------------------------------
                            771 ;	 function lcdgotoaddr
                            772 ;	-----------------------------------------
   008F                     773 _lcdgotoaddr:
                            774 ;	genReceive
   008F E5 82               775 	mov	a,dpl
   0091 90s00r02            776 	mov	dptr,#_lcdgotoaddr_addr_1_1
   0094 F0                  777 	movx	@dptr,a
                            778 ;	LCD.c:69: addr = addr | 0x80;
                            779 ;	genAssign
                            780 ;	genOr
   0095 90s00r02            781 	mov	dptr,#_lcdgotoaddr_addr_1_1
   0098 E0                  782 	movx	a,@dptr
   0099 FA                  783 	mov	r2,a
                            784 ;	Peephole 248.a	optimized or to xdata
   009A 44 80               785 	orl	a,#0x80
   009C F0                  786 	movx	@dptr,a
                            787 ;	LCD.c:70: check_busy_flag();
                            788 ;	genCall
   009D 12s00r00            789 	lcall	_check_busy_flag
                            790 ;	LCD.c:71: LCD_RS = 0;
                            791 ;	genAssign
   00A0 C2 93               792 	clr	_P1_3
                            793 ;	LCD.c:72: LCD_RW = 0;
                            794 ;	genAssign
   00A2 C2 94               795 	clr	_P1_4
                            796 ;	LCD.c:73: *WR_LCD_INSTR = addr;
                            797 ;	genAssign
   00A4 7A 12               798 	mov	r2,#0x12
   00A6 7B 80               799 	mov	r3,#0x80
                            800 ;	genAssign
   00A8 90s00r02            801 	mov	dptr,#_lcdgotoaddr_addr_1_1
   00AB E0                  802 	movx	a,@dptr
                            803 ;	genPointerSet
                            804 ;     genFarPointerSet
   00AC FC                  805 	mov	r4,a
   00AD 8A 82               806 	mov	dpl,r2
   00AF 8B 83               807 	mov	dph,r3
                            808 ;	Peephole 136	removed redundant move
   00B1 F0                  809 	movx	@dptr,a
                            810 ;	LCD.c:74: lcd_address = addr;
                            811 ;	genAssign
   00B2 90s00r00            812 	mov	dptr,#_lcd_address
   00B5 EC                  813 	mov	a,r4
   00B6 F0                  814 	movx	@dptr,a
                            815 ;	Peephole 300	removed redundant label 00101$
   00B7 22                  816 	ret
                            817 ;------------------------------------------------------------
                            818 ;Allocation info for local variables in function 'lcdgotoaddrtimer'
                            819 ;------------------------------------------------------------
                            820 ;addr                      Allocated with name '_lcdgotoaddrtimer_addr_1_1'
                            821 ;------------------------------------------------------------
                            822 ;	LCD.c:82: void lcdgotoaddrtimer(unsigned char addr){
                            823 ;	-----------------------------------------
                            824 ;	 function lcdgotoaddrtimer
                            825 ;	-----------------------------------------
   00B8                     826 _lcdgotoaddrtimer:
                            827 ;	genReceive
   00B8 E5 82               828 	mov	a,dpl
   00BA 90s00r03            829 	mov	dptr,#_lcdgotoaddrtimer_addr_1_1
   00BD F0                  830 	movx	@dptr,a
                            831 ;	LCD.c:83: addr = addr | 0x80;
                            832 ;	genAssign
                            833 ;	genOr
   00BE 90s00r03            834 	mov	dptr,#_lcdgotoaddrtimer_addr_1_1
   00C1 E0                  835 	movx	a,@dptr
   00C2 FA                  836 	mov	r2,a
                            837 ;	Peephole 248.a	optimized or to xdata
   00C3 44 80               838 	orl	a,#0x80
   00C5 F0                  839 	movx	@dptr,a
                            840 ;	LCD.c:84: check_busy_flag();
                            841 ;	genCall
   00C6 12s00r00            842 	lcall	_check_busy_flag
                            843 ;	LCD.c:85: LCD_RS = 0;
                            844 ;	genAssign
   00C9 C2 93               845 	clr	_P1_3
                            846 ;	LCD.c:86: LCD_RW = 0;
                            847 ;	genAssign
   00CB C2 94               848 	clr	_P1_4
                            849 ;	LCD.c:87: *WR_LCD_INSTR = addr;
                            850 ;	genAssign
   00CD 7A 12               851 	mov	r2,#0x12
   00CF 7B 80               852 	mov	r3,#0x80
                            853 ;	genAssign
   00D1 90s00r03            854 	mov	dptr,#_lcdgotoaddrtimer_addr_1_1
   00D4 E0                  855 	movx	a,@dptr
                            856 ;	genPointerSet
                            857 ;     genFarPointerSet
   00D5 FC                  858 	mov	r4,a
   00D6 8A 82               859 	mov	dpl,r2
   00D8 8B 83               860 	mov	dph,r3
                            861 ;	Peephole 136	removed redundant move
   00DA F0                  862 	movx	@dptr,a
                            863 ;	Peephole 300	removed redundant label 00101$
   00DB 22                  864 	ret
                            865 ;------------------------------------------------------------
                            866 ;Allocation info for local variables in function 'lcdgotocgramaddr'
                            867 ;------------------------------------------------------------
                            868 ;addr                      Allocated with name '_lcdgotocgramaddr_addr_1_1'
                            869 ;------------------------------------------------------------
                            870 ;	LCD.c:94: void lcdgotocgramaddr(unsigned char addr){
                            871 ;	-----------------------------------------
                            872 ;	 function lcdgotocgramaddr
                            873 ;	-----------------------------------------
   00DC                     874 _lcdgotocgramaddr:
                            875 ;	genReceive
   00DC E5 82               876 	mov	a,dpl
   00DE 90s00r04            877 	mov	dptr,#_lcdgotocgramaddr_addr_1_1
   00E1 F0                  878 	movx	@dptr,a
                            879 ;	LCD.c:95: addr = (addr<<3) | 0x40;
                            880 ;	genAssign
   00E2 90s00r04            881 	mov	dptr,#_lcdgotocgramaddr_addr_1_1
   00E5 E0                  882 	movx	a,@dptr
                            883 ;	genLeftShift
                            884 ;	genLeftShiftLiteral
                            885 ;	genlshOne
   00E6 FA                  886 	mov	r2,a
                            887 ;	Peephole 105	removed redundant mov
   00E7 C4                  888 	swap	a
   00E8 03                  889 	rr	a
   00E9 54 F8               890 	anl	a,#0xf8
   00EB FA                  891 	mov	r2,a
                            892 ;	genOr
   00EC 90s00r04            893 	mov	dptr,#_lcdgotocgramaddr_addr_1_1
   00EF 74 40               894 	mov	a,#0x40
   00F1 4A                  895 	orl	a,r2
   00F2 F0                  896 	movx	@dptr,a
                            897 ;	LCD.c:96: check_busy_flag();
                            898 ;	genCall
   00F3 12s00r00            899 	lcall	_check_busy_flag
                            900 ;	LCD.c:97: LCD_RS = 0;
                            901 ;	genAssign
   00F6 C2 93               902 	clr	_P1_3
                            903 ;	LCD.c:98: LCD_RW = 0;
                            904 ;	genAssign
   00F8 C2 94               905 	clr	_P1_4
                            906 ;	LCD.c:99: *WR_LCD_INSTR = addr;
                            907 ;	genAssign
   00FA 7A 12               908 	mov	r2,#0x12
   00FC 7B 80               909 	mov	r3,#0x80
                            910 ;	genAssign
   00FE 90s00r04            911 	mov	dptr,#_lcdgotocgramaddr_addr_1_1
   0101 E0                  912 	movx	a,@dptr
                            913 ;	genPointerSet
                            914 ;     genFarPointerSet
   0102 FC                  915 	mov	r4,a
   0103 8A 82               916 	mov	dpl,r2
   0105 8B 83               917 	mov	dph,r3
                            918 ;	Peephole 136	removed redundant move
   0107 F0                  919 	movx	@dptr,a
                            920 ;	Peephole 300	removed redundant label 00101$
   0108 22                  921 	ret
                            922 ;------------------------------------------------------------
                            923 ;Allocation info for local variables in function 'lcdgotoxy'
                            924 ;------------------------------------------------------------
                            925 ;column                    Allocated with name '_lcdgotoxy_PARM_2'
                            926 ;row                       Allocated with name '_lcdgotoxy_row_1_1'
                            927 ;temp_address              Allocated with name '_lcdgotoxy_temp_address_1_1'
                            928 ;------------------------------------------------------------
                            929 ;	LCD.c:105: void lcdgotoxy(unsigned char row, unsigned char column){
                            930 ;	-----------------------------------------
                            931 ;	 function lcdgotoxy
                            932 ;	-----------------------------------------
   0109                     933 _lcdgotoxy:
                            934 ;	genReceive
   0109 E5 82               935 	mov	a,dpl
   010B 90s00r06            936 	mov	dptr,#_lcdgotoxy_row_1_1
   010E F0                  937 	movx	@dptr,a
                            938 ;	LCD.c:106: unsigned char temp_address=0;
                            939 ;	genAssign
   010F 90s00r07            940 	mov	dptr,#_lcdgotoxy_temp_address_1_1
                            941 ;	Peephole 181	changed mov to clr
   0112 E4                  942 	clr	a
   0113 F0                  943 	movx	@dptr,a
                            944 ;	LCD.c:107: if(row == 0){
                            945 ;	genAssign
   0114 90s00r06            946 	mov	dptr,#_lcdgotoxy_row_1_1
   0117 E0                  947 	movx	a,@dptr
                            948 ;	genIfx
   0118 FA                  949 	mov	r2,a
                            950 ;	Peephole 105	removed redundant mov
                            951 ;	genIfxJump
                            952 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0119 70 0E               953 	jnz	00110$
                            954 ;	Peephole 300	removed redundant label 00118$
                            955 ;	LCD.c:108: temp_address  = 0x80 + column;
                            956 ;	genAssign
   011B 90s00r05            957 	mov	dptr,#_lcdgotoxy_PARM_2
   011E E0                  958 	movx	a,@dptr
   011F FB                  959 	mov	r3,a
                            960 ;	genPlus
   0120 90s00r07            961 	mov	dptr,#_lcdgotoxy_temp_address_1_1
                            962 ;     genPlusIncr
   0123 74 80               963 	mov	a,#0x80
                            964 ;	Peephole 236.a	used r3 instead of ar3
   0125 2B                  965 	add	a,r3
   0126 F0                  966 	movx	@dptr,a
                            967 ;	Peephole 112.b	changed ljmp to sjmp
   0127 80 31               968 	sjmp	00111$
   0129                     969 00110$:
                            970 ;	LCD.c:110: else if(row == 1){
                            971 ;	genCmpEq
                            972 ;	gencjneshort
                            973 ;	Peephole 112.b	changed ljmp to sjmp
                            974 ;	Peephole 198.b	optimized misc jump sequence
   0129 BA 01 0E            975 	cjne	r2,#0x01,00107$
                            976 ;	Peephole 200.b	removed redundant sjmp
                            977 ;	Peephole 300	removed redundant label 00119$
                            978 ;	Peephole 300	removed redundant label 00120$
                            979 ;	LCD.c:111: temp_address = 0xC0 + column;
                            980 ;	genAssign
   012C 90s00r05            981 	mov	dptr,#_lcdgotoxy_PARM_2
   012F E0                  982 	movx	a,@dptr
   0130 FB                  983 	mov	r3,a
                            984 ;	genPlus
   0131 90s00r07            985 	mov	dptr,#_lcdgotoxy_temp_address_1_1
                            986 ;     genPlusIncr
   0134 74 C0               987 	mov	a,#0xC0
                            988 ;	Peephole 236.a	used r3 instead of ar3
   0136 2B                  989 	add	a,r3
   0137 F0                  990 	movx	@dptr,a
                            991 ;	Peephole 112.b	changed ljmp to sjmp
   0138 80 20               992 	sjmp	00111$
   013A                     993 00107$:
                            994 ;	LCD.c:113: else if(row == 2){
                            995 ;	genCmpEq
                            996 ;	gencjneshort
                            997 ;	Peephole 112.b	changed ljmp to sjmp
                            998 ;	Peephole 198.b	optimized misc jump sequence
   013A BA 02 0E            999 	cjne	r2,#0x02,00104$
                           1000 ;	Peephole 200.b	removed redundant sjmp
                           1001 ;	Peephole 300	removed redundant label 00121$
                           1002 ;	Peephole 300	removed redundant label 00122$
                           1003 ;	LCD.c:114: temp_address  = 0x90 + column;
                           1004 ;	genAssign
   013D 90s00r05           1005 	mov	dptr,#_lcdgotoxy_PARM_2
   0140 E0                 1006 	movx	a,@dptr
   0141 FB                 1007 	mov	r3,a
                           1008 ;	genPlus
   0142 90s00r07           1009 	mov	dptr,#_lcdgotoxy_temp_address_1_1
                           1010 ;     genPlusIncr
   0145 74 90              1011 	mov	a,#0x90
                           1012 ;	Peephole 236.a	used r3 instead of ar3
   0147 2B                 1013 	add	a,r3
   0148 F0                 1014 	movx	@dptr,a
                           1015 ;	Peephole 112.b	changed ljmp to sjmp
   0149 80 0F              1016 	sjmp	00111$
   014B                    1017 00104$:
                           1018 ;	LCD.c:116: else if(row == 3){
                           1019 ;	genCmpEq
                           1020 ;	gencjneshort
                           1021 ;	Peephole 112.b	changed ljmp to sjmp
                           1022 ;	Peephole 198.b	optimized misc jump sequence
   014B BA 03 0C           1023 	cjne	r2,#0x03,00111$
                           1024 ;	Peephole 200.b	removed redundant sjmp
                           1025 ;	Peephole 300	removed redundant label 00123$
                           1026 ;	Peephole 300	removed redundant label 00124$
                           1027 ;	LCD.c:117: temp_address = 0xD0 + column;
                           1028 ;	genAssign
   014E 90s00r05           1029 	mov	dptr,#_lcdgotoxy_PARM_2
   0151 E0                 1030 	movx	a,@dptr
   0152 FA                 1031 	mov	r2,a
                           1032 ;	genPlus
   0153 90s00r07           1033 	mov	dptr,#_lcdgotoxy_temp_address_1_1
                           1034 ;     genPlusIncr
   0156 74 D0              1035 	mov	a,#0xD0
                           1036 ;	Peephole 236.a	used r2 instead of ar2
   0158 2A                 1037 	add	a,r2
   0159 F0                 1038 	movx	@dptr,a
   015A                    1039 00111$:
                           1040 ;	LCD.c:119: lcdgotoaddr(temp_address);
                           1041 ;	genAssign
   015A 90s00r07           1042 	mov	dptr,#_lcdgotoxy_temp_address_1_1
   015D E0                 1043 	movx	a,@dptr
                           1044 ;	genCall
   015E FA                 1045 	mov	r2,a
                           1046 ;	Peephole 244.c	loading dpl from a instead of r2
   015F F5 82              1047 	mov	dpl,a
                           1048 ;	Peephole 253.b	replaced lcall/ret with ljmp
   0161 02s00r8F           1049 	ljmp	_lcdgotoaddr
                           1050 ;
                           1051 ;------------------------------------------------------------
                           1052 ;Allocation info for local variables in function 'read_cursor_addr'
                           1053 ;------------------------------------------------------------
                           1054 ;temp_rx                   Allocated with name '_read_cursor_addr_temp_rx_1_1'
                           1055 ;------------------------------------------------------------
                           1056 ;	LCD.c:125: unsigned char read_cursor_addr() __critical{
                           1057 ;	-----------------------------------------
                           1058 ;	 function read_cursor_addr
                           1059 ;	-----------------------------------------
   0164                    1060 _read_cursor_addr:
   0164 D3                 1061 	setb	c
   0165 10 AF 01           1062 	jbc	ea,00103$
   0168 C3                 1063 	clr	c
   0169                    1064 00103$:
   0169 C0 D0              1065 	push	psw
                           1066 ;	LCD.c:127: check_busy_flag();
                           1067 ;	genCall
   016B 12s00r00           1068 	lcall	_check_busy_flag
                           1069 ;	LCD.c:128: LCD_RS = 0;
                           1070 ;	genAssign
   016E C2 93              1071 	clr	_P1_3
                           1072 ;	LCD.c:129: LCD_RW = 1;
                           1073 ;	genAssign
   0170 D2 94              1074 	setb	_P1_4
                           1075 ;	LCD.c:130: temp_rx = *RD_LCD_INSTR;
                           1076 ;	genPointerGet
                           1077 ;	genFarPointerGet
                           1078 ;	Peephole 182.b	used 16 bit load of dptr
   0172 90 80 11           1079 	mov	dptr,#0x8011
   0175 E0                 1080 	movx	a,@dptr
   0176 FA                 1081 	mov	r2,a
                           1082 ;	LCD.c:131: temp_rx = temp_rx & 0x7F;
                           1083 ;	genAnd
   0177 74 7F              1084 	mov	a,#0x7F
   0179 5A                 1085 	anl	a,r2
                           1086 ;	LCD.c:132: temp_rx = 0x80 | temp_rx;
                           1087 ;	genOr
   017A 44 80              1088 	orl	a,#0x80
                           1089 ;	LCD.c:134: return temp_rx;
                           1090 ;	genRet
   017C FA                 1091 	mov	r2,a
                           1092 ;	Peephole 244.c	loading dpl from a instead of r2
   017D F5 82              1093 	mov	dpl,a
                           1094 ;	Peephole 300	removed redundant label 00101$
   017F D0 D0              1095 	pop	psw
   0181 92 AF              1096 	mov	ea,c
   0183 22                 1097 	ret
                           1098 ;------------------------------------------------------------
                           1099 ;Allocation info for local variables in function 'wrap_cursor'
                           1100 ;------------------------------------------------------------
                           1101 ;cursor_addr               Allocated with name '_wrap_cursor_cursor_addr_1_1'
                           1102 ;------------------------------------------------------------
                           1103 ;	LCD.c:138: unsigned char wrap_cursor(unsigned char cursor_addr){
                           1104 ;	-----------------------------------------
                           1105 ;	 function wrap_cursor
                           1106 ;	-----------------------------------------
   0184                    1107 _wrap_cursor:
                           1108 ;	genReceive
   0184 E5 82              1109 	mov	a,dpl
   0186 90s00r08           1110 	mov	dptr,#_wrap_cursor_cursor_addr_1_1
   0189 F0                 1111 	movx	@dptr,a
                           1112 ;	LCD.c:139: if(cursor_addr == 0x8F){
                           1113 ;	genAssign
   018A 90s00r08           1114 	mov	dptr,#_wrap_cursor_cursor_addr_1_1
   018D E0                 1115 	movx	a,@dptr
   018E FA                 1116 	mov	r2,a
                           1117 ;	genCmpEq
                           1118 ;	gencjneshort
                           1119 ;	Peephole 112.b	changed ljmp to sjmp
                           1120 ;	Peephole 198.b	optimized misc jump sequence
   018F BA 8F 0A           1121 	cjne	r2,#0x8F,00110$
                           1122 ;	Peephole 200.b	removed redundant sjmp
                           1123 ;	Peephole 300	removed redundant label 00118$
                           1124 ;	Peephole 300	removed redundant label 00119$
                           1125 ;	LCD.c:140: lcdgotoaddr(0xC0);
                           1126 ;	genCall
   0192 75 82 C0           1127 	mov	dpl,#0xC0
   0195 12s00r8F           1128 	lcall	_lcdgotoaddr
                           1129 ;	LCD.c:141: return 0xC0;
                           1130 ;	genRet
   0198 75 82 C0           1131 	mov	dpl,#0xC0
                           1132 ;	Peephole 112.b	changed ljmp to sjmp
                           1133 ;	Peephole 251.b	replaced sjmp to ret with ret
   019B 22                 1134 	ret
   019C                    1135 00110$:
                           1136 ;	LCD.c:143: else if(cursor_addr == 0xCF){
                           1137 ;	genCmpEq
                           1138 ;	gencjneshort
                           1139 ;	Peephole 112.b	changed ljmp to sjmp
                           1140 ;	Peephole 198.b	optimized misc jump sequence
   019C BA CF 0A           1141 	cjne	r2,#0xCF,00107$
                           1142 ;	Peephole 200.b	removed redundant sjmp
                           1143 ;	Peephole 300	removed redundant label 00120$
                           1144 ;	Peephole 300	removed redundant label 00121$
                           1145 ;	LCD.c:144: lcdgotoaddr(0x90);
                           1146 ;	genCall
   019F 75 82 90           1147 	mov	dpl,#0x90
   01A2 12s00r8F           1148 	lcall	_lcdgotoaddr
                           1149 ;	LCD.c:145: return 0x90;
                           1150 ;	genRet
   01A5 75 82 90           1151 	mov	dpl,#0x90
                           1152 ;	Peephole 112.b	changed ljmp to sjmp
                           1153 ;	Peephole 251.b	replaced sjmp to ret with ret
   01A8 22                 1154 	ret
   01A9                    1155 00107$:
                           1156 ;	LCD.c:147: else if(cursor_addr == 0x9F){
                           1157 ;	genCmpEq
                           1158 ;	gencjneshort
                           1159 ;	Peephole 112.b	changed ljmp to sjmp
                           1160 ;	Peephole 198.b	optimized misc jump sequence
   01A9 BA 9F 0A           1161 	cjne	r2,#0x9F,00104$
                           1162 ;	Peephole 200.b	removed redundant sjmp
                           1163 ;	Peephole 300	removed redundant label 00122$
                           1164 ;	Peephole 300	removed redundant label 00123$
                           1165 ;	LCD.c:148: lcdgotoaddr(0xD0);
                           1166 ;	genCall
   01AC 75 82 D0           1167 	mov	dpl,#0xD0
   01AF 12s00r8F           1168 	lcall	_lcdgotoaddr
                           1169 ;	LCD.c:149: return 0xD0;
                           1170 ;	genRet
   01B2 75 82 D0           1171 	mov	dpl,#0xD0
                           1172 ;	Peephole 112.b	changed ljmp to sjmp
                           1173 ;	Peephole 251.b	replaced sjmp to ret with ret
   01B5 22                 1174 	ret
   01B6                    1175 00104$:
                           1176 ;	LCD.c:151: else if(cursor_addr == end_address){
                           1177 ;	genAssign
   01B6 90s00r00           1178 	mov	dptr,#_end_address
   01B9 E0                 1179 	movx	a,@dptr
   01BA FB                 1180 	mov	r3,a
   01BB A3                 1181 	inc	dptr
   01BC E0                 1182 	movx	a,@dptr
   01BD FC                 1183 	mov	r4,a
                           1184 ;	genCast
   01BE 8A 05              1185 	mov	ar5,r2
   01C0 7E 00              1186 	mov	r6,#0x00
                           1187 ;	genCmpEq
                           1188 ;	gencjneshort
   01C2 ED                 1189 	mov	a,r5
                           1190 ;	Peephole 112.b	changed ljmp to sjmp
                           1191 ;	Peephole 197.b	optimized misc jump sequence
   01C3 B5 03 0E           1192 	cjne	a,ar3,00108$
   01C6 EE                 1193 	mov	a,r6
   01C7 B5 04 0A           1194 	cjne	a,ar4,00108$
                           1195 ;	Peephole 200.b	removed redundant sjmp
                           1196 ;	Peephole 300	removed redundant label 00124$
                           1197 ;	Peephole 300	removed redundant label 00125$
                           1198 ;	LCD.c:152: lcdgotoaddr(0x80);
                           1199 ;	genCall
   01CA 75 82 80           1200 	mov	dpl,#0x80
   01CD 12s00r8F           1201 	lcall	_lcdgotoaddr
                           1202 ;	LCD.c:153: return 0x80;
                           1203 ;	genRet
   01D0 75 82 80           1204 	mov	dpl,#0x80
                           1205 ;	Peephole 112.b	changed ljmp to sjmp
                           1206 ;	LCD.c:155: return cursor_addr;
                           1207 ;	genRet
                           1208 ;	Peephole 237.a	removed sjmp to ret
   01D3 22                 1209 	ret
   01D4                    1210 00108$:
   01D4 8A 82              1211 	mov	dpl,r2
                           1212 ;	Peephole 300	removed redundant label 00112$
   01D6 22                 1213 	ret
                           1214 ;------------------------------------------------------------
                           1215 ;Allocation info for local variables in function 'lcdclear'
                           1216 ;------------------------------------------------------------
                           1217 ;------------------------------------------------------------
                           1218 ;	LCD.c:159: void lcdclear(){
                           1219 ;	-----------------------------------------
                           1220 ;	 function lcdclear
                           1221 ;	-----------------------------------------
   01D7                    1222 _lcdclear:
                           1223 ;	LCD.c:160: check_busy_flag();
                           1224 ;	genCall
   01D7 12s00r00           1225 	lcall	_check_busy_flag
                           1226 ;	LCD.c:161: CMD_Write(0x01);
                           1227 ;	genCall
   01DA 75 82 01           1228 	mov	dpl,#0x01
                           1229 ;	Peephole 253.b	replaced lcall/ret with ljmp
   01DD 02s00r22           1230 	ljmp	_CMD_Write
                           1231 ;
                           1232 ;------------------------------------------------------------
                           1233 ;Allocation info for local variables in function 'lcdputch'
                           1234 ;------------------------------------------------------------
                           1235 ;cc                        Allocated with name '_lcdputch_cc_1_1'
                           1236 ;temp_addr                 Allocated with name '_lcdputch_temp_addr_1_1'
                           1237 ;------------------------------------------------------------
                           1238 ;	LCD.c:168: void lcdputch(unsigned char cc){
                           1239 ;	-----------------------------------------
                           1240 ;	 function lcdputch
                           1241 ;	-----------------------------------------
   01E0                    1242 _lcdputch:
                           1243 ;	genReceive
   01E0 E5 82              1244 	mov	a,dpl
   01E2 90s00r09           1245 	mov	dptr,#_lcdputch_cc_1_1
   01E5 F0                 1246 	movx	@dptr,a
                           1247 ;	LCD.c:170: check_busy_flag();
                           1248 ;	genCall
   01E6 12s00r00           1249 	lcall	_check_busy_flag
                           1250 ;	LCD.c:174: if(cc != '\0' && cc != '\r' && cc!= '\n'){
                           1251 ;	genAssign
   01E9 90s00r09           1252 	mov	dptr,#_lcdputch_cc_1_1
   01EC E0                 1253 	movx	a,@dptr
                           1254 ;	genCmpEq
                           1255 ;	gencjneshort
                           1256 ;	Peephole 112.b	changed ljmp to sjmp
   01ED FA                 1257 	mov	r2,a
                           1258 ;	Peephole 115.b	jump optimization
   01EE 60 47              1259 	jz	00105$
                           1260 ;	Peephole 300	removed redundant label 00110$
                           1261 ;	genCmpEq
                           1262 ;	gencjneshort
   01F0 BA 0D 01           1263 	cjne	r2,#0x0D,00111$
                           1264 ;	Peephole 112.b	changed ljmp to sjmp
                           1265 ;	Peephole 251.b	replaced sjmp to ret with ret
   01F3 22                 1266 	ret
   01F4                    1267 00111$:
                           1268 ;	genCmpEq
                           1269 ;	gencjneshort
   01F4 BA 0A 01           1270 	cjne	r2,#0x0A,00112$
                           1271 ;	Peephole 112.b	changed ljmp to sjmp
                           1272 ;	Peephole 251.b	replaced sjmp to ret with ret
   01F7 22                 1273 	ret
   01F8                    1274 00112$:
                           1275 ;	LCD.c:175: lcdgotoaddr(lcd_address);
                           1276 ;	genAssign
   01F8 90s00r00           1277 	mov	dptr,#_lcd_address
   01FB E0                 1278 	movx	a,@dptr
                           1279 ;	genCall
   01FC FB                 1280 	mov	r3,a
                           1281 ;	Peephole 244.c	loading dpl from a instead of r3
   01FD F5 82              1282 	mov	dpl,a
   01FF C0 02              1283 	push	ar2
   0201 12s00r8F           1284 	lcall	_lcdgotoaddr
   0204 D0 02              1285 	pop	ar2
                           1286 ;	LCD.c:176: temp_addr = read_cursor_addr();
                           1287 ;	genCall
   0206 C0 02              1288 	push	ar2
   0208 12s01r64           1289 	lcall	_read_cursor_addr
   020B AB 82              1290 	mov	r3,dpl
   020D D0 02              1291 	pop	ar2
                           1292 ;	LCD.c:187: LCD_RS = 1;
                           1293 ;	genAssign
   020F D2 93              1294 	setb	_P1_3
                           1295 ;	LCD.c:190: LCD_RW = 0;
                           1296 ;	genAssign
   0211 C2 94              1297 	clr	_P1_4
                           1298 ;	LCD.c:191: delay_ms(2);
                           1299 ;	genCall
                           1300 ;	Peephole 182.b	used 16 bit load of dptr
   0213 90 00 02           1301 	mov	dptr,#0x0002
   0216 C0 02              1302 	push	ar2
   0218 C0 03              1303 	push	ar3
   021A 12s00r00           1304 	lcall	_delay_ms
   021D D0 03              1305 	pop	ar3
   021F D0 02              1306 	pop	ar2
                           1307 ;	LCD.c:192: *WR_LCD_INSTR = cc;
                           1308 ;	genAssign
                           1309 ;	Peephole 182.b	used 16 bit load of dptr
   0221 90 80 12           1310 	mov	dptr,#0x8012
                           1311 ;	genPointerSet
                           1312 ;     genFarPointerSet
   0224 EA                 1313 	mov	a,r2
   0225 F0                 1314 	movx	@dptr,a
                           1315 ;	LCD.c:193: lcd_address++;
                           1316 ;	genAssign
   0226 90s00r00           1317 	mov	dptr,#_lcd_address
   0229 E0                 1318 	movx	a,@dptr
   022A FA                 1319 	mov	r2,a
                           1320 ;	genPlus
   022B 90s00r00           1321 	mov	dptr,#_lcd_address
                           1322 ;     genPlusIncr
   022E 74 01              1323 	mov	a,#0x01
                           1324 ;	Peephole 236.a	used r2 instead of ar2
   0230 2A                 1325 	add	a,r2
   0231 F0                 1326 	movx	@dptr,a
                           1327 ;	LCD.c:194: wrap_cursor(temp_addr);
                           1328 ;	genCall
   0232 8B 82              1329 	mov	dpl,r3
                           1330 ;	Peephole 253.c	replaced lcall with ljmp
   0234 02s01r84           1331 	ljmp	_wrap_cursor
   0237                    1332 00105$:
   0237 22                 1333 	ret
                           1334 ;------------------------------------------------------------
                           1335 ;Allocation info for local variables in function 'lcdputchcustom'
                           1336 ;------------------------------------------------------------
                           1337 ;cc                        Allocated with name '_lcdputchcustom_cc_1_1'
                           1338 ;------------------------------------------------------------
                           1339 ;	LCD.c:200: void lcdputchcustom(unsigned char cc){
                           1340 ;	-----------------------------------------
                           1341 ;	 function lcdputchcustom
                           1342 ;	-----------------------------------------
   0238                    1343 _lcdputchcustom:
                           1344 ;	genReceive
   0238 E5 82              1345 	mov	a,dpl
   023A 90s00r0A           1346 	mov	dptr,#_lcdputchcustom_cc_1_1
   023D F0                 1347 	movx	@dptr,a
                           1348 ;	LCD.c:201: check_busy_flag();
                           1349 ;	genCall
   023E 12s00r00           1350 	lcall	_check_busy_flag
                           1351 ;	LCD.c:202: LCD_RS = 1;
                           1352 ;	genAssign
   0241 D2 93              1353 	setb	_P1_3
                           1354 ;	LCD.c:205: LCD_RW = 0;
                           1355 ;	genAssign
   0243 C2 94              1356 	clr	_P1_4
                           1357 ;	LCD.c:206: delay_ms(2);
                           1358 ;	genCall
                           1359 ;	Peephole 182.b	used 16 bit load of dptr
   0245 90 00 02           1360 	mov	dptr,#0x0002
   0248 12s00r00           1361 	lcall	_delay_ms
                           1362 ;	LCD.c:210: *WR_LCD_INSTR = cc;
                           1363 ;	genAssign
   024B 7A 12              1364 	mov	r2,#0x12
   024D 7B 80              1365 	mov	r3,#0x80
                           1366 ;	genAssign
   024F 90s00r0A           1367 	mov	dptr,#_lcdputchcustom_cc_1_1
   0252 E0                 1368 	movx	a,@dptr
                           1369 ;	genPointerSet
                           1370 ;     genFarPointerSet
   0253 FC                 1371 	mov	r4,a
   0254 8A 82              1372 	mov	dpl,r2
   0256 8B 83              1373 	mov	dph,r3
                           1374 ;	Peephole 136	removed redundant move
   0258 F0                 1375 	movx	@dptr,a
                           1376 ;	Peephole 300	removed redundant label 00101$
   0259 22                 1377 	ret
                           1378 ;------------------------------------------------------------
                           1379 ;Allocation info for local variables in function 'lcdputchtimer'
                           1380 ;------------------------------------------------------------
                           1381 ;cc                        Allocated with name '_lcdputchtimer_cc_1_1'
                           1382 ;------------------------------------------------------------
                           1383 ;	LCD.c:216: void lcdputchtimer(unsigned char cc){
                           1384 ;	-----------------------------------------
                           1385 ;	 function lcdputchtimer
                           1386 ;	-----------------------------------------
   025A                    1387 _lcdputchtimer:
                           1388 ;	genReceive
   025A E5 82              1389 	mov	a,dpl
   025C 90s00r0B           1390 	mov	dptr,#_lcdputchtimer_cc_1_1
   025F F0                 1391 	movx	@dptr,a
                           1392 ;	LCD.c:217: check_busy_flag();
                           1393 ;	genCall
   0260 12s00r00           1394 	lcall	_check_busy_flag
                           1395 ;	LCD.c:218: LCD_RS = 1;
                           1396 ;	genAssign
   0263 D2 93              1397 	setb	_P1_3
                           1398 ;	LCD.c:221: LCD_RW = 0;
                           1399 ;	genAssign
   0265 C2 94              1400 	clr	_P1_4
                           1401 ;	LCD.c:222: delay_ms(2);
                           1402 ;	genCall
                           1403 ;	Peephole 182.b	used 16 bit load of dptr
   0267 90 00 02           1404 	mov	dptr,#0x0002
   026A 12s00r00           1405 	lcall	_delay_ms
                           1406 ;	LCD.c:225: if(cc != '\0' && cc != '\r' && cc!= '\n'){
                           1407 ;	genAssign
   026D 90s00r0B           1408 	mov	dptr,#_lcdputchtimer_cc_1_1
   0270 E0                 1409 	movx	a,@dptr
                           1410 ;	genCmpEq
                           1411 ;	gencjneshort
                           1412 ;	Peephole 112.b	changed ljmp to sjmp
   0271 FA                 1413 	mov	r2,a
                           1414 ;	Peephole 115.b	jump optimization
   0272 60 0D              1415 	jz	00105$
                           1416 ;	Peephole 300	removed redundant label 00110$
                           1417 ;	genCmpEq
                           1418 ;	gencjneshort
   0274 BA 0D 01           1419 	cjne	r2,#0x0D,00111$
                           1420 ;	Peephole 112.b	changed ljmp to sjmp
                           1421 ;	Peephole 251.b	replaced sjmp to ret with ret
   0277 22                 1422 	ret
   0278                    1423 00111$:
                           1424 ;	genCmpEq
                           1425 ;	gencjneshort
   0278 BA 0A 01           1426 	cjne	r2,#0x0A,00112$
                           1427 ;	Peephole 112.b	changed ljmp to sjmp
                           1428 ;	Peephole 251.b	replaced sjmp to ret with ret
   027B 22                 1429 	ret
   027C                    1430 00112$:
                           1431 ;	LCD.c:226: *WR_LCD_INSTR = cc;
                           1432 ;	genAssign
                           1433 ;	Peephole 182.b	used 16 bit load of dptr
   027C 90 80 12           1434 	mov	dptr,#0x8012
                           1435 ;	genPointerSet
                           1436 ;     genFarPointerSet
   027F EA                 1437 	mov	a,r2
   0280 F0                 1438 	movx	@dptr,a
   0281                    1439 00105$:
   0281 22                 1440 	ret
                           1441 ;------------------------------------------------------------
                           1442 ;Allocation info for local variables in function 'lcdputstr'
                           1443 ;------------------------------------------------------------
                           1444 ;ss                        Allocated with name '_lcdputstr_ss_1_1'
                           1445 ;i                         Allocated with name '_lcdputstr_i_1_1'
                           1446 ;temp_char                 Allocated with name '_lcdputstr_temp_char_1_1'
                           1447 ;temp_addr                 Allocated with name '_lcdputstr_temp_addr_1_1'
                           1448 ;wrap                      Allocated with name '_lcdputstr_wrap_1_1'
                           1449 ;------------------------------------------------------------
                           1450 ;	LCD.c:233: void lcdputstr(char *ss){
                           1451 ;	-----------------------------------------
                           1452 ;	 function lcdputstr
                           1453 ;	-----------------------------------------
   0282                    1454 _lcdputstr:
                           1455 ;	genReceive
   0282 AA F0              1456 	mov	r2,b
   0284 AB 83              1457 	mov	r3,dph
   0286 E5 82              1458 	mov	a,dpl
   0288 90s00r0C           1459 	mov	dptr,#_lcdputstr_ss_1_1
   028B F0                 1460 	movx	@dptr,a
   028C A3                 1461 	inc	dptr
   028D EB                 1462 	mov	a,r3
   028E F0                 1463 	movx	@dptr,a
   028F A3                 1464 	inc	dptr
   0290 EA                 1465 	mov	a,r2
   0291 F0                 1466 	movx	@dptr,a
                           1467 ;	LCD.c:235: print_flag = 0x00;
                           1468 ;	genAssign
   0292 90s00r00           1469 	mov	dptr,#_print_flag
                           1470 ;	Peephole 181	changed mov to clr
   0295 E4                 1471 	clr	a
   0296 F0                 1472 	movx	@dptr,a
                           1473 ;	LCD.c:238: while(1){
                           1474 ;	genAssign
   0297 90s00r0C           1475 	mov	dptr,#_lcdputstr_ss_1_1
   029A E0                 1476 	movx	a,@dptr
   029B FA                 1477 	mov	r2,a
   029C A3                 1478 	inc	dptr
   029D E0                 1479 	movx	a,@dptr
   029E FB                 1480 	mov	r3,a
   029F A3                 1481 	inc	dptr
   02A0 E0                 1482 	movx	a,@dptr
   02A1 FC                 1483 	mov	r4,a
                           1484 ;	genAssign
   02A2 7D 00              1485 	mov	r5,#0x00
   02A4                    1486 00105$:
                           1487 ;	LCD.c:239: temp_char = *(ss + i);
                           1488 ;	genPlus
                           1489 ;	Peephole 236.g	used r5 instead of ar5
   02A4 ED                 1490 	mov	a,r5
                           1491 ;	Peephole 236.a	used r2 instead of ar2
   02A5 2A                 1492 	add	a,r2
   02A6 FE                 1493 	mov	r6,a
                           1494 ;	Peephole 181	changed mov to clr
   02A7 E4                 1495 	clr	a
                           1496 ;	Peephole 236.b	used r3 instead of ar3
   02A8 3B                 1497 	addc	a,r3
   02A9 FF                 1498 	mov	r7,a
   02AA 8C 00              1499 	mov	ar0,r4
                           1500 ;	genPointerGet
                           1501 ;	genGenPointerGet
   02AC 8E 82              1502 	mov	dpl,r6
   02AE 8F 83              1503 	mov	dph,r7
   02B0 88 F0              1504 	mov	b,r0
   02B2 12s00r00           1505 	lcall	__gptrget
                           1506 ;	LCD.c:240: if(temp_char == '\0'){
                           1507 ;	genIfx
   02B5 FE                 1508 	mov	r6,a
                           1509 ;	Peephole 105	removed redundant mov
                           1510 ;	genIfxJump
                           1511 ;	Peephole 108.c	removed ljmp by inverse jump logic
   02B6 60 18              1512 	jz	00106$
                           1513 ;	Peephole 300	removed redundant label 00112$
                           1514 ;	LCD.c:253: lcdputch(temp_char);
                           1515 ;	genCall
   02B8 8E 82              1516 	mov	dpl,r6
   02BA C0 02              1517 	push	ar2
   02BC C0 03              1518 	push	ar3
   02BE C0 04              1519 	push	ar4
   02C0 C0 05              1520 	push	ar5
   02C2 12s01rE0           1521 	lcall	_lcdputch
   02C5 D0 05              1522 	pop	ar5
   02C7 D0 04              1523 	pop	ar4
   02C9 D0 03              1524 	pop	ar3
   02CB D0 02              1525 	pop	ar2
                           1526 ;	LCD.c:256: i++;
                           1527 ;	genPlus
                           1528 ;     genPlusIncr
   02CD 0D                 1529 	inc	r5
                           1530 ;	Peephole 112.b	changed ljmp to sjmp
   02CE 80 D4              1531 	sjmp	00105$
   02D0                    1532 00106$:
                           1533 ;	LCD.c:259: print_flag = 0x01;
                           1534 ;	genAssign
   02D0 90s00r00           1535 	mov	dptr,#_print_flag
   02D3 74 01              1536 	mov	a,#0x01
   02D5 F0                 1537 	movx	@dptr,a
                           1538 ;	Peephole 300	removed redundant label 00107$
   02D6 22                 1539 	ret
                           1540 ;------------------------------------------------------------
                           1541 ;Allocation info for local variables in function 'lcd_cgram_hexdump'
                           1542 ;------------------------------------------------------------
                           1543 ;i                         Allocated with name '_lcd_cgram_hexdump_i_1_1'
                           1544 ;j                         Allocated with name '_lcd_cgram_hexdump_j_1_1'
                           1545 ;temp                      Allocated with name '_lcd_cgram_hexdump_temp_1_1'
                           1546 ;------------------------------------------------------------
                           1547 ;	LCD.c:264: void lcd_cgram_hexdump(void){
                           1548 ;	-----------------------------------------
                           1549 ;	 function lcd_cgram_hexdump
                           1550 ;	-----------------------------------------
   02D7                    1551 _lcd_cgram_hexdump:
                           1552 ;	LCD.c:266: printf_tiny("\rHEX DUMP FOR LCD CGRAM.\n\r(All values are in HEX FORMAT)\n");
                           1553 ;	genIpush
   02D7 74r00              1554 	mov	a,#__str_0
   02D9 C0 E0              1555 	push	acc
   02DB 74s00              1556 	mov	a,#(__str_0 >> 8)
   02DD C0 E0              1557 	push	acc
                           1558 ;	genCall
   02DF 12s00r00           1559 	lcall	_printf_tiny
   02E2 15 81              1560 	dec	sp
   02E4 15 81              1561 	dec	sp
                           1562 ;	LCD.c:267: for(i=0; i<4; i++){
                           1563 ;	genAssign
   02E6 7A 00              1564 	mov	r2,#0x00
   02E8                    1565 00105$:
                           1566 ;	genCmpLt
                           1567 ;	genCmp
   02E8 BA 04 00           1568 	cjne	r2,#0x04,00117$
   02EB                    1569 00117$:
                           1570 ;	genIfxJump
   02EB 40 03              1571 	jc	00118$
   02ED 02s04r05           1572 	ljmp	00108$
   02F0                    1573 00118$:
                           1574 ;	LCD.c:268: printf_tiny("\n");
                           1575 ;	genIpush
   02F0 C0 02              1576 	push	ar2
   02F2 74r3A              1577 	mov	a,#__str_1
   02F4 C0 E0              1578 	push	acc
   02F6 74s00              1579 	mov	a,#(__str_1 >> 8)
   02F8 C0 E0              1580 	push	acc
                           1581 ;	genCall
   02FA 12s00r00           1582 	lcall	_printf_tiny
   02FD 15 81              1583 	dec	sp
   02FF 15 81              1584 	dec	sp
   0301 D0 02              1585 	pop	ar2
                           1586 ;	LCD.c:269: printf_tiny("\r");
                           1587 ;	genIpush
   0303 C0 02              1588 	push	ar2
   0305 74r3C              1589 	mov	a,#__str_2
   0307 C0 E0              1590 	push	acc
   0309 74s00              1591 	mov	a,#(__str_2 >> 8)
   030B C0 E0              1592 	push	acc
                           1593 ;	genCall
   030D 12s00r00           1594 	lcall	_printf_tiny
   0310 15 81              1595 	dec	sp
   0312 15 81              1596 	dec	sp
   0314 D0 02              1597 	pop	ar2
                           1598 ;	LCD.c:270: temp = (i*16);
                           1599 ;	genLeftShift
                           1600 ;	genLeftShiftLiteral
                           1601 ;	genlshOne
   0316 EA                 1602 	mov	a,r2
   0317 C4                 1603 	swap	a
   0318 54 F0              1604 	anl	a,#0xf0
   031A FB                 1605 	mov	r3,a
                           1606 ;	LCD.c:271: my_print(temp, 2);
                           1607 ;	genCast
   031B 8B 04              1608 	mov	ar4,r3
   031D 7D 00              1609 	mov	r5,#0x00
                           1610 ;	genAssign
   031F 90s00r00           1611 	mov	dptr,#_my_print_PARM_2
   0322 74 02              1612 	mov	a,#0x02
   0324 F0                 1613 	movx	@dptr,a
                           1614 ;	genCall
   0325 8C 82              1615 	mov	dpl,r4
   0327 8D 83              1616 	mov	dph,r5
   0329 C0 02              1617 	push	ar2
   032B C0 03              1618 	push	ar3
   032D 12s00r00           1619 	lcall	_my_print
   0330 D0 03              1620 	pop	ar3
   0332 D0 02              1621 	pop	ar2
                           1622 ;	LCD.c:272: printf_tiny(": ");
                           1623 ;	genIpush
   0334 C0 02              1624 	push	ar2
   0336 C0 03              1625 	push	ar3
   0338 74r3E              1626 	mov	a,#__str_3
   033A C0 E0              1627 	push	acc
   033C 74s00              1628 	mov	a,#(__str_3 >> 8)
   033E C0 E0              1629 	push	acc
                           1630 ;	genCall
   0340 12s00r00           1631 	lcall	_printf_tiny
   0343 15 81              1632 	dec	sp
   0345 15 81              1633 	dec	sp
   0347 D0 03              1634 	pop	ar3
   0349 D0 02              1635 	pop	ar2
                           1636 ;	LCD.c:273: for(j=16*i; j<((i*16)+16); j++){
                           1637 ;	genAssign
                           1638 ;	genMult
                           1639 ;	genMultOneByte
                           1640 ;	peephole 177.h	optimized mov sequence
   034B EA                 1641 	mov	a,r2
                           1642 ;	Peephole 236.i	used r4 instead of ar4
   034C FC                 1643 	mov	r4,a
   034D 75 F0 10           1644 	mov	b,#0x10
   0350 A4                 1645 	mul	ab
                           1646 ;	genPlus
                           1647 ;     genPlusIncr
   0351 24 10              1648 	add	a,#0x10
   0353 FD                 1649 	mov	r5,a
                           1650 ;	Peephole 181	changed mov to clr
   0354 E4                 1651 	clr	a
   0355 35 F0              1652 	addc	a,b
   0357 FE                 1653 	mov	r6,a
                           1654 ;	genAssign
   0358                    1655 00101$:
                           1656 ;	genCast
   0358 8B 07              1657 	mov	ar7,r3
   035A 78 00              1658 	mov	r0,#0x00
                           1659 ;	genCmpLt
                           1660 ;	genCmp
   035C C3                 1661 	clr	c
   035D EF                 1662 	mov	a,r7
   035E 9D                 1663 	subb	a,r5
   035F E8                 1664 	mov	a,r0
   0360 64 80              1665 	xrl	a,#0x80
   0362 8E F0              1666 	mov	b,r6
   0364 63 F0 80           1667 	xrl	b,#0x80
   0367 95 F0              1668 	subb	a,b
                           1669 ;	genIfxJump
   0369 40 03              1670 	jc	00119$
   036B 02s03rEB           1671 	ljmp	00104$
   036E                    1672 00119$:
                           1673 ;	LCD.c:274: check_busy_flag();
                           1674 ;	genCall
   036E C0 03              1675 	push	ar3
   0370 C0 04              1676 	push	ar4
   0372 C0 05              1677 	push	ar5
   0374 C0 06              1678 	push	ar6
   0376 12s00r00           1679 	lcall	_check_busy_flag
   0379 D0 06              1680 	pop	ar6
   037B D0 05              1681 	pop	ar5
   037D D0 04              1682 	pop	ar4
   037F D0 03              1683 	pop	ar3
                           1684 ;	LCD.c:275: LCD_RS = 0;
                           1685 ;	genAssign
   0381 C2 93              1686 	clr	_P1_3
                           1687 ;	LCD.c:276: LCD_RW = 0;
                           1688 ;	genAssign
   0383 C2 94              1689 	clr	_P1_4
                           1690 ;	LCD.c:277: *WR_LCD_INSTR = 0x40 | j;
                           1691 ;	genAssign
                           1692 ;	Peephole 182.b	used 16 bit load of dptr
   0385 90 80 12           1693 	mov	dptr,#0x8012
                           1694 ;	genOr
   0388 74 40              1695 	mov	a,#0x40
   038A 4B                 1696 	orl	a,r3
                           1697 ;	genPointerSet
                           1698 ;     genFarPointerSet
   038B FF                 1699 	mov	r7,a
                           1700 ;	Peephole 105	removed redundant mov
   038C F0                 1701 	movx	@dptr,a
                           1702 ;	LCD.c:278: check_busy_flag();
                           1703 ;	genCall
   038D C0 03              1704 	push	ar3
   038F C0 04              1705 	push	ar4
   0391 C0 05              1706 	push	ar5
   0393 C0 06              1707 	push	ar6
   0395 12s00r00           1708 	lcall	_check_busy_flag
   0398 D0 06              1709 	pop	ar6
   039A D0 05              1710 	pop	ar5
   039C D0 04              1711 	pop	ar4
   039E D0 03              1712 	pop	ar3
                           1713 ;	LCD.c:279: LCD_RS=1;
                           1714 ;	genAssign
   03A0 D2 93              1715 	setb	_P1_3
                           1716 ;	LCD.c:280: LCD_RW=1;
                           1717 ;	genAssign
   03A2 D2 94              1718 	setb	_P1_4
                           1719 ;	LCD.c:281: my_print(*RD_LCD_INSTR, 2);
                           1720 ;	genPointerGet
                           1721 ;	genFarPointerGet
                           1722 ;	Peephole 182.b	used 16 bit load of dptr
   03A4 90 80 11           1723 	mov	dptr,#0x8011
   03A7 E0                 1724 	movx	a,@dptr
   03A8 FF                 1725 	mov	r7,a
                           1726 ;	genCast
   03A9 78 00              1727 	mov	r0,#0x00
                           1728 ;	genAssign
   03AB 90s00r00           1729 	mov	dptr,#_my_print_PARM_2
   03AE 74 02              1730 	mov	a,#0x02
   03B0 F0                 1731 	movx	@dptr,a
                           1732 ;	genCall
   03B1 8F 82              1733 	mov	dpl,r7
   03B3 88 83              1734 	mov	dph,r0
   03B5 C0 03              1735 	push	ar3
   03B7 C0 04              1736 	push	ar4
   03B9 C0 05              1737 	push	ar5
   03BB C0 06              1738 	push	ar6
   03BD 12s00r00           1739 	lcall	_my_print
   03C0 D0 06              1740 	pop	ar6
   03C2 D0 05              1741 	pop	ar5
   03C4 D0 04              1742 	pop	ar4
   03C6 D0 03              1743 	pop	ar3
                           1744 ;	LCD.c:282: printf_tiny("  ");
                           1745 ;	genIpush
   03C8 C0 03              1746 	push	ar3
   03CA C0 04              1747 	push	ar4
   03CC C0 05              1748 	push	ar5
   03CE C0 06              1749 	push	ar6
   03D0 74r41              1750 	mov	a,#__str_4
   03D2 C0 E0              1751 	push	acc
   03D4 74s00              1752 	mov	a,#(__str_4 >> 8)
   03D6 C0 E0              1753 	push	acc
                           1754 ;	genCall
   03D8 12s00r00           1755 	lcall	_printf_tiny
   03DB 15 81              1756 	dec	sp
   03DD 15 81              1757 	dec	sp
   03DF D0 06              1758 	pop	ar6
   03E1 D0 05              1759 	pop	ar5
   03E3 D0 04              1760 	pop	ar4
   03E5 D0 03              1761 	pop	ar3
                           1762 ;	LCD.c:273: for(j=16*i; j<((i*16)+16); j++){
                           1763 ;	genPlus
                           1764 ;     genPlusIncr
   03E7 0B                 1765 	inc	r3
   03E8 02s03r58           1766 	ljmp	00101$
   03EB                    1767 00104$:
                           1768 ;	LCD.c:284: printf_tiny("\n");
                           1769 ;	genIpush
   03EB C0 04              1770 	push	ar4
   03ED 74r3A              1771 	mov	a,#__str_1
   03EF C0 E0              1772 	push	acc
   03F1 74s00              1773 	mov	a,#(__str_1 >> 8)
   03F3 C0 E0              1774 	push	acc
                           1775 ;	genCall
   03F5 12s00r00           1776 	lcall	_printf_tiny
   03F8 15 81              1777 	dec	sp
   03FA 15 81              1778 	dec	sp
   03FC D0 04              1779 	pop	ar4
                           1780 ;	LCD.c:267: for(i=0; i<4; i++){
                           1781 ;	genPlus
                           1782 ;     genPlusIncr
   03FE 74 01              1783 	mov	a,#0x01
                           1784 ;	Peephole 236.a	used r4 instead of ar4
   0400 2C                 1785 	add	a,r4
   0401 FA                 1786 	mov	r2,a
   0402 02s02rE8           1787 	ljmp	00105$
   0405                    1788 00108$:
                           1789 ;	LCD.c:286: printf_tiny("\n");
                           1790 ;	genIpush
   0405 74r3A              1791 	mov	a,#__str_1
   0407 C0 E0              1792 	push	acc
   0409 74s00              1793 	mov	a,#(__str_1 >> 8)
   040B C0 E0              1794 	push	acc
                           1795 ;	genCall
   040D 12s00r00           1796 	lcall	_printf_tiny
   0410 15 81              1797 	dec	sp
   0412 15 81              1798 	dec	sp
                           1799 ;	Peephole 300	removed redundant label 00109$
   0414 22                 1800 	ret
                           1801 ;------------------------------------------------------------
                           1802 ;Allocation info for local variables in function 'lcd_ddram_hexdump'
                           1803 ;------------------------------------------------------------
                           1804 ;i                         Allocated with name '_lcd_ddram_hexdump_i_1_1'
                           1805 ;j                         Allocated with name '_lcd_ddram_hexdump_j_1_1'
                           1806 ;temp                      Allocated with name '_lcd_ddram_hexdump_temp_1_1'
                           1807 ;temp_addr                 Allocated with name '_lcd_ddram_hexdump_temp_addr_1_1'
                           1808 ;------------------------------------------------------------
                           1809 ;	LCD.c:291: void lcd_ddram_hexdump(void){
                           1810 ;	-----------------------------------------
                           1811 ;	 function lcd_ddram_hexdump
                           1812 ;	-----------------------------------------
   0415                    1813 _lcd_ddram_hexdump:
                           1814 ;	LCD.c:294: temp_addr = read_cursor_addr();
                           1815 ;	genCall
   0415 12s01r64           1816 	lcall	_read_cursor_addr
   0418 AA 82              1817 	mov	r2,dpl
                           1818 ;	LCD.c:295: lcdgotoxy(0,0);
                           1819 ;	genAssign
   041A 90s00r05           1820 	mov	dptr,#_lcdgotoxy_PARM_2
                           1821 ;	Peephole 181	changed mov to clr
   041D E4                 1822 	clr	a
   041E F0                 1823 	movx	@dptr,a
                           1824 ;	genCall
   041F 75 82 00           1825 	mov	dpl,#0x00
   0422 C0 02              1826 	push	ar2
   0424 12s01r09           1827 	lcall	_lcdgotoxy
   0427 D0 02              1828 	pop	ar2
                           1829 ;	LCD.c:296: printf_tiny("\rHEX DUMP FOR LCD DDRAM.\n\r(All values are in HEX FORMAT)\n");
                           1830 ;	genIpush
   0429 C0 02              1831 	push	ar2
   042B 74r44              1832 	mov	a,#__str_5
   042D C0 E0              1833 	push	acc
   042F 74s00              1834 	mov	a,#(__str_5 >> 8)
   0431 C0 E0              1835 	push	acc
                           1836 ;	genCall
   0433 12s00r00           1837 	lcall	_printf_tiny
   0436 15 81              1838 	dec	sp
   0438 15 81              1839 	dec	sp
   043A D0 02              1840 	pop	ar2
                           1841 ;	LCD.c:297: LCD_RS = 1;
                           1842 ;	genAssign
   043C D2 93              1843 	setb	_P1_3
                           1844 ;	LCD.c:298: LCD_RW = 1;
                           1845 ;	genAssign
   043E D2 94              1846 	setb	_P1_4
                           1847 ;	LCD.c:299: for(i=0; i<=3; i++){
                           1848 ;	genAssign
   0440 7B 00              1849 	mov	r3,#0x00
   0442                    1850 00105$:
                           1851 ;	genCmpGt
                           1852 ;	genCmp
                           1853 ;	genIfxJump
                           1854 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0442 EB                 1855 	mov	a,r3
   0443 24 FC              1856 	add	a,#0xff - 0x03
   0445 50 03              1857 	jnc	00117$
   0447 02s05r6C           1858 	ljmp	00108$
   044A                    1859 00117$:
                           1860 ;	LCD.c:300: lcdgotoxy(i,0);
                           1861 ;	genAssign
   044A 90s00r05           1862 	mov	dptr,#_lcdgotoxy_PARM_2
                           1863 ;	Peephole 181	changed mov to clr
   044D E4                 1864 	clr	a
   044E F0                 1865 	movx	@dptr,a
                           1866 ;	genCall
   044F 8B 82              1867 	mov	dpl,r3
   0451 C0 02              1868 	push	ar2
   0453 C0 03              1869 	push	ar3
   0455 12s01r09           1870 	lcall	_lcdgotoxy
   0458 D0 03              1871 	pop	ar3
   045A D0 02              1872 	pop	ar2
                           1873 ;	LCD.c:301: temp = (read_cursor_addr() & 0x7F);
                           1874 ;	genCall
   045C C0 02              1875 	push	ar2
   045E C0 03              1876 	push	ar3
   0460 12s01r64           1877 	lcall	_read_cursor_addr
   0463 E5 82              1878 	mov	a,dpl
   0465 D0 03              1879 	pop	ar3
   0467 D0 02              1880 	pop	ar2
                           1881 ;	genAnd
   0469 54 7F              1882 	anl	a,#0x7F
   046B FC                 1883 	mov	r4,a
                           1884 ;	LCD.c:303: printf_tiny("\n");
                           1885 ;	genIpush
   046C C0 02              1886 	push	ar2
   046E C0 03              1887 	push	ar3
   0470 C0 04              1888 	push	ar4
   0472 74r3A              1889 	mov	a,#__str_1
   0474 C0 E0              1890 	push	acc
   0476 74s00              1891 	mov	a,#(__str_1 >> 8)
   0478 C0 E0              1892 	push	acc
                           1893 ;	genCall
   047A 12s00r00           1894 	lcall	_printf_tiny
   047D 15 81              1895 	dec	sp
   047F 15 81              1896 	dec	sp
   0481 D0 04              1897 	pop	ar4
   0483 D0 03              1898 	pop	ar3
   0485 D0 02              1899 	pop	ar2
                           1900 ;	LCD.c:304: printf_tiny("\r");
                           1901 ;	genIpush
   0487 C0 02              1902 	push	ar2
   0489 C0 03              1903 	push	ar3
   048B C0 04              1904 	push	ar4
   048D 74r3C              1905 	mov	a,#__str_2
   048F C0 E0              1906 	push	acc
   0491 74s00              1907 	mov	a,#(__str_2 >> 8)
   0493 C0 E0              1908 	push	acc
                           1909 ;	genCall
   0495 12s00r00           1910 	lcall	_printf_tiny
   0498 15 81              1911 	dec	sp
   049A 15 81              1912 	dec	sp
   049C D0 04              1913 	pop	ar4
   049E D0 03              1914 	pop	ar3
   04A0 D0 02              1915 	pop	ar2
                           1916 ;	LCD.c:306: my_print(temp, 2);
                           1917 ;	genCast
   04A2 7D 00              1918 	mov	r5,#0x00
                           1919 ;	genAssign
   04A4 90s00r00           1920 	mov	dptr,#_my_print_PARM_2
   04A7 74 02              1921 	mov	a,#0x02
   04A9 F0                 1922 	movx	@dptr,a
                           1923 ;	genCall
   04AA 8C 82              1924 	mov	dpl,r4
   04AC 8D 83              1925 	mov	dph,r5
   04AE C0 02              1926 	push	ar2
   04B0 C0 03              1927 	push	ar3
   04B2 12s00r00           1928 	lcall	_my_print
   04B5 D0 03              1929 	pop	ar3
   04B7 D0 02              1930 	pop	ar2
                           1931 ;	LCD.c:307: printf_tiny(": ");
                           1932 ;	genIpush
   04B9 C0 02              1933 	push	ar2
   04BB C0 03              1934 	push	ar3
   04BD 74r3E              1935 	mov	a,#__str_3
   04BF C0 E0              1936 	push	acc
   04C1 74s00              1937 	mov	a,#(__str_3 >> 8)
   04C3 C0 E0              1938 	push	acc
                           1939 ;	genCall
   04C5 12s00r00           1940 	lcall	_printf_tiny
   04C8 15 81              1941 	dec	sp
   04CA 15 81              1942 	dec	sp
   04CC D0 03              1943 	pop	ar3
   04CE D0 02              1944 	pop	ar2
                           1945 ;	LCD.c:311: for(j=0; j<=15; j++){
                           1946 ;	genAssign
   04D0 8B 04              1947 	mov	ar4,r3
                           1948 ;	genAssign
   04D2 7D 00              1949 	mov	r5,#0x00
   04D4                    1950 00101$:
                           1951 ;	genCmpGt
                           1952 ;	genCmp
                           1953 ;	genIfxJump
                           1954 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   04D4 ED                 1955 	mov	a,r5
   04D5 24 F0              1956 	add	a,#0xff - 0x0F
                           1957 ;	Peephole 112.b	changed ljmp to sjmp
                           1958 ;	Peephole 160.a	removed sjmp by inverse jump logic
   04D7 40 78              1959 	jc	00104$
                           1960 ;	Peephole 300	removed redundant label 00118$
                           1961 ;	LCD.c:312: lcdgotoxy(i,j);
                           1962 ;	genAssign
   04D9 90s00r05           1963 	mov	dptr,#_lcdgotoxy_PARM_2
   04DC ED                 1964 	mov	a,r5
   04DD F0                 1965 	movx	@dptr,a
                           1966 ;	genCall
   04DE 8C 82              1967 	mov	dpl,r4
   04E0 C0 02              1968 	push	ar2
   04E2 C0 03              1969 	push	ar3
   04E4 C0 04              1970 	push	ar4
   04E6 C0 05              1971 	push	ar5
   04E8 12s01r09           1972 	lcall	_lcdgotoxy
   04EB D0 05              1973 	pop	ar5
   04ED D0 04              1974 	pop	ar4
   04EF D0 03              1975 	pop	ar3
   04F1 D0 02              1976 	pop	ar2
                           1977 ;	LCD.c:313: check_busy_flag();
                           1978 ;	genCall
   04F3 C0 02              1979 	push	ar2
   04F5 C0 03              1980 	push	ar3
   04F7 C0 04              1981 	push	ar4
   04F9 C0 05              1982 	push	ar5
   04FB 12s00r00           1983 	lcall	_check_busy_flag
   04FE D0 05              1984 	pop	ar5
   0500 D0 04              1985 	pop	ar4
   0502 D0 03              1986 	pop	ar3
   0504 D0 02              1987 	pop	ar2
                           1988 ;	LCD.c:314: LCD_RS=1;
                           1989 ;	genAssign
   0506 D2 93              1990 	setb	_P1_3
                           1991 ;	LCD.c:315: LCD_RW=1;
                           1992 ;	genAssign
   0508 D2 94              1993 	setb	_P1_4
                           1994 ;	LCD.c:316: my_print(*RD_LCD_INSTR, 2);
                           1995 ;	genPointerGet
                           1996 ;	genFarPointerGet
                           1997 ;	Peephole 182.b	used 16 bit load of dptr
   050A 90 80 11           1998 	mov	dptr,#0x8011
   050D E0                 1999 	movx	a,@dptr
   050E FE                 2000 	mov	r6,a
                           2001 ;	genCast
   050F 7F 00              2002 	mov	r7,#0x00
                           2003 ;	genAssign
   0511 90s00r00           2004 	mov	dptr,#_my_print_PARM_2
   0514 74 02              2005 	mov	a,#0x02
   0516 F0                 2006 	movx	@dptr,a
                           2007 ;	genCall
   0517 8E 82              2008 	mov	dpl,r6
   0519 8F 83              2009 	mov	dph,r7
   051B C0 02              2010 	push	ar2
   051D C0 03              2011 	push	ar3
   051F C0 04              2012 	push	ar4
   0521 C0 05              2013 	push	ar5
   0523 12s00r00           2014 	lcall	_my_print
   0526 D0 05              2015 	pop	ar5
   0528 D0 04              2016 	pop	ar4
   052A D0 03              2017 	pop	ar3
   052C D0 02              2018 	pop	ar2
                           2019 ;	LCD.c:317: printf_tiny("  ");
                           2020 ;	genIpush
   052E C0 02              2021 	push	ar2
   0530 C0 03              2022 	push	ar3
   0532 C0 04              2023 	push	ar4
   0534 C0 05              2024 	push	ar5
   0536 74r41              2025 	mov	a,#__str_4
   0538 C0 E0              2026 	push	acc
   053A 74s00              2027 	mov	a,#(__str_4 >> 8)
   053C C0 E0              2028 	push	acc
                           2029 ;	genCall
   053E 12s00r00           2030 	lcall	_printf_tiny
   0541 15 81              2031 	dec	sp
   0543 15 81              2032 	dec	sp
   0545 D0 05              2033 	pop	ar5
   0547 D0 04              2034 	pop	ar4
   0549 D0 03              2035 	pop	ar3
   054B D0 02              2036 	pop	ar2
                           2037 ;	LCD.c:311: for(j=0; j<=15; j++){
                           2038 ;	genPlus
                           2039 ;     genPlusIncr
   054D 0D                 2040 	inc	r5
   054E 02s04rD4           2041 	ljmp	00101$
   0551                    2042 00104$:
                           2043 ;	LCD.c:320: printf_tiny("\n");
                           2044 ;	genIpush
   0551 C0 02              2045 	push	ar2
   0553 C0 03              2046 	push	ar3
   0555 74r3A              2047 	mov	a,#__str_1
   0557 C0 E0              2048 	push	acc
   0559 74s00              2049 	mov	a,#(__str_1 >> 8)
   055B C0 E0              2050 	push	acc
                           2051 ;	genCall
   055D 12s00r00           2052 	lcall	_printf_tiny
   0560 15 81              2053 	dec	sp
   0562 15 81              2054 	dec	sp
   0564 D0 03              2055 	pop	ar3
   0566 D0 02              2056 	pop	ar2
                           2057 ;	LCD.c:299: for(i=0; i<=3; i++){
                           2058 ;	genPlus
                           2059 ;     genPlusIncr
   0568 0B                 2060 	inc	r3
   0569 02s04r42           2061 	ljmp	00105$
   056C                    2062 00108$:
                           2063 ;	LCD.c:322: printf_tiny("\n");
                           2064 ;	genIpush
   056C C0 02              2065 	push	ar2
   056E 74r3A              2066 	mov	a,#__str_1
   0570 C0 E0              2067 	push	acc
   0572 74s00              2068 	mov	a,#(__str_1 >> 8)
   0574 C0 E0              2069 	push	acc
                           2070 ;	genCall
   0576 12s00r00           2071 	lcall	_printf_tiny
   0579 15 81              2072 	dec	sp
   057B 15 81              2073 	dec	sp
   057D D0 02              2074 	pop	ar2
                           2075 ;	LCD.c:323: lcdgotoaddr(temp_addr);
                           2076 ;	genCall
   057F 8A 82              2077 	mov	dpl,r2
                           2078 ;	Peephole 253.b	replaced lcall/ret with ljmp
   0581 02s00r8F           2079 	ljmp	_lcdgotoaddr
                           2080 ;
                           2081 ;------------------------------------------------------------
                           2082 ;Allocation info for local variables in function 'lcdcreatechar'
                           2083 ;------------------------------------------------------------
                           2084 ;row_vals                  Allocated with name '_lcdcreatechar_PARM_2'
                           2085 ;ccode                     Allocated with name '_lcdcreatechar_ccode_1_1'
                           2086 ;i                         Allocated with name '_lcdcreatechar_i_1_1'
                           2087 ;temp_addr                 Allocated with name '_lcdcreatechar_temp_addr_1_1'
                           2088 ;------------------------------------------------------------
                           2089 ;	LCD.c:328: void lcdcreatechar(unsigned char ccode, unsigned char row_vals[]){
                           2090 ;	-----------------------------------------
                           2091 ;	 function lcdcreatechar
                           2092 ;	-----------------------------------------
   0584                    2093 _lcdcreatechar:
                           2094 ;	genReceive
   0584 E5 82              2095 	mov	a,dpl
   0586 90s00r12           2096 	mov	dptr,#_lcdcreatechar_ccode_1_1
   0589 F0                 2097 	movx	@dptr,a
                           2098 ;	LCD.c:331: lcdgotoaddr(lcd_address);
                           2099 ;	genAssign
   058A 90s00r00           2100 	mov	dptr,#_lcd_address
   058D E0                 2101 	movx	a,@dptr
                           2102 ;	genCall
   058E FA                 2103 	mov	r2,a
                           2104 ;	Peephole 244.c	loading dpl from a instead of r2
   058F F5 82              2105 	mov	dpl,a
   0591 12s00r8F           2106 	lcall	_lcdgotoaddr
                           2107 ;	LCD.c:332: temp_addr = read_cursor_addr();
                           2108 ;	genCall
   0594 12s01r64           2109 	lcall	_read_cursor_addr
   0597 AA 82              2110 	mov	r2,dpl
                           2111 ;	LCD.c:333: lcdgotocgramaddr(ccode);
                           2112 ;	genAssign
   0599 90s00r12           2113 	mov	dptr,#_lcdcreatechar_ccode_1_1
   059C E0                 2114 	movx	a,@dptr
                           2115 ;	genCall
   059D FB                 2116 	mov	r3,a
                           2117 ;	Peephole 244.c	loading dpl from a instead of r3
   059E F5 82              2118 	mov	dpl,a
   05A0 C0 02              2119 	push	ar2
   05A2 12s00rDC           2120 	lcall	_lcdgotocgramaddr
   05A5 D0 02              2121 	pop	ar2
                           2122 ;	LCD.c:334: for(i=0; i<8; i++){
                           2123 ;	genAssign
   05A7 90s00r0F           2124 	mov	dptr,#_lcdcreatechar_PARM_2
   05AA E0                 2125 	movx	a,@dptr
   05AB FB                 2126 	mov	r3,a
   05AC A3                 2127 	inc	dptr
   05AD E0                 2128 	movx	a,@dptr
   05AE FC                 2129 	mov	r4,a
   05AF A3                 2130 	inc	dptr
   05B0 E0                 2131 	movx	a,@dptr
   05B1 FD                 2132 	mov	r5,a
                           2133 ;	genAssign
   05B2 7E 00              2134 	mov	r6,#0x00
   05B4                    2135 00101$:
                           2136 ;	genCmpLt
                           2137 ;	genCmp
   05B4 BE 08 00           2138 	cjne	r6,#0x08,00110$
   05B7                    2139 00110$:
                           2140 ;	genIfxJump
                           2141 ;	Peephole 108.a	removed ljmp by inverse jump logic
   05B7 50 48              2142 	jnc	00104$
                           2143 ;	Peephole 300	removed redundant label 00111$
                           2144 ;	LCD.c:335: lcdputchcustom(row_vals[i]);
                           2145 ;	genPlus
                           2146 ;	Peephole 236.g	used r6 instead of ar6
   05B9 EE                 2147 	mov	a,r6
                           2148 ;	Peephole 236.a	used r3 instead of ar3
   05BA 2B                 2149 	add	a,r3
   05BB FF                 2150 	mov	r7,a
                           2151 ;	Peephole 181	changed mov to clr
   05BC E4                 2152 	clr	a
                           2153 ;	Peephole 236.b	used r4 instead of ar4
   05BD 3C                 2154 	addc	a,r4
   05BE F8                 2155 	mov	r0,a
   05BF 8D 01              2156 	mov	ar1,r5
                           2157 ;	genPointerGet
                           2158 ;	genGenPointerGet
   05C1 8F 82              2159 	mov	dpl,r7
   05C3 88 83              2160 	mov	dph,r0
   05C5 89 F0              2161 	mov	b,r1
   05C7 12s00r00           2162 	lcall	__gptrget
                           2163 ;	genCall
   05CA FF                 2164 	mov	r7,a
                           2165 ;	Peephole 244.c	loading dpl from a instead of r7
   05CB F5 82              2166 	mov	dpl,a
   05CD C0 02              2167 	push	ar2
   05CF C0 03              2168 	push	ar3
   05D1 C0 04              2169 	push	ar4
   05D3 C0 05              2170 	push	ar5
   05D5 C0 06              2171 	push	ar6
   05D7 12s02r38           2172 	lcall	_lcdputchcustom
   05DA D0 06              2173 	pop	ar6
   05DC D0 05              2174 	pop	ar5
   05DE D0 04              2175 	pop	ar4
   05E0 D0 03              2176 	pop	ar3
   05E2 D0 02              2177 	pop	ar2
                           2178 ;	LCD.c:336: delay_ms(2);
                           2179 ;	genCall
                           2180 ;	Peephole 182.b	used 16 bit load of dptr
   05E4 90 00 02           2181 	mov	dptr,#0x0002
   05E7 C0 02              2182 	push	ar2
   05E9 C0 03              2183 	push	ar3
   05EB C0 04              2184 	push	ar4
   05ED C0 05              2185 	push	ar5
   05EF C0 06              2186 	push	ar6
   05F1 12s00r00           2187 	lcall	_delay_ms
   05F4 D0 06              2188 	pop	ar6
   05F6 D0 05              2189 	pop	ar5
   05F8 D0 04              2190 	pop	ar4
   05FA D0 03              2191 	pop	ar3
   05FC D0 02              2192 	pop	ar2
                           2193 ;	LCD.c:334: for(i=0; i<8; i++){
                           2194 ;	genPlus
                           2195 ;     genPlusIncr
   05FE 0E                 2196 	inc	r6
                           2197 ;	Peephole 112.b	changed ljmp to sjmp
   05FF 80 B3              2198 	sjmp	00101$
   0601                    2199 00104$:
                           2200 ;	LCD.c:339: lcdgotoaddr(lcd_address);
                           2201 ;	genAssign
   0601 90s00r00           2202 	mov	dptr,#_lcd_address
   0604 E0                 2203 	movx	a,@dptr
                           2204 ;	genCall
   0605 FB                 2205 	mov	r3,a
                           2206 ;	Peephole 244.c	loading dpl from a instead of r3
   0606 F5 82              2207 	mov	dpl,a
   0608 C0 02              2208 	push	ar2
   060A 12s00r8F           2209 	lcall	_lcdgotoaddr
   060D D0 02              2210 	pop	ar2
                           2211 ;	LCD.c:340: delay_ms(2);
                           2212 ;	genCall
                           2213 ;	Peephole 182.b	used 16 bit load of dptr
   060F 90 00 02           2214 	mov	dptr,#0x0002
   0612 C0 02              2215 	push	ar2
   0614 12s00r00           2216 	lcall	_delay_ms
   0617 D0 02              2217 	pop	ar2
                           2218 ;	LCD.c:342: lcdputchcustom(ccode);
                           2219 ;	genAssign
   0619 90s00r12           2220 	mov	dptr,#_lcdcreatechar_ccode_1_1
   061C E0                 2221 	movx	a,@dptr
                           2222 ;	genCall
   061D FB                 2223 	mov	r3,a
                           2224 ;	Peephole 244.c	loading dpl from a instead of r3
   061E F5 82              2225 	mov	dpl,a
   0620 C0 02              2226 	push	ar2
   0622 12s02r38           2227 	lcall	_lcdputchcustom
   0625 D0 02              2228 	pop	ar2
                           2229 ;	LCD.c:344: lcd_address++;
                           2230 ;	genAssign
   0627 90s00r00           2231 	mov	dptr,#_lcd_address
   062A E0                 2232 	movx	a,@dptr
   062B FB                 2233 	mov	r3,a
                           2234 ;	genPlus
   062C 90s00r00           2235 	mov	dptr,#_lcd_address
                           2236 ;     genPlusIncr
   062F 74 01              2237 	mov	a,#0x01
                           2238 ;	Peephole 236.a	used r3 instead of ar3
   0631 2B                 2239 	add	a,r3
   0632 F0                 2240 	movx	@dptr,a
                           2241 ;	LCD.c:345: wrap_cursor(temp_addr);
                           2242 ;	genCall
   0633 8A 82              2243 	mov	dpl,r2
                           2244 ;	Peephole 253.b	replaced lcall/ret with ljmp
   0635 02s01r84           2245 	ljmp	_wrap_cursor
                           2246 ;
                           2247 ;------------------------------------------------------------
                           2248 ;Allocation info for local variables in function 'custom_char'
                           2249 ;------------------------------------------------------------
                           2250 ;sloc0                     Allocated with name '_custom_char_sloc0_1_0'
                           2251 ;sloc1                     Allocated with name '_custom_char_sloc1_1_0'
                           2252 ;char_code                 Allocated with name '_custom_char_char_code_1_1'
                           2253 ;i                         Allocated with name '_custom_char_i_1_1'
                           2254 ;j                         Allocated with name '_custom_char_j_1_1'
                           2255 ;temp                      Allocated with name '_custom_char_temp_1_1'
                           2256 ;invalid_bit               Allocated with name '_custom_char_invalid_bit_1_1'
                           2257 ;k                         Allocated with name '_custom_char_k_1_1'
                           2258 ;cgram_data                Allocated with name '_custom_char_cgram_data_1_1'
                           2259 ;------------------------------------------------------------
                           2260 ;	LCD.c:351: void custom_char(){
                           2261 ;	-----------------------------------------
                           2262 ;	 function custom_char
                           2263 ;	-----------------------------------------
   0638                    2264 _custom_char:
                           2265 ;	LCD.c:353: unsigned char cgram_data[8]={0,0,0,0,0,0,0,0};
                           2266 ;	genPointerSet
                           2267 ;     genFarPointerSet
   0638 90s00r16           2268 	mov	dptr,#_custom_char_cgram_data_1_1
                           2269 ;	Peephole 181	changed mov to clr
                           2270 ;	genPointerSet
                           2271 ;     genFarPointerSet
                           2272 ;	Peephole 181	changed mov to clr
                           2273 ;	Peephole 219.a	removed redundant clear
                           2274 ;	genPointerSet
                           2275 ;     genFarPointerSet
                           2276 ;	Peephole 181	changed mov to clr
                           2277 ;	genPointerSet
                           2278 ;     genFarPointerSet
                           2279 ;	Peephole 181	changed mov to clr
                           2280 ;	Peephole 219.a	removed redundant clear
   063B E4                 2281 	clr	a
   063C F0                 2282 	movx	@dptr,a
   063D 90s00r17           2283 	mov	dptr,#(_custom_char_cgram_data_1_1 + 0x0001)
   0640 F0                 2284 	movx	@dptr,a
   0641 90s00r18           2285 	mov	dptr,#(_custom_char_cgram_data_1_1 + 0x0002)
                           2286 ;	Peephole 219.b	removed redundant clear
   0644 F0                 2287 	movx	@dptr,a
   0645 90s00r19           2288 	mov	dptr,#(_custom_char_cgram_data_1_1 + 0x0003)
   0648 F0                 2289 	movx	@dptr,a
                           2290 ;	genPointerSet
                           2291 ;     genFarPointerSet
   0649 90s00r1A           2292 	mov	dptr,#(_custom_char_cgram_data_1_1 + 0x0004)
                           2293 ;	Peephole 181	changed mov to clr
                           2294 ;	genPointerSet
                           2295 ;     genFarPointerSet
                           2296 ;	Peephole 181	changed mov to clr
                           2297 ;	Peephole 219.a	removed redundant clear
                           2298 ;	genPointerSet
                           2299 ;     genFarPointerSet
                           2300 ;	Peephole 181	changed mov to clr
                           2301 ;	genPointerSet
                           2302 ;     genFarPointerSet
                           2303 ;	Peephole 181	changed mov to clr
                           2304 ;	Peephole 219.a	removed redundant clear
   064C E4                 2305 	clr	a
   064D F0                 2306 	movx	@dptr,a
   064E 90s00r1B           2307 	mov	dptr,#(_custom_char_cgram_data_1_1 + 0x0005)
   0651 F0                 2308 	movx	@dptr,a
   0652 90s00r1C           2309 	mov	dptr,#(_custom_char_cgram_data_1_1 + 0x0006)
                           2310 ;	Peephole 219.b	removed redundant clear
   0655 F0                 2311 	movx	@dptr,a
   0656 90s00r1D           2312 	mov	dptr,#(_custom_char_cgram_data_1_1 + 0x0007)
   0659 F0                 2313 	movx	@dptr,a
                           2314 ;	LCD.c:354: do{
   065A                    2315 00108$:
                           2316 ;	LCD.c:355: printf_tiny("\rEnter character code(between 0 and 7). Press backspace to exit\n\r");
                           2317 ;	genIpush
   065A 74r7E              2318 	mov	a,#__str_6
   065C C0 E0              2319 	push	acc
   065E 74s00              2320 	mov	a,#(__str_6 >> 8)
   0660 C0 E0              2321 	push	acc
                           2322 ;	genCall
   0662 12s00r00           2323 	lcall	_printf_tiny
   0665 15 81              2324 	dec	sp
   0667 15 81              2325 	dec	sp
                           2326 ;	LCD.c:356: char_code = rx_data_char();
                           2327 ;	genCall
   0669 12s00r00           2328 	lcall	_rx_data_char
   066C AA 82              2329 	mov	r2,dpl
                           2330 ;	genAssign
   066E 90s00r13           2331 	mov	dptr,#_custom_char_char_code_1_1
   0671 EA                 2332 	mov	a,r2
   0672 F0                 2333 	movx	@dptr,a
                           2334 ;	LCD.c:357: if(char_code == 0x08){
                           2335 ;	genCmpEq
                           2336 ;	gencjneshort
   0673 BA 08 02           2337 	cjne	r2,#0x08,00166$
                           2338 ;	Peephole 112.b	changed ljmp to sjmp
   0676 80 47              2339 	sjmp	00161$
   0678                    2340 00166$:
                           2341 ;	LCD.c:360: if(char_code >= '0' && char_code <= '7'){
                           2342 ;	genAssign
   0678 8A 03              2343 	mov	ar3,r2
                           2344 ;	genCmpLt
                           2345 ;	genCmp
   067A BB 30 00           2346 	cjne	r3,#0x30,00167$
   067D                    2347 00167$:
                           2348 ;	genIfxJump
                           2349 ;	Peephole 112.b	changed ljmp to sjmp
                           2350 ;	Peephole 160.a	removed sjmp by inverse jump logic
   067D 40 28              2351 	jc	00104$
                           2352 ;	Peephole 300	removed redundant label 00168$
                           2353 ;	genAssign
   067F 8A 03              2354 	mov	ar3,r2
                           2355 ;	genCmpGt
                           2356 ;	genCmp
                           2357 ;	genIfxJump
                           2358 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0681 EB                 2359 	mov	a,r3
   0682 24 C8              2360 	add	a,#0xff - 0x37
                           2361 ;	Peephole 112.b	changed ljmp to sjmp
                           2362 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0684 40 21              2363 	jc	00104$
                           2364 ;	Peephole 300	removed redundant label 00169$
                           2365 ;	LCD.c:361: char_code = char_code - 0x30;
                           2366 ;	genMinus
   0686 EA                 2367 	mov	a,r2
   0687 24 D0              2368 	add	a,#0xd0
                           2369 ;	genAssign
   0689 FA                 2370 	mov	r2,a
   068A 90s00r13           2371 	mov	dptr,#_custom_char_char_code_1_1
                           2372 ;	Peephole 100	removed redundant mov
   068D F0                 2373 	movx	@dptr,a
                           2374 ;	LCD.c:362: printf_tiny("\rCharacter code = %d\n", char_code);
                           2375 ;	genCast
   068E 7B 00              2376 	mov	r3,#0x00
                           2377 ;	genIpush
   0690 C0 02              2378 	push	ar2
   0692 C0 03              2379 	push	ar3
                           2380 ;	genIpush
   0694 74rC0              2381 	mov	a,#__str_7
   0696 C0 E0              2382 	push	acc
   0698 74s00              2383 	mov	a,#(__str_7 >> 8)
   069A C0 E0              2384 	push	acc
                           2385 ;	genCall
   069C 12s00r00           2386 	lcall	_printf_tiny
   069F E5 81              2387 	mov	a,sp
   06A1 24 FC              2388 	add	a,#0xfc
   06A3 F5 81              2389 	mov	sp,a
                           2390 ;	Peephole 112.b	changed ljmp to sjmp
   06A5 80 0F              2391 	sjmp	00109$
   06A7                    2392 00104$:
                           2393 ;	LCD.c:366: printf_tiny("\rInvalid input\n");
                           2394 ;	genIpush
   06A7 74rD6              2395 	mov	a,#__str_8
   06A9 C0 E0              2396 	push	acc
   06AB 74s00              2397 	mov	a,#(__str_8 >> 8)
   06AD C0 E0              2398 	push	acc
                           2399 ;	genCall
   06AF 12s00r00           2400 	lcall	_printf_tiny
   06B2 15 81              2401 	dec	sp
   06B4 15 81              2402 	dec	sp
   06B6                    2403 00109$:
                           2404 ;	LCD.c:368: }while(char_code < 0  || char_code > 7);
                           2405 ;	genAssign
   06B6 90s00r13           2406 	mov	dptr,#_custom_char_char_code_1_1
   06B9 E0                 2407 	movx	a,@dptr
                           2408 ;	genCmpGt
                           2409 ;	genCmp
                           2410 ;	genIfxJump
                           2411 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   06BA FA                 2412 	mov  r2,a
                           2413 ;	Peephole 177.a	removed redundant mov
   06BB 24 F8              2414 	add	a,#0xff - 0x07
                           2415 ;	Peephole 112.b	changed ljmp to sjmp
                           2416 ;	Peephole 160.a	removed sjmp by inverse jump logic
   06BD 40 9B              2417 	jc	00108$
                           2418 ;	Peephole 300	removed redundant label 00170$
                           2419 ;	LCD.c:369: for(i=0; i<8; i++){
   06BF                    2420 00161$:
                           2421 ;	genAssign
   06BF 90s00r13           2422 	mov	dptr,#_custom_char_char_code_1_1
   06C2 E0                 2423 	movx	a,@dptr
   06C3 FA                 2424 	mov	r2,a
                           2425 ;	genCmpEq
                           2426 ;	gencjne
                           2427 ;	gencjneshort
                           2428 ;	Peephole 241.d	optimized compare
   06C4 E4                 2429 	clr	a
   06C5 BA 08 01           2430 	cjne	r2,#0x08,00171$
   06C8 04                 2431 	inc	a
   06C9                    2432 00171$:
                           2433 ;	Peephole 300	removed redundant label 00172$
   06C9 FA                 2434 	mov	r2,a
                           2435 ;	genAssign
   06CA 75*00 00           2436 	mov	_custom_char_sloc0_1_0,#0x00
   06CD                    2437 00129$:
                           2438 ;	genCmpLt
                           2439 ;	genCmp
                           2440 ;	genIfxJump
                           2441 ;	Peephole 132.f	optimized genCmpLt by inverse logic (carry differs)
   06CD 74 F8              2442 	mov	a,#0x100 - 0x08
   06CF 25*00              2443 	add	a,_custom_char_sloc0_1_0
   06D1 50 03              2444 	jnc	00173$
   06D3 02s08r67           2445 	ljmp	00132$
   06D6                    2446 00173$:
                           2447 ;	LCD.c:370: if(char_code == 0x08){
                           2448 ;	genIfx
   06D6 EA                 2449 	mov	a,r2
                           2450 ;	genIfxJump
   06D7 60 03              2451 	jz	00174$
   06D9 02s08r67           2452 	ljmp	00132$
   06DC                    2453 00174$:
                           2454 ;	LCD.c:374: do{
                           2455 ;	genAssign
   06DC AC*00              2456 	mov	r4,_custom_char_sloc0_1_0
                           2457 ;	genAssign
   06DE 85*00*01           2458 	mov	_custom_char_sloc1_1_0,_custom_char_sloc0_1_0
   06E1                    2459 00124$:
                           2460 ;	LCD.c:375: invalid_bit = 0;
                           2461 ;	genAssign
   06E1 90s00r15           2462 	mov	dptr,#_custom_char_invalid_bit_1_1
                           2463 ;	Peephole 181	changed mov to clr
   06E4 E4                 2464 	clr	a
   06E5 F0                 2465 	movx	@dptr,a
                           2466 ;	LCD.c:376: printf_tiny("\rEnter 5 pixel values for row %d (Format: C4 C3 C2 C1 C0). Press backspace to exit\n\n\r", i);
                           2467 ;	genCast
   06E6 AE*01              2468 	mov	r6,_custom_char_sloc1_1_0
   06E8 7F 00              2469 	mov	r7,#0x00
                           2470 ;	genIpush
   06EA C0 02              2471 	push	ar2
   06EC C0 04              2472 	push	ar4
   06EE C0 06              2473 	push	ar6
   06F0 C0 07              2474 	push	ar7
                           2475 ;	genIpush
   06F2 74rE6              2476 	mov	a,#__str_9
   06F4 C0 E0              2477 	push	acc
   06F6 74s00              2478 	mov	a,#(__str_9 >> 8)
   06F8 C0 E0              2479 	push	acc
                           2480 ;	genCall
   06FA 12s00r00           2481 	lcall	_printf_tiny
   06FD E5 81              2482 	mov	a,sp
   06FF 24 FC              2483 	add	a,#0xfc
   0701 F5 81              2484 	mov	sp,a
   0703 D0 04              2485 	pop	ar4
   0705 D0 02              2486 	pop	ar2
                           2487 ;	LCD.c:378: for(j=0; j<5; j++){
                           2488 ;	genAssign
   0707 90s00r14           2489 	mov	dptr,#_custom_char_j_1_1
                           2490 ;	Peephole 181	changed mov to clr
   070A E4                 2491 	clr	a
   070B F0                 2492 	movx	@dptr,a
   070C                    2493 00120$:
                           2494 ;	genAssign
   070C 90s00r14           2495 	mov	dptr,#_custom_char_j_1_1
   070F E0                 2496 	movx	a,@dptr
   0710 FE                 2497 	mov	r6,a
                           2498 ;	genCmpLt
                           2499 ;	genCmp
   0711 BE 05 00           2500 	cjne	r6,#0x05,00175$
   0714                    2501 00175$:
                           2502 ;	genIfxJump
   0714 40 03              2503 	jc	00176$
   0716 02s07rBB           2504 	ljmp	00125$
   0719                    2505 00176$:
                           2506 ;	LCD.c:379: temp = rx_data_char();
                           2507 ;	genCall
   0719 C0 02              2508 	push	ar2
   071B C0 04              2509 	push	ar4
   071D C0 06              2510 	push	ar6
   071F 12s00r00           2511 	lcall	_rx_data_char
   0722 AF 82              2512 	mov	r7,dpl
   0724 D0 06              2513 	pop	ar6
   0726 D0 04              2514 	pop	ar4
   0728 D0 02              2515 	pop	ar2
                           2516 ;	LCD.c:380: if(temp == 0x08){
                           2517 ;	genCmpEq
                           2518 ;	gencjneshort
                           2519 ;	Peephole 112.b	changed ljmp to sjmp
                           2520 ;	Peephole 198.b	optimized misc jump sequence
   072A BF 08 09           2521 	cjne	r7,#0x08,00118$
                           2522 ;	Peephole 200.b	removed redundant sjmp
                           2523 ;	Peephole 300	removed redundant label 00177$
                           2524 ;	Peephole 300	removed redundant label 00178$
                           2525 ;	LCD.c:381: invalid_bit = 0x08;
                           2526 ;	genAssign
   072D 90s00r15           2527 	mov	dptr,#_custom_char_invalid_bit_1_1
   0730 74 08              2528 	mov	a,#0x08
   0732 F0                 2529 	movx	@dptr,a
                           2530 ;	LCD.c:382: break;
   0733 02s07rBB           2531 	ljmp	00125$
   0736                    2532 00118$:
                           2533 ;	LCD.c:384: else if(temp == '0' || temp == '1' ){
                           2534 ;	genCmpEq
                           2535 ;	gencjneshort
   0736 BF 30 02           2536 	cjne	r7,#0x30,00179$
                           2537 ;	Peephole 112.b	changed ljmp to sjmp
   0739 80 03              2538 	sjmp	00113$
   073B                    2539 00179$:
                           2540 ;	genCmpEq
                           2541 ;	gencjneshort
                           2542 ;	Peephole 112.b	changed ljmp to sjmp
                           2543 ;	Peephole 198.b	optimized misc jump sequence
   073B BF 31 47           2544 	cjne	r7,#0x31,00114$
                           2545 ;	Peephole 200.b	removed redundant sjmp
                           2546 ;	Peephole 300	removed redundant label 00180$
                           2547 ;	Peephole 300	removed redundant label 00181$
   073E                    2548 00113$:
                           2549 ;	LCD.c:386: cgram_data[i] |= (((temp - 0x30) << (4-j)) & 0x1F);
                           2550 ;	genIpush
   073E C0 02              2551 	push	ar2
                           2552 ;	genPlus
                           2553 ;	Peephole 236.g	used r4 instead of ar4
   0740 EC                 2554 	mov	a,r4
   0741 24r16              2555 	add	a,#_custom_char_cgram_data_1_1
   0743 F8                 2556 	mov	r0,a
                           2557 ;	Peephole 181	changed mov to clr
   0744 E4                 2558 	clr	a
   0745 34s00              2559 	addc	a,#(_custom_char_cgram_data_1_1 >> 8)
   0747 F9                 2560 	mov	r1,a
                           2561 ;	genPointerGet
                           2562 ;	genFarPointerGet
   0748 88 82              2563 	mov	dpl,r0
   074A 89 83              2564 	mov	dph,r1
   074C E0                 2565 	movx	a,@dptr
   074D FA                 2566 	mov	r2,a
                           2567 ;	genAssign
                           2568 ;	genCast
   074E 7B 00              2569 	mov	r3,#0x00
                           2570 ;	genCast
                           2571 ;	genMinus
   0750 EF                 2572 	mov	a,r7
   0751 24 D0              2573 	add	a,#0xd0
   0753 FF                 2574 	mov	r7,a
                           2575 ;	genAssign
   0754 90s00r14           2576 	mov	dptr,#_custom_char_j_1_1
   0757 E0                 2577 	movx	a,@dptr
   0758 FB                 2578 	mov	r3,a
                           2579 ;	genCast
   0759 7D 00              2580 	mov	r5,#0x00
                           2581 ;	genMinus
   075B 74 04              2582 	mov	a,#0x04
   075D C3                 2583 	clr	c
                           2584 ;	Peephole 236.l	used r3 instead of ar3
   075E 9B                 2585 	subb	a,r3
   075F FB                 2586 	mov	r3,a
                           2587 ;	Peephole 181	changed mov to clr
   0760 E4                 2588 	clr	a
                           2589 ;	Peephole 236.l	used r5 instead of ar5
   0761 9D                 2590 	subb	a,r5
   0762 FD                 2591 	mov	r5,a
                           2592 ;	genLeftShift
   0763 8B F0              2593 	mov	b,r3
   0765 05 F0              2594 	inc	b
   0767 AB 07              2595 	mov	r3,ar7
   0769 7D 00              2596 	mov	r5,#0x00
   076B 80 06              2597 	sjmp	00183$
   076D                    2598 00182$:
   076D EB                 2599 	mov	a,r3
                           2600 ;	Peephole 254	optimized left shift
   076E 2B                 2601 	add	a,r3
   076F FB                 2602 	mov	r3,a
   0770 ED                 2603 	mov	a,r5
   0771 33                 2604 	rlc	a
   0772 FD                 2605 	mov	r5,a
   0773                    2606 00183$:
   0773 D5 F0 F7           2607 	djnz	b,00182$
                           2608 ;	genCast
                           2609 ;	genAnd
   0776 74 1F              2610 	mov	a,#0x1F
   0778 5B                 2611 	anl	a,r3
                           2612 ;	genOr
   0779 42 02              2613 	orl	ar2,a
                           2614 ;	genPointerSet
                           2615 ;     genFarPointerSet
   077B 88 82              2616 	mov	dpl,r0
   077D 89 83              2617 	mov	dph,r1
   077F EA                 2618 	mov	a,r2
   0780 F0                 2619 	movx	@dptr,a
                           2620 ;	genIpop
   0781 D0 02              2621 	pop	ar2
                           2622 ;	Peephole 112.b	changed ljmp to sjmp
   0783 80 27              2623 	sjmp	00122$
   0785                    2624 00114$:
                           2625 ;	LCD.c:389: invalid_bit = 1;
                           2626 ;	genAssign
   0785 90s00r15           2627 	mov	dptr,#_custom_char_invalid_bit_1_1
   0788 74 01              2628 	mov	a,#0x01
   078A F0                 2629 	movx	@dptr,a
                           2630 ;	LCD.c:390: printf_tiny("\rInvalid input. Please enter valid input\n");
                           2631 ;	genIpush
   078B C0 02              2632 	push	ar2
   078D C0 04              2633 	push	ar4
   078F C0 06              2634 	push	ar6
   0791 74r3C              2635 	mov	a,#__str_10
   0793 C0 E0              2636 	push	acc
   0795 74s01              2637 	mov	a,#(__str_10 >> 8)
   0797 C0 E0              2638 	push	acc
                           2639 ;	genCall
   0799 12s00r00           2640 	lcall	_printf_tiny
   079C 15 81              2641 	dec	sp
   079E 15 81              2642 	dec	sp
   07A0 D0 06              2643 	pop	ar6
   07A2 D0 04              2644 	pop	ar4
   07A4 D0 02              2645 	pop	ar2
                           2646 ;	LCD.c:391: j=j-1;
                           2647 ;	genMinus
                           2648 ;	genMinusDec
   07A6 EE                 2649 	mov	a,r6
   07A7 14                 2650 	dec	a
                           2651 ;	genAssign
   07A8 90s00r14           2652 	mov	dptr,#_custom_char_j_1_1
   07AB F0                 2653 	movx	@dptr,a
   07AC                    2654 00122$:
                           2655 ;	LCD.c:378: for(j=0; j<5; j++){
                           2656 ;	genAssign
   07AC 90s00r14           2657 	mov	dptr,#_custom_char_j_1_1
   07AF E0                 2658 	movx	a,@dptr
   07B0 FB                 2659 	mov	r3,a
                           2660 ;	genPlus
   07B1 90s00r14           2661 	mov	dptr,#_custom_char_j_1_1
                           2662 ;     genPlusIncr
   07B4 74 01              2663 	mov	a,#0x01
                           2664 ;	Peephole 236.a	used r3 instead of ar3
   07B6 2B                 2665 	add	a,r3
   07B7 F0                 2666 	movx	@dptr,a
   07B8 02s07r0C           2667 	ljmp	00120$
   07BB                    2668 00125$:
                           2669 ;	LCD.c:394: }while(invalid_bit == 0x01);
                           2670 ;	genAssign
   07BB 90s00r15           2671 	mov	dptr,#_custom_char_invalid_bit_1_1
   07BE E0                 2672 	movx	a,@dptr
   07BF FB                 2673 	mov	r3,a
                           2674 ;	genCmpEq
                           2675 ;	gencjneshort
   07C0 BB 01 03           2676 	cjne	r3,#0x01,00184$
   07C3 02s06rE1           2677 	ljmp	00124$
   07C6                    2678 00184$:
                           2679 ;	LCD.c:395: if(invalid_bit ==0){
                           2680 ;	genIfx
   07C6 EB                 2681 	mov	a,r3
                           2682 ;	genIfxJump
   07C7 60 03              2683 	jz	00185$
   07C9 02s08r62           2684 	ljmp	00131$
   07CC                    2685 00185$:
                           2686 ;	LCD.c:396: printf_tiny("\r");
                           2687 ;	genIpush
   07CC C0 02              2688 	push	ar2
   07CE 74r3C              2689 	mov	a,#__str_2
   07D0 C0 E0              2690 	push	acc
   07D2 74s00              2691 	mov	a,#(__str_2 >> 8)
   07D4 C0 E0              2692 	push	acc
                           2693 ;	genCall
   07D6 12s00r00           2694 	lcall	_printf_tiny
   07D9 15 81              2695 	dec	sp
   07DB 15 81              2696 	dec	sp
   07DD D0 02              2697 	pop	ar2
                           2698 ;	LCD.c:397: for(k=0; k<8; k++){
                           2699 ;	genAssign
   07DF 7B 00              2700 	mov	r3,#0x00
   07E1                    2701 00139$:
                           2702 ;	genCmpLt
                           2703 ;	genCmp
   07E1 BB 08 00           2704 	cjne	r3,#0x08,00186$
   07E4                    2705 00186$:
                           2706 ;	genIfxJump
   07E4 40 03              2707 	jc	00187$
   07E6 02s08r62           2708 	ljmp	00131$
   07E9                    2709 00187$:
                           2710 ;	LCD.c:398: for(j=0; j<5; j++){
                           2711 ;	genPlus
                           2712 ;	Peephole 236.g	used r3 instead of ar3
   07E9 EB                 2713 	mov	a,r3
   07EA 24r16              2714 	add	a,#_custom_char_cgram_data_1_1
   07EC FC                 2715 	mov	r4,a
                           2716 ;	Peephole 181	changed mov to clr
   07ED E4                 2717 	clr	a
   07EE 34s00              2718 	addc	a,#(_custom_char_cgram_data_1_1 >> 8)
   07F0 FD                 2719 	mov	r5,a
                           2720 ;	genAssign
   07F1 7E 00              2721 	mov	r6,#0x00
   07F3                    2722 00135$:
                           2723 ;	genCmpLt
                           2724 ;	genCmp
   07F3 BE 05 00           2725 	cjne	r6,#0x05,00188$
   07F6                    2726 00188$:
                           2727 ;	genIfxJump
                           2728 ;	Peephole 108.a	removed ljmp by inverse jump logic
   07F6 50 4F              2729 	jnc	00138$
                           2730 ;	Peephole 300	removed redundant label 00189$
                           2731 ;	LCD.c:399: temp = ((cgram_data[k]>>(4-j)) & 0x01);
                           2732 ;	genPointerGet
                           2733 ;	genFarPointerGet
   07F8 8C 82              2734 	mov	dpl,r4
   07FA 8D 83              2735 	mov	dph,r5
   07FC E0                 2736 	movx	a,@dptr
   07FD FF                 2737 	mov	r7,a
                           2738 ;	genCast
   07FE 8E 00              2739 	mov	ar0,r6
   0800 79 00              2740 	mov	r1,#0x00
                           2741 ;	genMinus
   0802 74 04              2742 	mov	a,#0x04
   0804 C3                 2743 	clr	c
                           2744 ;	Peephole 236.l	used r0 instead of ar0
   0805 98                 2745 	subb	a,r0
   0806 F8                 2746 	mov	r0,a
                           2747 ;	Peephole 181	changed mov to clr
   0807 E4                 2748 	clr	a
                           2749 ;	Peephole 236.l	used r1 instead of ar1
   0808 99                 2750 	subb	a,r1
   0809 F9                 2751 	mov	r1,a
                           2752 ;	genRightShift
   080A 88 F0              2753 	mov	b,r0
   080C 05 F0              2754 	inc	b
   080E EF                 2755 	mov	a,r7
   080F 80 02              2756 	sjmp	00191$
   0811                    2757 00190$:
   0811 C3                 2758 	clr	c
   0812 13                 2759 	rrc	a
   0813                    2760 00191$:
   0813 D5 F0 FB           2761 	djnz	b,00190$
                           2762 ;	genAnd
   0816 54 01              2763 	anl	a,#0x01
   0818 FF                 2764 	mov	r7,a
                           2765 ;	LCD.c:400: printf_tiny("%d", temp);
                           2766 ;	genCast
   0819 78 00              2767 	mov	r0,#0x00
                           2768 ;	genIpush
   081B C0 02              2769 	push	ar2
   081D C0 03              2770 	push	ar3
   081F C0 04              2771 	push	ar4
   0821 C0 05              2772 	push	ar5
   0823 C0 06              2773 	push	ar6
   0825 C0 07              2774 	push	ar7
   0827 C0 00              2775 	push	ar0
                           2776 ;	genIpush
   0829 74r66              2777 	mov	a,#__str_11
   082B C0 E0              2778 	push	acc
   082D 74s01              2779 	mov	a,#(__str_11 >> 8)
   082F C0 E0              2780 	push	acc
                           2781 ;	genCall
   0831 12s00r00           2782 	lcall	_printf_tiny
   0834 E5 81              2783 	mov	a,sp
   0836 24 FC              2784 	add	a,#0xfc
   0838 F5 81              2785 	mov	sp,a
   083A D0 06              2786 	pop	ar6
   083C D0 05              2787 	pop	ar5
   083E D0 04              2788 	pop	ar4
   0840 D0 03              2789 	pop	ar3
   0842 D0 02              2790 	pop	ar2
                           2791 ;	LCD.c:398: for(j=0; j<5; j++){
                           2792 ;	genPlus
                           2793 ;     genPlusIncr
   0844 0E                 2794 	inc	r6
                           2795 ;	Peephole 112.b	changed ljmp to sjmp
   0845 80 AC              2796 	sjmp	00135$
   0847                    2797 00138$:
                           2798 ;	LCD.c:402: printf_tiny("\n\r");
                           2799 ;	genIpush
   0847 C0 02              2800 	push	ar2
   0849 C0 03              2801 	push	ar3
   084B 74r69              2802 	mov	a,#__str_12
   084D C0 E0              2803 	push	acc
   084F 74s01              2804 	mov	a,#(__str_12 >> 8)
   0851 C0 E0              2805 	push	acc
                           2806 ;	genCall
   0853 12s00r00           2807 	lcall	_printf_tiny
   0856 15 81              2808 	dec	sp
   0858 15 81              2809 	dec	sp
   085A D0 03              2810 	pop	ar3
   085C D0 02              2811 	pop	ar2
                           2812 ;	LCD.c:397: for(k=0; k<8; k++){
                           2813 ;	genPlus
                           2814 ;     genPlusIncr
   085E 0B                 2815 	inc	r3
   085F 02s07rE1           2816 	ljmp	00139$
   0862                    2817 00131$:
                           2818 ;	LCD.c:369: for(i=0; i<8; i++){
                           2819 ;	genPlus
                           2820 ;     genPlusIncr
   0862 05*00              2821 	inc	_custom_char_sloc0_1_0
   0864 02s06rCD           2822 	ljmp	00129$
   0867                    2823 00132$:
                           2824 ;	LCD.c:407: if(i==8){
                           2825 ;	genCmpEq
                           2826 ;	gencjneshort
   0867 E5*00              2827 	mov	a,_custom_char_sloc0_1_0
                           2828 ;	Peephole 112.b	changed ljmp to sjmp
                           2829 ;	Peephole 198.b	optimized misc jump sequence
   0869 B4 08 18           2830 	cjne	a,#0x08,00143$
                           2831 ;	Peephole 200.b	removed redundant sjmp
                           2832 ;	Peephole 300	removed redundant label 00192$
                           2833 ;	Peephole 300	removed redundant label 00193$
                           2834 ;	LCD.c:408: lcdcreatechar(char_code, cgram_data);
                           2835 ;	genAssign
   086C 90s00r13           2836 	mov	dptr,#_custom_char_char_code_1_1
   086F E0                 2837 	movx	a,@dptr
   0870 FA                 2838 	mov	r2,a
                           2839 ;	genCast
   0871 90s00r0F           2840 	mov	dptr,#_lcdcreatechar_PARM_2
   0874 74r16              2841 	mov	a,#_custom_char_cgram_data_1_1
   0876 F0                 2842 	movx	@dptr,a
   0877 A3                 2843 	inc	dptr
   0878 74s00              2844 	mov	a,#(_custom_char_cgram_data_1_1 >> 8)
   087A F0                 2845 	movx	@dptr,a
   087B A3                 2846 	inc	dptr
   087C 74 00              2847 	mov	a,#0x0
   087E F0                 2848 	movx	@dptr,a
                           2849 ;	genCall
   087F 8A 82              2850 	mov	dpl,r2
                           2851 ;	Peephole 253.c	replaced lcall with ljmp
   0881 02s05r84           2852 	ljmp	_lcdcreatechar
   0884                    2853 00143$:
   0884 22                 2854 	ret
                           2855 ;------------------------------------------------------------
                           2856 ;Allocation info for local variables in function 'char_match'
                           2857 ;------------------------------------------------------------
                           2858 ;str_len                   Allocated with name '_char_match_PARM_2'
                           2859 ;temp_addr                 Allocated with name '_char_match_PARM_3'
                           2860 ;str                       Allocated with name '_char_match_str_1_1'
                           2861 ;temp_addr_2               Allocated with name '_char_match_temp_addr_2_1_1'
                           2862 ;temp_data                 Allocated with name '_char_match_temp_data_1_1'
                           2863 ;------------------------------------------------------------
                           2864 ;	LCD.c:413: unsigned char char_match(unsigned char *str, unsigned char str_len, unsigned char temp_addr){
                           2865 ;	-----------------------------------------
                           2866 ;	 function char_match
                           2867 ;	-----------------------------------------
   0885                    2868 _char_match:
                           2869 ;	genReceive
   0885 AA F0              2870 	mov	r2,b
   0887 AB 83              2871 	mov	r3,dph
   0889 E5 82              2872 	mov	a,dpl
   088B 90s00r20           2873 	mov	dptr,#_char_match_str_1_1
   088E F0                 2874 	movx	@dptr,a
   088F A3                 2875 	inc	dptr
   0890 EB                 2876 	mov	a,r3
   0891 F0                 2877 	movx	@dptr,a
   0892 A3                 2878 	inc	dptr
   0893 EA                 2879 	mov	a,r2
   0894 F0                 2880 	movx	@dptr,a
                           2881 ;	LCD.c:415: if(str_len == 1){
                           2882 ;	genAssign
   0895 90s00r1E           2883 	mov	dptr,#_char_match_PARM_2
   0898 E0                 2884 	movx	a,@dptr
   0899 FA                 2885 	mov	r2,a
                           2886 ;	genCmpEq
                           2887 ;	gencjneshort
                           2888 ;	Peephole 112.b	changed ljmp to sjmp
                           2889 ;	Peephole 198.b	optimized misc jump sequence
   089A BA 01 04           2890 	cjne	r2,#0x01,00102$
                           2891 ;	Peephole 200.b	removed redundant sjmp
                           2892 ;	Peephole 300	removed redundant label 00114$
                           2893 ;	Peephole 300	removed redundant label 00115$
                           2894 ;	LCD.c:416: return 0;
                           2895 ;	genRet
   089D 75 82 00           2896 	mov	dpl,#0x00
                           2897 ;	Peephole 251.a	replaced ljmp to ret with ret
   08A0 22                 2898 	ret
   08A1                    2899 00102$:
                           2900 ;	LCD.c:418: printf_tiny("\rstr_len=%d temp_addr = %x\n", str_len, temp_addr);
                           2901 ;	genAssign
   08A1 90s00r1F           2902 	mov	dptr,#_char_match_PARM_3
   08A4 E0                 2903 	movx	a,@dptr
   08A5 FB                 2904 	mov	r3,a
                           2905 ;	genCast
   08A6 8B 04              2906 	mov	ar4,r3
   08A8 7D 00              2907 	mov	r5,#0x00
                           2908 ;	genCast
   08AA 8A 06              2909 	mov	ar6,r2
   08AC 7F 00              2910 	mov	r7,#0x00
                           2911 ;	genIpush
   08AE C0 02              2912 	push	ar2
   08B0 C0 03              2913 	push	ar3
   08B2 C0 06              2914 	push	ar6
   08B4 C0 07              2915 	push	ar7
   08B6 C0 04              2916 	push	ar4
   08B8 C0 05              2917 	push	ar5
                           2918 ;	genIpush
   08BA C0 06              2919 	push	ar6
   08BC C0 07              2920 	push	ar7
                           2921 ;	genIpush
   08BE 74r6C              2922 	mov	a,#__str_13
   08C0 C0 E0              2923 	push	acc
   08C2 74s01              2924 	mov	a,#(__str_13 >> 8)
   08C4 C0 E0              2925 	push	acc
                           2926 ;	genCall
   08C6 12s00r00           2927 	lcall	_printf_tiny
   08C9 E5 81              2928 	mov	a,sp
   08CB 24 FA              2929 	add	a,#0xfa
   08CD F5 81              2930 	mov	sp,a
   08CF D0 07              2931 	pop	ar7
   08D1 D0 06              2932 	pop	ar6
   08D3 D0 03              2933 	pop	ar3
   08D5 D0 02              2934 	pop	ar2
                           2935 ;	LCD.c:425: if(((temp_addr & 0x0F) + str_len - 1)> 0x0F){
                           2936 ;	genAnd
   08D7 74 0F              2937 	mov	a,#0x0F
   08D9 5B                 2938 	anl	a,r3
   08DA FC                 2939 	mov	r4,a
                           2940 ;	genCast
   08DB 7D 00              2941 	mov	r5,#0x00
                           2942 ;	genPlus
                           2943 ;	Peephole 236.g	used r6 instead of ar6
   08DD EE                 2944 	mov	a,r6
                           2945 ;	Peephole 236.a	used r4 instead of ar4
   08DE 2C                 2946 	add	a,r4
   08DF FC                 2947 	mov	r4,a
                           2948 ;	Peephole 236.g	used r7 instead of ar7
   08E0 EF                 2949 	mov	a,r7
                           2950 ;	Peephole 236.b	used r5 instead of ar5
   08E1 3D                 2951 	addc	a,r5
   08E2 FD                 2952 	mov	r5,a
                           2953 ;	genMinus
                           2954 ;	genMinusDec
   08E3 1C                 2955 	dec	r4
   08E4 BC FF 01           2956 	cjne	r4,#0xff,00116$
   08E7 1D                 2957 	dec	r5
   08E8                    2958 00116$:
                           2959 ;	genCmpGt
                           2960 ;	genCmp
   08E8 C3                 2961 	clr	c
   08E9 74 0F              2962 	mov	a,#0x0F
   08EB 9C                 2963 	subb	a,r4
                           2964 ;	Peephole 159	avoided xrl during execution
   08EC 74 80              2965 	mov	a,#(0x00 ^ 0x80)
   08EE 8D F0              2966 	mov	b,r5
   08F0 63 F0 80           2967 	xrl	b,#0x80
   08F3 95 F0              2968 	subb	a,b
                           2969 ;	genIfxJump
   08F5 40 03              2970 	jc	00117$
   08F7 02s09r7E           2971 	ljmp	00104$
   08FA                    2972 00117$:
                           2973 ;	LCD.c:426: temp_addr_2 = wrap_cursor((temp_addr & 0xF0) | 0x8F);
                           2974 ;	genAnd
   08FA 74 F0              2975 	mov	a,#0xF0
   08FC 5B                 2976 	anl	a,r3
                           2977 ;	genOr
   08FD 44 8F              2978 	orl	a,#0x8F
                           2979 ;	genCall
   08FF FC                 2980 	mov	r4,a
                           2981 ;	Peephole 244.c	loading dpl from a instead of r4
   0900 F5 82              2982 	mov	dpl,a
   0902 C0 02              2983 	push	ar2
   0904 C0 03              2984 	push	ar3
   0906 C0 06              2985 	push	ar6
   0908 C0 07              2986 	push	ar7
   090A 12s01r84           2987 	lcall	_wrap_cursor
   090D AC 82              2988 	mov	r4,dpl
   090F D0 07              2989 	pop	ar7
   0911 D0 06              2990 	pop	ar6
   0913 D0 03              2991 	pop	ar3
   0915 D0 02              2992 	pop	ar2
                           2993 ;	LCD.c:427: lcdgotoaddr(temp_addr_2 + (((temp_addr & 0x0F) + str_len - 1) & 0x0F));
                           2994 ;	genAnd
   0917 74 0F              2995 	mov	a,#0x0F
   0919 5B                 2996 	anl	a,r3
                           2997 ;	genPlus
                           2998 ;	Peephole 236.g	used r2 instead of ar2
                           2999 ;	Peephole 236.a	used r5 instead of ar5
   091A FD                 3000 	mov	r5,a
                           3001 ;	Peephole 214	reduced some extra moves
   091B 2A                 3002 	add	a,r2
                           3003 ;	genMinus
                           3004 ;	genMinusDec
   091C 14                 3005 	dec	a
                           3006 ;	genAnd
   091D 54 0F              3007 	anl	a,#0x0F
                           3008 ;	genPlus
                           3009 ;	Peephole 236.a	used r4 instead of ar4
   091F 2C                 3010 	add	a,r4
                           3011 ;	genCall
   0920 F8                 3012 	mov	r0,a
                           3013 ;	Peephole 244.c	loading dpl from a instead of r0
   0921 F5 82              3014 	mov	dpl,a
   0923 C0 02              3015 	push	ar2
   0925 C0 03              3016 	push	ar3
   0927 C0 04              3017 	push	ar4
   0929 C0 05              3018 	push	ar5
   092B C0 06              3019 	push	ar6
   092D C0 07              3020 	push	ar7
   092F 12s00r8F           3021 	lcall	_lcdgotoaddr
   0932 D0 07              3022 	pop	ar7
   0934 D0 06              3023 	pop	ar6
   0936 D0 05              3024 	pop	ar5
   0938 D0 04              3025 	pop	ar4
   093A D0 03              3026 	pop	ar3
   093C D0 02              3027 	pop	ar2
                           3028 ;	LCD.c:428: printf_tiny("\r post wrap address=%x\n", temp_addr_2 + (((temp_addr & 0x0F) + str_len - 1) & 0x0F));
                           3029 ;	genCast
                           3030 ;	genCast
                           3031 ;	genPlus
                           3032 ;	Peephole 3.c	changed mov to clr
   093E E4                 3033 	clr	a
   093F F8                 3034 	mov	r0,a
   0940 F9                 3035 	mov	r1,a
                           3036 ;	Peephole 236.g	used r6 instead of ar6
   0941 EE                 3037 	mov	a,r6
                           3038 ;	Peephole 236.a	used r5 instead of ar5
   0942 2D                 3039 	add	a,r5
   0943 FD                 3040 	mov	r5,a
                           3041 ;	Peephole 236.g	used r7 instead of ar7
   0944 EF                 3042 	mov	a,r7
                           3043 ;	Peephole 236.b	used r1 instead of ar1
   0945 39                 3044 	addc	a,r1
   0946 F9                 3045 	mov	r1,a
                           3046 ;	genMinus
                           3047 ;	genMinusDec
   0947 1D                 3048 	dec	r5
   0948 BD FF 01           3049 	cjne	r5,#0xff,00118$
   094B 19                 3050 	dec	r1
   094C                    3051 00118$:
                           3052 ;	genAnd
   094C 53 05 0F           3053 	anl	ar5,#0x0F
   094F 79 00              3054 	mov	r1,#0x00
                           3055 ;	genPlus
                           3056 ;	Peephole 236.g	used r5 instead of ar5
   0951 ED                 3057 	mov	a,r5
                           3058 ;	Peephole 236.a	used r4 instead of ar4
   0952 2C                 3059 	add	a,r4
   0953 FC                 3060 	mov	r4,a
                           3061 ;	Peephole 236.g	used r1 instead of ar1
   0954 E9                 3062 	mov	a,r1
                           3063 ;	Peephole 236.b	used r0 instead of ar0
   0955 38                 3064 	addc	a,r0
   0956 F8                 3065 	mov	r0,a
                           3066 ;	genIpush
   0957 C0 02              3067 	push	ar2
   0959 C0 03              3068 	push	ar3
   095B C0 06              3069 	push	ar6
   095D C0 07              3070 	push	ar7
   095F C0 04              3071 	push	ar4
   0961 C0 00              3072 	push	ar0
                           3073 ;	genIpush
   0963 74r88              3074 	mov	a,#__str_14
   0965 C0 E0              3075 	push	acc
   0967 74s01              3076 	mov	a,#(__str_14 >> 8)
   0969 C0 E0              3077 	push	acc
                           3078 ;	genCall
   096B 12s00r00           3079 	lcall	_printf_tiny
   096E E5 81              3080 	mov	a,sp
   0970 24 FC              3081 	add	a,#0xfc
   0972 F5 81              3082 	mov	sp,a
   0974 D0 07              3083 	pop	ar7
   0976 D0 06              3084 	pop	ar6
   0978 D0 03              3085 	pop	ar3
   097A D0 02              3086 	pop	ar2
                           3087 ;	Peephole 112.b	changed ljmp to sjmp
   097C 80 1B              3088 	sjmp	00105$
   097E                    3089 00104$:
                           3090 ;	LCD.c:431: lcdgotoaddr((temp_addr | 0x80) + str_len - 1);
                           3091 ;	genOr
   097E 74 80              3092 	mov	a,#0x80
   0980 4B                 3093 	orl	a,r3
                           3094 ;	genPlus
                           3095 ;	Peephole 236.a	used r2 instead of ar2
   0981 2A                 3096 	add	a,r2
                           3097 ;	genMinus
                           3098 ;	genMinusDec
   0982 14                 3099 	dec	a
                           3100 ;	genCall
   0983 FC                 3101 	mov	r4,a
                           3102 ;	Peephole 244.c	loading dpl from a instead of r4
   0984 F5 82              3103 	mov	dpl,a
   0986 C0 02              3104 	push	ar2
   0988 C0 03              3105 	push	ar3
   098A C0 06              3106 	push	ar6
   098C C0 07              3107 	push	ar7
   098E 12s00r8F           3108 	lcall	_lcdgotoaddr
   0991 D0 07              3109 	pop	ar7
   0993 D0 06              3110 	pop	ar6
   0995 D0 03              3111 	pop	ar3
   0997 D0 02              3112 	pop	ar2
   0999                    3113 00105$:
                           3114 ;	LCD.c:433: check_busy_flag();
                           3115 ;	genCall
   0999 C0 02              3116 	push	ar2
   099B C0 03              3117 	push	ar3
   099D C0 06              3118 	push	ar6
   099F C0 07              3119 	push	ar7
   09A1 12s00r00           3120 	lcall	_check_busy_flag
   09A4 D0 07              3121 	pop	ar7
   09A6 D0 06              3122 	pop	ar6
   09A8 D0 03              3123 	pop	ar3
   09AA D0 02              3124 	pop	ar2
                           3125 ;	LCD.c:434: LCD_RS=1;
                           3126 ;	genAssign
   09AC D2 93              3127 	setb	_P1_3
                           3128 ;	LCD.c:435: LCD_RW=1;
                           3129 ;	genAssign
   09AE D2 94              3130 	setb	_P1_4
                           3131 ;	LCD.c:436: temp_data = *RD_LCD_INSTR;
                           3132 ;	genPointerGet
                           3133 ;	genFarPointerGet
                           3134 ;	Peephole 182.b	used 16 bit load of dptr
   09B0 90 80 11           3135 	mov	dptr,#0x8011
   09B3 E0                 3136 	movx	a,@dptr
   09B4 FC                 3137 	mov	r4,a
                           3138 ;	LCD.c:437: printf_tiny("\rLetter scanned = %x at location %x\n", temp_data, ((temp_addr | 0x80) + str_len - 1));
                           3139 ;	genOr
   09B5 74 80              3140 	mov	a,#0x80
   09B7 4B                 3141 	orl	a,r3
   09B8 FD                 3142 	mov	r5,a
                           3143 ;	genCast
   09B9 78 00              3144 	mov	r0,#0x00
                           3145 ;	genPlus
                           3146 ;	Peephole 236.g	used r6 instead of ar6
   09BB EE                 3147 	mov	a,r6
                           3148 ;	Peephole 236.a	used r5 instead of ar5
   09BC 2D                 3149 	add	a,r5
   09BD FE                 3150 	mov	r6,a
                           3151 ;	Peephole 236.g	used r7 instead of ar7
   09BE EF                 3152 	mov	a,r7
                           3153 ;	Peephole 236.b	used r0 instead of ar0
   09BF 38                 3154 	addc	a,r0
   09C0 FF                 3155 	mov	r7,a
                           3156 ;	genMinus
                           3157 ;	genMinusDec
   09C1 1E                 3158 	dec	r6
   09C2 BE FF 01           3159 	cjne	r6,#0xff,00119$
   09C5 1F                 3160 	dec	r7
   09C6                    3161 00119$:
                           3162 ;	genCast
   09C6 8C 05              3163 	mov	ar5,r4
   09C8 78 00              3164 	mov	r0,#0x00
                           3165 ;	genIpush
   09CA C0 02              3166 	push	ar2
   09CC C0 03              3167 	push	ar3
   09CE C0 04              3168 	push	ar4
   09D0 C0 06              3169 	push	ar6
   09D2 C0 07              3170 	push	ar7
                           3171 ;	genIpush
   09D4 C0 05              3172 	push	ar5
   09D6 C0 00              3173 	push	ar0
                           3174 ;	genIpush
   09D8 74rA0              3175 	mov	a,#__str_15
   09DA C0 E0              3176 	push	acc
   09DC 74s01              3177 	mov	a,#(__str_15 >> 8)
   09DE C0 E0              3178 	push	acc
                           3179 ;	genCall
   09E0 12s00r00           3180 	lcall	_printf_tiny
   09E3 E5 81              3181 	mov	a,sp
   09E5 24 FA              3182 	add	a,#0xfa
   09E7 F5 81              3183 	mov	sp,a
   09E9 D0 04              3184 	pop	ar4
   09EB D0 03              3185 	pop	ar3
   09ED D0 02              3186 	pop	ar2
                           3187 ;	LCD.c:438: if(temp_data != *(str + str_len - 1)){
                           3188 ;	genAssign
   09EF 90s00r20           3189 	mov	dptr,#_char_match_str_1_1
   09F2 E0                 3190 	movx	a,@dptr
   09F3 FD                 3191 	mov	r5,a
   09F4 A3                 3192 	inc	dptr
   09F5 E0                 3193 	movx	a,@dptr
   09F6 FE                 3194 	mov	r6,a
   09F7 A3                 3195 	inc	dptr
   09F8 E0                 3196 	movx	a,@dptr
   09F9 FF                 3197 	mov	r7,a
                           3198 ;	genIpush
   09FA C0 03              3199 	push	ar3
                           3200 ;	genPlus
                           3201 ;	Peephole 236.g	used r2 instead of ar2
   09FC EA                 3202 	mov	a,r2
                           3203 ;	Peephole 236.a	used r5 instead of ar5
   09FD 2D                 3204 	add	a,r5
   09FE F8                 3205 	mov	r0,a
                           3206 ;	Peephole 181	changed mov to clr
   09FF E4                 3207 	clr	a
                           3208 ;	Peephole 236.b	used r6 instead of ar6
   0A00 3E                 3209 	addc	a,r6
   0A01 F9                 3210 	mov	r1,a
   0A02 8F 03              3211 	mov	ar3,r7
                           3212 ;	genMinus
                           3213 ;	genMinusDec
   0A04 18                 3214 	dec	r0
   0A05 B8 FF 01           3215 	cjne	r0,#0xff,00120$
   0A08 19                 3216 	dec	r1
   0A09                    3217 00120$:
                           3218 ;	genPointerGet
                           3219 ;	genGenPointerGet
   0A09 88 82              3220 	mov	dpl,r0
   0A0B 89 83              3221 	mov	dph,r1
   0A0D 8B F0              3222 	mov	b,r3
   0A0F 12s00r00           3223 	lcall	__gptrget
   0A12 F8                 3224 	mov	r0,a
                           3225 ;	genCmpEq
                           3226 ;	gencjne
                           3227 ;	gencjneshort
   0A13 EC                 3228 	mov	a,r4
   0A14 B5 00 04           3229 	cjne	a,ar0,00121$
   0A17 74 01              3230 	mov	a,#0x01
   0A19 80 01              3231 	sjmp	00122$
   0A1B                    3232 00121$:
   0A1B E4                 3233 	clr	a
   0A1C                    3234 00122$:
                           3235 ;	genIpop
   0A1C D0 03              3236 	pop	ar3
                           3237 ;	genIfx
                           3238 ;	genIfxJump
                           3239 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0A1E 70 04              3240 	jnz	00107$
                           3241 ;	Peephole 300	removed redundant label 00123$
                           3242 ;	LCD.c:439: return 1;
                           3243 ;	genRet
   0A20 75 82 01           3244 	mov	dpl,#0x01
                           3245 ;	Peephole 112.b	changed ljmp to sjmp
                           3246 ;	Peephole 251.b	replaced sjmp to ret with ret
   0A23 22                 3247 	ret
   0A24                    3248 00107$:
                           3249 ;	LCD.c:442: char_match(str, str_len - 1, temp_addr);
                           3250 ;	genMinus
                           3251 ;	genMinusDec
   0A24 1A                 3252 	dec	r2
                           3253 ;	genAssign
   0A25 90s00r1E           3254 	mov	dptr,#_char_match_PARM_2
   0A28 EA                 3255 	mov	a,r2
   0A29 F0                 3256 	movx	@dptr,a
                           3257 ;	genAssign
   0A2A 90s00r1F           3258 	mov	dptr,#_char_match_PARM_3
   0A2D EB                 3259 	mov	a,r3
   0A2E F0                 3260 	movx	@dptr,a
                           3261 ;	genCall
   0A2F 8D 82              3262 	mov	dpl,r5
   0A31 8E 83              3263 	mov	dph,r6
   0A33 8F F0              3264 	mov	b,r7
                           3265 ;	Peephole 253.b	replaced lcall/ret with ljmp
   0A35 02s08r85           3266 	ljmp	_char_match
                           3267 ;
                           3268 ;------------------------------------------------------------
                           3269 ;Allocation info for local variables in function 'search_string'
                           3270 ;------------------------------------------------------------
                           3271 ;sloc0                     Allocated with name '_search_string_sloc0_1_0'
                           3272 ;sloc1                     Allocated with name '_search_string_sloc1_1_0'
                           3273 ;sloc2                     Allocated with name '_search_string_sloc2_1_0'
                           3274 ;sloc3                     Allocated with name '_search_string_sloc3_1_0'
                           3275 ;sloc4                     Allocated with name '_search_string_sloc4_1_0'
                           3276 ;find_str                  Allocated with name '_search_string_find_str_1_1'
                           3277 ;i                         Allocated with name '_search_string_i_1_1'
                           3278 ;j                         Allocated with name '_search_string_j_1_1'
                           3279 ;temp_i                    Allocated with name '_search_string_temp_i_1_1'
                           3280 ;temp_addr                 Allocated with name '_search_string_temp_addr_1_1'
                           3281 ;rv                        Allocated with name '_search_string_rv_1_1'
                           3282 ;success_search            Allocated with name '_search_string_success_search_1_1'
                           3283 ;------------------------------------------------------------
                           3284 ;	LCD.c:447: void search_string(unsigned char *find_str){
                           3285 ;	-----------------------------------------
                           3286 ;	 function search_string
                           3287 ;	-----------------------------------------
   0A38                    3288 _search_string:
                           3289 ;	genReceive
   0A38 AA F0              3290 	mov	r2,b
   0A3A AB 83              3291 	mov	r3,dph
   0A3C E5 82              3292 	mov	a,dpl
   0A3E 90s00r23           3293 	mov	dptr,#_search_string_find_str_1_1
   0A41 F0                 3294 	movx	@dptr,a
   0A42 A3                 3295 	inc	dptr
   0A43 EB                 3296 	mov	a,r3
   0A44 F0                 3297 	movx	@dptr,a
   0A45 A3                 3298 	inc	dptr
   0A46 EA                 3299 	mov	a,r2
   0A47 F0                 3300 	movx	@dptr,a
                           3301 ;	LCD.c:450: unsigned char rv=0, success_search = 0;
                           3302 ;	genAssign
   0A48 90s00r28           3303 	mov	dptr,#_search_string_success_search_1_1
                           3304 ;	Peephole 181	changed mov to clr
   0A4B E4                 3305 	clr	a
   0A4C F0                 3306 	movx	@dptr,a
                           3307 ;	LCD.c:451: printf("\rString Received is %s\n", find_str);
                           3308 ;	genIpush
   0A4D 90s00r23           3309 	mov	dptr,#_search_string_find_str_1_1
   0A50 E0                 3310 	movx	a,@dptr
   0A51 C0 E0              3311 	push	acc
   0A53 A3                 3312 	inc	dptr
   0A54 E0                 3313 	movx	a,@dptr
   0A55 C0 E0              3314 	push	acc
   0A57 A3                 3315 	inc	dptr
   0A58 E0                 3316 	movx	a,@dptr
   0A59 C0 E0              3317 	push	acc
                           3318 ;	genIpush
   0A5B 74rC5              3319 	mov	a,#__str_16
   0A5D C0 E0              3320 	push	acc
   0A5F 74s01              3321 	mov	a,#(__str_16 >> 8)
   0A61 C0 E0              3322 	push	acc
   0A63 74 80              3323 	mov	a,#0x80
   0A65 C0 E0              3324 	push	acc
                           3325 ;	genCall
   0A67 12s00r00           3326 	lcall	_printf
   0A6A E5 81              3327 	mov	a,sp
   0A6C 24 FA              3328 	add	a,#0xfa
   0A6E F5 81              3329 	mov	sp,a
                           3330 ;	LCD.c:452: print_flag=0x00;
                           3331 ;	genAssign
   0A70 90s00r00           3332 	mov	dptr,#_print_flag
                           3333 ;	Peephole 181	changed mov to clr
   0A73 E4                 3334 	clr	a
   0A74 F0                 3335 	movx	@dptr,a
                           3336 ;	LCD.c:453: temp_addr = lcd_address;
                           3337 ;	genAssign
   0A75 90s00r00           3338 	mov	dptr,#_lcd_address
   0A78 E0                 3339 	movx	a,@dptr
                           3340 ;	genAssign
   0A79 FA                 3341 	mov	r2,a
   0A7A 90s00r27           3342 	mov	dptr,#_search_string_temp_addr_1_1
                           3343 ;	Peephole 100	removed redundant mov
   0A7D F0                 3344 	movx	@dptr,a
                           3345 ;	LCD.c:454: LCD_RS = 1;
                           3346 ;	genAssign
   0A7E D2 93              3347 	setb	_P1_3
                           3348 ;	LCD.c:455: LCD_RW = 1;
                           3349 ;	genAssign
   0A80 D2 94              3350 	setb	_P1_4
                           3351 ;	LCD.c:456: for(i=0; i<=3; i++){
                           3352 ;	genAssign
   0A82 90s00r23           3353 	mov	dptr,#_search_string_find_str_1_1
   0A85 E0                 3354 	movx	a,@dptr
   0A86 FA                 3355 	mov	r2,a
   0A87 A3                 3356 	inc	dptr
   0A88 E0                 3357 	movx	a,@dptr
   0A89 FB                 3358 	mov	r3,a
   0A8A A3                 3359 	inc	dptr
   0A8B E0                 3360 	movx	a,@dptr
   0A8C FC                 3361 	mov	r4,a
                           3362 ;	genAssign
   0A8D 7D 00              3363 	mov	r5,#0x00
   0A8F                    3364 00111$:
                           3365 ;	genCmpGt
                           3366 ;	genCmp
                           3367 ;	genIfxJump
                           3368 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0A8F ED                 3369 	mov	a,r5
   0A90 24 FC              3370 	add	a,#0xff - 0x03
   0A92 50 03              3371 	jnc	00126$
   0A94 02s0CrAB           3372 	ljmp	00114$
   0A97                    3373 00126$:
                           3374 ;	LCD.c:457: lcdgotoxy(i,0);
                           3375 ;	genAssign
   0A97 90s00r05           3376 	mov	dptr,#_lcdgotoxy_PARM_2
                           3377 ;	Peephole 181	changed mov to clr
   0A9A E4                 3378 	clr	a
   0A9B F0                 3379 	movx	@dptr,a
                           3380 ;	genCall
   0A9C 8D 82              3381 	mov	dpl,r5
   0A9E C0 02              3382 	push	ar2
   0AA0 C0 03              3383 	push	ar3
   0AA2 C0 04              3384 	push	ar4
   0AA4 C0 05              3385 	push	ar5
   0AA6 12s01r09           3386 	lcall	_lcdgotoxy
   0AA9 D0 05              3387 	pop	ar5
   0AAB D0 04              3388 	pop	ar4
   0AAD D0 03              3389 	pop	ar3
   0AAF D0 02              3390 	pop	ar2
                           3391 ;	LCD.c:458: temp_i = (read_cursor_addr() & 0x7F);
                           3392 ;	genCall
   0AB1 C0 02              3393 	push	ar2
   0AB3 C0 03              3394 	push	ar3
   0AB5 C0 04              3395 	push	ar4
   0AB7 C0 05              3396 	push	ar5
   0AB9 12s01r64           3397 	lcall	_read_cursor_addr
   0ABC E5 82              3398 	mov	a,dpl
   0ABE D0 05              3399 	pop	ar5
   0AC0 D0 04              3400 	pop	ar4
   0AC2 D0 03              3401 	pop	ar3
   0AC4 D0 02              3402 	pop	ar2
                           3403 ;	genAnd
   0AC6 54 7F              3404 	anl	a,#0x7F
   0AC8 F5*07              3405 	mov	_search_string_sloc4_1_0,a
                           3406 ;	LCD.c:459: printf_tiny("\rtemp=%x\n", temp_i);
                           3407 ;	genCast
   0ACA AF*07              3408 	mov	r7,_search_string_sloc4_1_0
   0ACC 78 00              3409 	mov	r0,#0x00
                           3410 ;	genIpush
   0ACE C0 02              3411 	push	ar2
   0AD0 C0 03              3412 	push	ar3
   0AD2 C0 04              3413 	push	ar4
   0AD4 C0 05              3414 	push	ar5
   0AD6 C0 07              3415 	push	ar7
   0AD8 C0 00              3416 	push	ar0
   0ADA C0 07              3417 	push	ar7
   0ADC C0 00              3418 	push	ar0
                           3419 ;	genIpush
   0ADE 74rDD              3420 	mov	a,#__str_17
   0AE0 C0 E0              3421 	push	acc
   0AE2 74s01              3422 	mov	a,#(__str_17 >> 8)
   0AE4 C0 E0              3423 	push	acc
                           3424 ;	genCall
   0AE6 12s00r00           3425 	lcall	_printf_tiny
   0AE9 E5 81              3426 	mov	a,sp
   0AEB 24 FC              3427 	add	a,#0xfc
   0AED F5 81              3428 	mov	sp,a
   0AEF D0 00              3429 	pop	ar0
   0AF1 D0 07              3430 	pop	ar7
   0AF3 D0 05              3431 	pop	ar5
   0AF5 D0 04              3432 	pop	ar4
   0AF7 D0 03              3433 	pop	ar3
   0AF9 D0 02              3434 	pop	ar2
                           3435 ;	LCD.c:460: for(j=0; j<=15; j++){
                           3436 ;	genAssign
   0AFB 90s00r26           3437 	mov	dptr,#_search_string_j_1_1
                           3438 ;	Peephole 181	changed mov to clr
   0AFE E4                 3439 	clr	a
   0AFF F0                 3440 	movx	@dptr,a
                           3441 ;	genAssign
   0B00 8D 01              3442 	mov	ar1,r5
                           3443 ;	genAssign
   0B02 90s00r28           3444 	mov	dptr,#_search_string_success_search_1_1
   0B05 E0                 3445 	movx	a,@dptr
   0B06 F5*02              3446 	mov	_search_string_sloc0_1_0,a
   0B08                    3447 00107$:
                           3448 ;	genAssign
   0B08 90s00r26           3449 	mov	dptr,#_search_string_j_1_1
   0B0B E0                 3450 	movx	a,@dptr
   0B0C F5*03              3451 	mov	_search_string_sloc1_1_0,a
                           3452 ;	genCmpGt
                           3453 ;	genCmp
                           3454 ;	genIfxJump
                           3455 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0B0E E5*03              3456 	mov	a,_search_string_sloc1_1_0
   0B10 24 F0              3457 	add	a,#0xff - 0x0F
   0B12 50 03              3458 	jnc	00127$
   0B14 02s0CrA1           3459 	ljmp	00124$
   0B17                    3460 00127$:
                           3461 ;	LCD.c:461: lcdgotoxy(i,j);
                           3462 ;	genIpush
                           3463 ;	genAssign
   0B17 90s00r05           3464 	mov	dptr,#_lcdgotoxy_PARM_2
   0B1A E5*03              3465 	mov	a,_search_string_sloc1_1_0
   0B1C F0                 3466 	movx	@dptr,a
                           3467 ;	genCall
   0B1D 89 82              3468 	mov	dpl,r1
   0B1F C0 02              3469 	push	ar2
   0B21 C0 03              3470 	push	ar3
   0B23 C0 04              3471 	push	ar4
   0B25 C0 05              3472 	push	ar5
   0B27 C0 07              3473 	push	ar7
   0B29 C0 00              3474 	push	ar0
   0B2B C0 01              3475 	push	ar1
   0B2D 12s01r09           3476 	lcall	_lcdgotoxy
   0B30 D0 01              3477 	pop	ar1
   0B32 D0 00              3478 	pop	ar0
   0B34 D0 07              3479 	pop	ar7
   0B36 D0 05              3480 	pop	ar5
   0B38 D0 04              3481 	pop	ar4
   0B3A D0 03              3482 	pop	ar3
   0B3C D0 02              3483 	pop	ar2
                           3484 ;	LCD.c:462: check_busy_flag();
                           3485 ;	genCall
   0B3E C0 02              3486 	push	ar2
   0B40 C0 03              3487 	push	ar3
   0B42 C0 04              3488 	push	ar4
   0B44 C0 05              3489 	push	ar5
   0B46 C0 07              3490 	push	ar7
   0B48 C0 00              3491 	push	ar0
   0B4A C0 01              3492 	push	ar1
   0B4C 12s00r00           3493 	lcall	_check_busy_flag
   0B4F D0 01              3494 	pop	ar1
   0B51 D0 00              3495 	pop	ar0
   0B53 D0 07              3496 	pop	ar7
   0B55 D0 05              3497 	pop	ar5
   0B57 D0 04              3498 	pop	ar4
   0B59 D0 03              3499 	pop	ar3
   0B5B D0 02              3500 	pop	ar2
                           3501 ;	LCD.c:463: LCD_RS=1;
                           3502 ;	genAssign
   0B5D D2 93              3503 	setb	_P1_3
                           3504 ;	LCD.c:464: LCD_RW=1;
                           3505 ;	genAssign
   0B5F D2 94              3506 	setb	_P1_4
                           3507 ;	LCD.c:465: if(*RD_LCD_INSTR == *find_str){
                           3508 ;	genPointerGet
                           3509 ;	genFarPointerGet
                           3510 ;	Peephole 182.b	used 16 bit load of dptr
   0B61 90 80 11           3511 	mov	dptr,#0x8011
   0B64 E0                 3512 	movx	a,@dptr
   0B65 F5*04              3513 	mov	_search_string_sloc2_1_0,a
                           3514 ;	genPointerGet
                           3515 ;	genGenPointerGet
   0B67 8A 82              3516 	mov	dpl,r2
   0B69 8B 83              3517 	mov	dph,r3
   0B6B 8C F0              3518 	mov	b,r4
   0B6D 12s00r00           3519 	lcall	__gptrget
   0B70 FE                 3520 	mov	r6,a
                           3521 ;	genCmpEq
                           3522 ;	gencjne
                           3523 ;	gencjneshort
   0B71 E5*04              3524 	mov	a,_search_string_sloc2_1_0
   0B73 B5 06 04           3525 	cjne	a,ar6,00128$
   0B76 74 01              3526 	mov	a,#0x01
   0B78 80 01              3527 	sjmp	00129$
   0B7A                    3528 00128$:
   0B7A E4                 3529 	clr	a
   0B7B                    3530 00129$:
                           3531 ;	genIpop
                           3532 ;	genIfx
                           3533 ;	genIfxJump
   0B7B 70 03              3534 	jnz	00130$
   0B7D 02s0Cr92           3535 	ljmp	00109$
   0B80                    3536 00130$:
                           3537 ;	LCD.c:466: printf_tiny("\rCharacter matched occurred at address %x\n", temp_i + j);
                           3538 ;	genIpush
   0B80 C0 01              3539 	push	ar1
                           3540 ;	genCast
   0B82 85*03*05           3541 	mov	_search_string_sloc3_1_0,_search_string_sloc1_1_0
   0B85 75*06 00           3542 	mov	(_search_string_sloc3_1_0 + 1),#0x00
                           3543 ;	genPlus
   0B88 E5*05              3544 	mov	a,_search_string_sloc3_1_0
                           3545 ;	Peephole 236.a	used r7 instead of ar7
   0B8A 2F                 3546 	add	a,r7
   0B8B F9                 3547 	mov	r1,a
   0B8C E5*06              3548 	mov	a,(_search_string_sloc3_1_0 + 1)
                           3549 ;	Peephole 236.b	used r0 instead of ar0
   0B8E 38                 3550 	addc	a,r0
   0B8F FE                 3551 	mov	r6,a
                           3552 ;	genIpush
   0B90 C0 02              3553 	push	ar2
   0B92 C0 03              3554 	push	ar3
   0B94 C0 04              3555 	push	ar4
   0B96 C0 05              3556 	push	ar5
   0B98 C0 07              3557 	push	ar7
   0B9A C0 00              3558 	push	ar0
   0B9C C0 01              3559 	push	ar1
   0B9E C0 01              3560 	push	ar1
   0BA0 C0 06              3561 	push	ar6
                           3562 ;	genIpush
   0BA2 74rE7              3563 	mov	a,#__str_18
   0BA4 C0 E0              3564 	push	acc
   0BA6 74s01              3565 	mov	a,#(__str_18 >> 8)
   0BA8 C0 E0              3566 	push	acc
                           3567 ;	genCall
   0BAA 12s00r00           3568 	lcall	_printf_tiny
   0BAD E5 81              3569 	mov	a,sp
   0BAF 24 FC              3570 	add	a,#0xfc
   0BB1 F5 81              3571 	mov	sp,a
   0BB3 D0 01              3572 	pop	ar1
   0BB5 D0 00              3573 	pop	ar0
   0BB7 D0 07              3574 	pop	ar7
   0BB9 D0 05              3575 	pop	ar5
   0BBB D0 04              3576 	pop	ar4
   0BBD D0 03              3577 	pop	ar3
   0BBF D0 02              3578 	pop	ar2
                           3579 ;	LCD.c:467: rv = char_match(find_str, strlen(find_str) - 1, temp_i+j);
                           3580 ;	genCall
   0BC1 8A 82              3581 	mov	dpl,r2
   0BC3 8B 83              3582 	mov	dph,r3
   0BC5 8C F0              3583 	mov	b,r4
   0BC7 C0 02              3584 	push	ar2
   0BC9 C0 03              3585 	push	ar3
   0BCB C0 04              3586 	push	ar4
   0BCD C0 05              3587 	push	ar5
   0BCF C0 07              3588 	push	ar7
   0BD1 C0 00              3589 	push	ar0
   0BD3 12s00r00           3590 	lcall	_strlen
   0BD6 AE 82              3591 	mov	r6,dpl
   0BD8 A9 83              3592 	mov	r1,dph
   0BDA D0 00              3593 	pop	ar0
   0BDC D0 07              3594 	pop	ar7
   0BDE D0 05              3595 	pop	ar5
   0BE0 D0 04              3596 	pop	ar4
   0BE2 D0 03              3597 	pop	ar3
   0BE4 D0 02              3598 	pop	ar2
                           3599 ;	genCast
                           3600 ;	genMinus
                           3601 ;	genMinusDec
   0BE6 1E                 3602 	dec	r6
                           3603 ;	genPlus
   0BE7 E5*03              3604 	mov	a,_search_string_sloc1_1_0
   0BE9 25*07              3605 	add	a,_search_string_sloc4_1_0
   0BEB F9                 3606 	mov	r1,a
                           3607 ;	genAssign
   0BEC 90s00r1E           3608 	mov	dptr,#_char_match_PARM_2
   0BEF EE                 3609 	mov	a,r6
   0BF0 F0                 3610 	movx	@dptr,a
                           3611 ;	genAssign
   0BF1 90s00r1F           3612 	mov	dptr,#_char_match_PARM_3
   0BF4 E9                 3613 	mov	a,r1
   0BF5 F0                 3614 	movx	@dptr,a
                           3615 ;	genCall
   0BF6 8A 82              3616 	mov	dpl,r2
   0BF8 8B 83              3617 	mov	dph,r3
   0BFA 8C F0              3618 	mov	b,r4
   0BFC C0 02              3619 	push	ar2
   0BFE C0 03              3620 	push	ar3
   0C00 C0 04              3621 	push	ar4
   0C02 C0 05              3622 	push	ar5
   0C04 C0 07              3623 	push	ar7
   0C06 C0 00              3624 	push	ar0
   0C08 C0 01              3625 	push	ar1
   0C0A 12s08r85           3626 	lcall	_char_match
   0C0D E5 82              3627 	mov	a,dpl
   0C0F D0 01              3628 	pop	ar1
   0C11 D0 00              3629 	pop	ar0
   0C13 D0 07              3630 	pop	ar7
   0C15 D0 05              3631 	pop	ar5
   0C17 D0 04              3632 	pop	ar4
   0C19 D0 03              3633 	pop	ar3
   0C1B D0 02              3634 	pop	ar2
                           3635 ;	LCD.c:468: if(rv == 0){
                           3636 ;	genIpop
   0C1D D0 01              3637 	pop	ar1
                           3638 ;	genIfx
                           3639 ;	genIfxJump
                           3640 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0C1F 70 71              3641 	jnz	00109$
                           3642 ;	Peephole 300	removed redundant label 00131$
                           3643 ;	LCD.c:469: printf("\rString match occurred at DDRAM address=%x\n", temp_i+j);
                           3644 ;	genIpush
   0C21 C0 01              3645 	push	ar1
                           3646 ;	genPlus
   0C23 E5*05              3647 	mov	a,_search_string_sloc3_1_0
                           3648 ;	Peephole 236.a	used r7 instead of ar7
   0C25 2F                 3649 	add	a,r7
   0C26 FE                 3650 	mov	r6,a
   0C27 E5*06              3651 	mov	a,(_search_string_sloc3_1_0 + 1)
                           3652 ;	Peephole 236.b	used r0 instead of ar0
   0C29 38                 3653 	addc	a,r0
   0C2A F9                 3654 	mov	r1,a
                           3655 ;	genIpush
   0C2B C0 02              3656 	push	ar2
   0C2D C0 03              3657 	push	ar3
   0C2F C0 04              3658 	push	ar4
   0C31 C0 05              3659 	push	ar5
   0C33 C0 07              3660 	push	ar7
   0C35 C0 00              3661 	push	ar0
   0C37 C0 01              3662 	push	ar1
   0C39 C0 06              3663 	push	ar6
   0C3B C0 01              3664 	push	ar1
                           3665 ;	genIpush
   0C3D 74r12              3666 	mov	a,#__str_19
   0C3F C0 E0              3667 	push	acc
   0C41 74s02              3668 	mov	a,#(__str_19 >> 8)
   0C43 C0 E0              3669 	push	acc
   0C45 74 80              3670 	mov	a,#0x80
   0C47 C0 E0              3671 	push	acc
                           3672 ;	genCall
   0C49 12s00r00           3673 	lcall	_printf
   0C4C E5 81              3674 	mov	a,sp
   0C4E 24 FB              3675 	add	a,#0xfb
   0C50 F5 81              3676 	mov	sp,a
   0C52 D0 01              3677 	pop	ar1
   0C54 D0 00              3678 	pop	ar0
   0C56 D0 07              3679 	pop	ar7
   0C58 D0 05              3680 	pop	ar5
   0C5A D0 04              3681 	pop	ar4
   0C5C D0 03              3682 	pop	ar3
   0C5E D0 02              3683 	pop	ar2
                           3684 ;	LCD.c:470: j = j+strlen(find_str) - 2;
                           3685 ;	genCall
   0C60 8A 82              3686 	mov	dpl,r2
   0C62 8B 83              3687 	mov	dph,r3
   0C64 8C F0              3688 	mov	b,r4
   0C66 C0 02              3689 	push	ar2
   0C68 C0 03              3690 	push	ar3
   0C6A C0 04              3691 	push	ar4
   0C6C C0 05              3692 	push	ar5
   0C6E C0 07              3693 	push	ar7
   0C70 C0 00              3694 	push	ar0
   0C72 12s00r00           3695 	lcall	_strlen
   0C75 AE 82              3696 	mov	r6,dpl
   0C77 A9 83              3697 	mov	r1,dph
   0C79 D0 00              3698 	pop	ar0
   0C7B D0 07              3699 	pop	ar7
   0C7D D0 05              3700 	pop	ar5
   0C7F D0 04              3701 	pop	ar4
   0C81 D0 03              3702 	pop	ar3
   0C83 D0 02              3703 	pop	ar2
                           3704 ;	genCast
                           3705 ;	genPlus
                           3706 ;	Peephole 236.g	used r6 instead of ar6
   0C85 EE                 3707 	mov	a,r6
   0C86 25*03              3708 	add	a,_search_string_sloc1_1_0
                           3709 ;	genMinus
                           3710 ;	genMinusDec
   0C88 24 FE              3711 	add	a,#0xfe
                           3712 ;	genAssign
   0C8A 90s00r26           3713 	mov	dptr,#_search_string_j_1_1
   0C8D F0                 3714 	movx	@dptr,a
                           3715 ;	LCD.c:471: success_search++;
                           3716 ;	genPlus
                           3717 ;     genPlusIncr
   0C8E 05*02              3718 	inc	_search_string_sloc0_1_0
                           3719 ;	LCD.c:481: print_flag = 0x01;
                           3720 ;	genIpop
   0C90 D0 01              3721 	pop	ar1
                           3722 ;	LCD.c:471: success_search++;
   0C92                    3723 00109$:
                           3724 ;	LCD.c:460: for(j=0; j<=15; j++){
                           3725 ;	genAssign
   0C92 90s00r26           3726 	mov	dptr,#_search_string_j_1_1
   0C95 E0                 3727 	movx	a,@dptr
   0C96 FE                 3728 	mov	r6,a
                           3729 ;	genPlus
   0C97 90s00r26           3730 	mov	dptr,#_search_string_j_1_1
                           3731 ;     genPlusIncr
   0C9A 74 01              3732 	mov	a,#0x01
                           3733 ;	Peephole 236.a	used r6 instead of ar6
   0C9C 2E                 3734 	add	a,r6
   0C9D F0                 3735 	movx	@dptr,a
   0C9E 02s0Br08           3736 	ljmp	00107$
   0CA1                    3737 00124$:
                           3738 ;	genAssign
   0CA1 90s00r28           3739 	mov	dptr,#_search_string_success_search_1_1
   0CA4 E5*02              3740 	mov	a,_search_string_sloc0_1_0
   0CA6 F0                 3741 	movx	@dptr,a
                           3742 ;	LCD.c:456: for(i=0; i<=3; i++){
                           3743 ;	genPlus
                           3744 ;     genPlusIncr
   0CA7 0D                 3745 	inc	r5
   0CA8 02s0Ar8F           3746 	ljmp	00111$
   0CAB                    3747 00114$:
                           3748 ;	LCD.c:477: if(success_search == 0){
                           3749 ;	genAssign
   0CAB 90s00r28           3750 	mov	dptr,#_search_string_success_search_1_1
   0CAE E0                 3751 	movx	a,@dptr
                           3752 ;	genIfx
   0CAF FA                 3753 	mov	r2,a
                           3754 ;	Peephole 105	removed redundant mov
                           3755 ;	genIfxJump
                           3756 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0CB0 70 15              3757 	jnz	00106$
                           3758 ;	Peephole 300	removed redundant label 00132$
                           3759 ;	LCD.c:478: printf("\rString not found\n");
                           3760 ;	genIpush
   0CB2 74r3E              3761 	mov	a,#__str_20
   0CB4 C0 E0              3762 	push	acc
   0CB6 74s02              3763 	mov	a,#(__str_20 >> 8)
   0CB8 C0 E0              3764 	push	acc
   0CBA 74 80              3765 	mov	a,#0x80
   0CBC C0 E0              3766 	push	acc
                           3767 ;	genCall
   0CBE 12s00r00           3768 	lcall	_printf
   0CC1 15 81              3769 	dec	sp
   0CC3 15 81              3770 	dec	sp
   0CC5 15 81              3771 	dec	sp
   0CC7                    3772 00106$:
                           3773 ;	LCD.c:480: lcdgotoaddr(temp_addr);
                           3774 ;	genAssign
   0CC7 90s00r27           3775 	mov	dptr,#_search_string_temp_addr_1_1
   0CCA E0                 3776 	movx	a,@dptr
                           3777 ;	genCall
   0CCB FA                 3778 	mov	r2,a
                           3779 ;	Peephole 244.c	loading dpl from a instead of r2
   0CCC F5 82              3780 	mov	dpl,a
   0CCE 12s00r8F           3781 	lcall	_lcdgotoaddr
                           3782 ;	LCD.c:481: print_flag = 0x01;
                           3783 ;	genAssign
   0CD1 90s00r00           3784 	mov	dptr,#_print_flag
   0CD4 74 01              3785 	mov	a,#0x01
   0CD6 F0                 3786 	movx	@dptr,a
                           3787 ;	Peephole 300	removed redundant label 00115$
   0CD7 22                 3788 	ret
                           3789 	.area CSEG    (CODE)
                           3790 	.area CONST   (CODE)
   0000                    3791 __str_0:
   0000 0D                 3792 	.db 0x0D
   0001 48 45 58 20 44 55  3793 	.ascii "HEX DUMP FOR LCD CGRAM."
        4D 50 20 46 4F 52
        20 4C 43 44 20 43
        47 52 41 4D 2E
   0018 0A                 3794 	.db 0x0A
   0019 0D                 3795 	.db 0x0D
   001A 28 41 6C 6C 20 76  3796 	.ascii "(All values are in HEX FORMAT)"
        61 6C 75 65 73 20
        61 72 65 20 69 6E
        20 48 45 58 20 46
        4F 52 4D 41 54 29
   0038 0A                 3797 	.db 0x0A
   0039 00                 3798 	.db 0x00
   003A                    3799 __str_1:
   003A 0A                 3800 	.db 0x0A
   003B 00                 3801 	.db 0x00
   003C                    3802 __str_2:
   003C 0D                 3803 	.db 0x0D
   003D 00                 3804 	.db 0x00
   003E                    3805 __str_3:
   003E 3A 20              3806 	.ascii ": "
   0040 00                 3807 	.db 0x00
   0041                    3808 __str_4:
   0041 20 20              3809 	.ascii "  "
   0043 00                 3810 	.db 0x00
   0044                    3811 __str_5:
   0044 0D                 3812 	.db 0x0D
   0045 48 45 58 20 44 55  3813 	.ascii "HEX DUMP FOR LCD DDRAM."
        4D 50 20 46 4F 52
        20 4C 43 44 20 44
        44 52 41 4D 2E
   005C 0A                 3814 	.db 0x0A
   005D 0D                 3815 	.db 0x0D
   005E 28 41 6C 6C 20 76  3816 	.ascii "(All values are in HEX FORMAT)"
        61 6C 75 65 73 20
        61 72 65 20 69 6E
        20 48 45 58 20 46
        4F 52 4D 41 54 29
   007C 0A                 3817 	.db 0x0A
   007D 00                 3818 	.db 0x00
   007E                    3819 __str_6:
   007E 0D                 3820 	.db 0x0D
   007F 45 6E 74 65 72 20  3821 	.ascii "Enter character code(between 0 and 7). Press backspace to e"
        63 68 61 72 61 63
        74 65 72 20 63 6F
        64 65 28 62 65 74
        77 65 65 6E 20 30
        20 61 6E 64 20 37
        29 2E 20 50 72 65
        73 73 20 62 61 63
        6B 73 70 61 63 65
        20 74 6F 20 65
   00BA 78 69 74           3822 	.ascii "xit"
   00BD 0A                 3823 	.db 0x0A
   00BE 0D                 3824 	.db 0x0D
   00BF 00                 3825 	.db 0x00
   00C0                    3826 __str_7:
   00C0 0D                 3827 	.db 0x0D
   00C1 43 68 61 72 61 63  3828 	.ascii "Character code = %d"
        74 65 72 20 63 6F
        64 65 20 3D 20 25
        64
   00D4 0A                 3829 	.db 0x0A
   00D5 00                 3830 	.db 0x00
   00D6                    3831 __str_8:
   00D6 0D                 3832 	.db 0x0D
   00D7 49 6E 76 61 6C 69  3833 	.ascii "Invalid input"
        64 20 69 6E 70 75
        74
   00E4 0A                 3834 	.db 0x0A
   00E5 00                 3835 	.db 0x00
   00E6                    3836 __str_9:
   00E6 0D                 3837 	.db 0x0D
   00E7 45 6E 74 65 72 20  3838 	.ascii "Enter 5 pixel values for row %d (Format: C4 C3 C2 C1 C0). P"
        35 20 70 69 78 65
        6C 20 76 61 6C 75
        65 73 20 66 6F 72
        20 72 6F 77 20 25
        64 20 28 46 6F 72
        6D 61 74 3A 20 43
        34 20 43 33 20 43
        32 20 43 31 20 43
        30 29 2E 20 50
   0122 72 65 73 73 20 62  3839 	.ascii "ress backspace to exit"
        61 63 6B 73 70 61
        63 65 20 74 6F 20
        65 78 69 74
   0138 0A                 3840 	.db 0x0A
   0139 0A                 3841 	.db 0x0A
   013A 0D                 3842 	.db 0x0D
   013B 00                 3843 	.db 0x00
   013C                    3844 __str_10:
   013C 0D                 3845 	.db 0x0D
   013D 49 6E 76 61 6C 69  3846 	.ascii "Invalid input. Please enter valid input"
        64 20 69 6E 70 75
        74 2E 20 50 6C 65
        61 73 65 20 65 6E
        74 65 72 20 76 61
        6C 69 64 20 69 6E
        70 75 74
   0164 0A                 3847 	.db 0x0A
   0165 00                 3848 	.db 0x00
   0166                    3849 __str_11:
   0166 25 64              3850 	.ascii "%d"
   0168 00                 3851 	.db 0x00
   0169                    3852 __str_12:
   0169 0A                 3853 	.db 0x0A
   016A 0D                 3854 	.db 0x0D
   016B 00                 3855 	.db 0x00
   016C                    3856 __str_13:
   016C 0D                 3857 	.db 0x0D
   016D 73 74 72 5F 6C 65  3858 	.ascii "str_len=%d temp_addr = %x"
        6E 3D 25 64 20 74
        65 6D 70 5F 61 64
        64 72 20 3D 20 25
        78
   0186 0A                 3859 	.db 0x0A
   0187 00                 3860 	.db 0x00
   0188                    3861 __str_14:
   0188 0D                 3862 	.db 0x0D
   0189 20 70 6F 73 74 20  3863 	.ascii " post wrap address=%x"
        77 72 61 70 20 61
        64 64 72 65 73 73
        3D 25 78
   019E 0A                 3864 	.db 0x0A
   019F 00                 3865 	.db 0x00
   01A0                    3866 __str_15:
   01A0 0D                 3867 	.db 0x0D
   01A1 4C 65 74 74 65 72  3868 	.ascii "Letter scanned = %x at location %x"
        20 73 63 61 6E 6E
        65 64 20 3D 20 25
        78 20 61 74 20 6C
        6F 63 61 74 69 6F
        6E 20 25 78
   01C3 0A                 3869 	.db 0x0A
   01C4 00                 3870 	.db 0x00
   01C5                    3871 __str_16:
   01C5 0D                 3872 	.db 0x0D
   01C6 53 74 72 69 6E 67  3873 	.ascii "String Received is %s"
        20 52 65 63 65 69
        76 65 64 20 69 73
        20 25 73
   01DB 0A                 3874 	.db 0x0A
   01DC 00                 3875 	.db 0x00
   01DD                    3876 __str_17:
   01DD 0D                 3877 	.db 0x0D
   01DE 74 65 6D 70 3D 25  3878 	.ascii "temp=%x"
        78
   01E5 0A                 3879 	.db 0x0A
   01E6 00                 3880 	.db 0x00
   01E7                    3881 __str_18:
   01E7 0D                 3882 	.db 0x0D
   01E8 43 68 61 72 61 63  3883 	.ascii "Character matched occurred at address %x"
        74 65 72 20 6D 61
        74 63 68 65 64 20
        6F 63 63 75 72 72
        65 64 20 61 74 20
        61 64 64 72 65 73
        73 20 25 78
   0210 0A                 3884 	.db 0x0A
   0211 00                 3885 	.db 0x00
   0212                    3886 __str_19:
   0212 0D                 3887 	.db 0x0D
   0213 53 74 72 69 6E 67  3888 	.ascii "String match occurred at DDRAM address=%x"
        20 6D 61 74 63 68
        20 6F 63 63 75 72
        72 65 64 20 61 74
        20 44 44 52 41 4D
        20 61 64 64 72 65
        73 73 3D 25 78
   023C 0A                 3889 	.db 0x0A
   023D 00                 3890 	.db 0x00
   023E                    3891 __str_20:
   023E 0D                 3892 	.db 0x0D
   023F 53 74 72 69 6E 67  3893 	.ascii "String not found"
        20 6E 6F 74 20 66
        6F 75 6E 64
   024F 0A                 3894 	.db 0x0A
   0250 00                 3895 	.db 0x00
                           3896 	.area XINIT   (CODE)
   0000                    3897 __xinit__count_value:
   0000 00                 3898 	.db #0x00
